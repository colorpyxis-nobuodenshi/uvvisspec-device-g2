
uvvisspec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  00004eba  00004f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000624  0080025c  0080025c  000050aa  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000050aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000076ab  00000000  00000000  0000547c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000201c  00000000  00000000  0000cb27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b02  00000000  00000000  0000eb43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b94  00000000  00000000  00012648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000293f  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b8c  00000000  00000000  00015b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  0001a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c8 c7       	rjmp	.+3984   	; 0xf92 <__ctors_end>
       2:	00 00       	nop
       4:	e3 c7       	rjmp	.+4038   	; 0xfcc <__bad_interrupt>
       6:	00 00       	nop
       8:	e1 c7       	rjmp	.+4034   	; 0xfcc <__bad_interrupt>
       a:	00 00       	nop
       c:	df c7       	rjmp	.+4030   	; 0xfcc <__bad_interrupt>
       e:	00 00       	nop
      10:	dd c7       	rjmp	.+4026   	; 0xfcc <__bad_interrupt>
      12:	00 00       	nop
      14:	db c7       	rjmp	.+4022   	; 0xfcc <__bad_interrupt>
      16:	00 00       	nop
      18:	d9 c7       	rjmp	.+4018   	; 0xfcc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d7 c7       	rjmp	.+4014   	; 0xfcc <__bad_interrupt>
      1e:	00 00       	nop
      20:	d5 c7       	rjmp	.+4010   	; 0xfcc <__bad_interrupt>
      22:	00 00       	nop
      24:	d3 c7       	rjmp	.+4006   	; 0xfcc <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_10>
      2c:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__vector_11>
      30:	cd c7       	rjmp	.+3994   	; 0xfcc <__bad_interrupt>
      32:	00 00       	nop
      34:	cb c7       	rjmp	.+3990   	; 0xfcc <__bad_interrupt>
      36:	00 00       	nop
      38:	c9 c7       	rjmp	.+3986   	; 0xfcc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c7 c7       	rjmp	.+3982   	; 0xfcc <__bad_interrupt>
      3e:	00 00       	nop
      40:	c5 c7       	rjmp	.+3978   	; 0xfcc <__bad_interrupt>
      42:	00 00       	nop
      44:	c3 c7       	rjmp	.+3974   	; 0xfcc <__bad_interrupt>
      46:	00 00       	nop
      48:	c1 c7       	rjmp	.+3970   	; 0xfcc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bf c7       	rjmp	.+3966   	; 0xfcc <__bad_interrupt>
      4e:	00 00       	nop
      50:	bd c7       	rjmp	.+3962   	; 0xfcc <__bad_interrupt>
      52:	00 00       	nop
      54:	bb c7       	rjmp	.+3958   	; 0xfcc <__bad_interrupt>
      56:	00 00       	nop
      58:	b9 c7       	rjmp	.+3954   	; 0xfcc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b7 c7       	rjmp	.+3950   	; 0xfcc <__bad_interrupt>
      5e:	00 00       	nop
      60:	b5 c7       	rjmp	.+3946   	; 0xfcc <__bad_interrupt>
      62:	00 00       	nop
      64:	b3 c7       	rjmp	.+3942   	; 0xfcc <__bad_interrupt>
      66:	00 00       	nop
      68:	b1 c7       	rjmp	.+3938   	; 0xfcc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	af c7       	rjmp	.+3934   	; 0xfcc <__bad_interrupt>
      6e:	00 00       	nop
      70:	ad c7       	rjmp	.+3930   	; 0xfcc <__bad_interrupt>
      72:	00 00       	nop
      74:	ab c7       	rjmp	.+3926   	; 0xfcc <__bad_interrupt>
      76:	00 00       	nop
      78:	a9 c7       	rjmp	.+3922   	; 0xfcc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a7 c7       	rjmp	.+3918   	; 0xfcc <__bad_interrupt>
      7e:	00 00       	nop
      80:	a5 c7       	rjmp	.+3914   	; 0xfcc <__bad_interrupt>
      82:	00 00       	nop
      84:	a3 c7       	rjmp	.+3910   	; 0xfcc <__bad_interrupt>
      86:	00 00       	nop
      88:	a1 c7       	rjmp	.+3906   	; 0xfcc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9f c7       	rjmp	.+3902   	; 0xfcc <__bad_interrupt>
      8e:	00 00       	nop
      90:	9d c7       	rjmp	.+3898   	; 0xfcc <__bad_interrupt>
      92:	00 00       	nop
      94:	9b c7       	rjmp	.+3894   	; 0xfcc <__bad_interrupt>
      96:	00 00       	nop
      98:	99 c7       	rjmp	.+3890   	; 0xfcc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	97 c7       	rjmp	.+3886   	; 0xfcc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	95 c7       	rjmp	.+3882   	; 0xfcc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	93 c7       	rjmp	.+3878   	; 0xfcc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	91 c7       	rjmp	.+3874   	; 0xfcc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 00       	.word	0x0008	; ????
      ae:	00 00       	nop
      b0:	be 92       	st	-X, r11
      b2:	24 49       	sbci	r18, 0x94	; 148
      b4:	12 3e       	cpi	r17, 0xE2	; 226
      b6:	ab aa       	std	Y+51, r10	; 0x33
      b8:	aa 2a       	or	r10, r26
      ba:	be cd       	rjmp	.-1156   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
      bc:	cc cc       	rjmp	.-1640   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
      be:	4c 3e       	cpi	r20, 0xEC	; 236
      c0:	00 00       	nop
      c2:	00 80       	ld	r0, Z
      c4:	be ab       	std	Y+54, r27	; 0x36
      c6:	aa aa       	std	Y+50, r10	; 0x32
      c8:	aa 3e       	cpi	r26, 0xEA	; 234
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	bf 00       	.word	0x00bf	; ????
      d0:	00 00       	nop
      d2:	80 3f       	cpi	r24, 0xF0	; 240
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	00 08       	sbc	r0, r0
      da:	41 78       	andi	r20, 0x81	; 129
      dc:	d3 bb       	out	0x13, r29	; 19
      de:	43 87       	std	Z+11, r20	; 0x0b
      e0:	d1 13       	cpse	r29, r17
      e2:	3d 19       	sub	r19, r13
      e4:	0e 3c       	cpi	r16, 0xCE	; 206
      e6:	c3 bd       	out	0x23, r28	; 35
      e8:	42 82       	std	Z+2, r4	; 0x02
      ea:	ad 2b       	or	r26, r29
      ec:	3e 68       	ori	r19, 0x8E	; 142
      ee:	ec 82       	std	Y+4, r14	; 0x04
      f0:	76 be       	out	0x36, r7	; 54
      f2:	d9 8f       	std	Y+25, r29	; 0x19
      f4:	e1 a9       	ldd	r30, Z+49	; 0x31
      f6:	3e 4c       	sbci	r19, 0xCE	; 206
      f8:	80 ef       	ldi	r24, 0xF0	; 240
      fa:	ff be       	out	0x3f, r15	; 63
      fc:	01 c4       	rjmp	.+2050   	; 0x900 <spectralsensitivitycoeff+0x322>
      fe:	ff 7f       	andi	r31, 0xFF	; 255
     100:	3f 00       	.word	0x003f	; ????
     102:	00 00       	nop
     104:	00 00       	nop

00000106 <__trampolines_end>:
     106:	6e 61       	ori	r22, 0x1E	; 30
     108:	6e 00       	.word	0x006e	; ????

0000010a <__c.2332>:
     10a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1aa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1ba:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ca:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1da:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ea:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fa:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000208 <wl_lut_1nm>:
     208:	06 00 06 00 06 00 07 00 07 00 08 00 08 00 08 00     ................
     218:	09 00 09 00 09 00 0a 00 0a 00 0b 00 0b 00 0b 00     ................
     228:	0c 00 0c 00 0c 00 0d 00 0d 00 0e 00 0e 00 0e 00     ................
     238:	0f 00 0f 00 0f 00 10 00 10 00 11 00 11 00 11 00     ................
     248:	12 00 12 00 12 00 13 00 13 00 14 00 14 00 14 00     ................
     258:	15 00 15 00 16 00 16 00 16 00 17 00 17 00 17 00     ................
     268:	18 00 18 00 19 00 19 00 19 00 1a 00 1a 00 1a 00     ................
     278:	1b 00 1b 00 1c 00 1c 00 1c 00 1d 00 1d 00 1e 00     ................
     288:	1e 00 1e 00 1f 00 1f 00 1f 00 20 00 20 00 21 00     .......... . .!.
     298:	21 00 21 00 22 00 22 00 23 00 23 00 23 00 24 00     !.!.".".#.#.#.$.
     2a8:	24 00 24 00 25 00 25 00 26 00 26 00 26 00 27 00     $.$.%.%.&.&.&.'.
     2b8:	27 00 28 00 28 00 28 00 29 00 29 00 2a 00 2a 00     '.(.(.(.).).*.*.
     2c8:	2a 00 2b 00 2b 00 2b 00 2c 00 2c 00 2d 00 2d 00     *.+.+.+.,.,.-.-.
     2d8:	2d 00 2e 00 2e 00 2f 00 2f 00 2f 00 30 00 30 00     -...../././.0.0.
     2e8:	31 00 31 00 31 00 32 00 32 00 33 00 33 00 33 00     1.1.1.2.2.3.3.3.
     2f8:	34 00 34 00 35 00 35 00 35 00 36 00 36 00 37 00     4.4.5.5.5.6.6.7.
     308:	37 00 37 00 38 00 38 00 39 00 39 00 39 00 3a 00     7.7.8.8.9.9.9.:.
     318:	3a 00 3b 00 3b 00 3b 00 3c 00 3c 00 3d 00 3d 00     :.;.;.;.<.<.=.=.
     328:	3d 00 3e 00 3e 00 3f 00 3f 00 3f 00 40 00 40 00     =.>.>.?.?.?.@.@.
     338:	41 00 41 00 41 00 42 00 42 00 43 00 43 00 43 00     A.A.A.B.B.C.C.C.
     348:	44 00 44 00 45 00 45 00 45 00 46 00 46 00 47 00     D.D.E.E.E.F.F.G.
     358:	47 00 48 00 48 00 48 00 49 00 49 00 4a 00 4a 00     G.H.H.H.I.I.J.J.
     368:	4a 00 4b 00 4b 00 4c 00 4c 00 4c 00 4d 00 4d 00     J.K.K.L.L.L.M.M.
     378:	4e 00 4e 00 4f 00 4f 00 4f 00 50 00 50 00 51 00     N.N.O.O.O.P.P.Q.
     388:	51 00 51 00 52 00 52 00 53 00 53 00 54 00 54 00     Q.Q.R.R.S.S.T.T.
     398:	54 00 55 00 55 00 56 00 56 00 57 00 57 00 57 00     T.U.U.V.V.W.W.W.
     3a8:	58 00 58 00 59 00 59 00 5a 00 5a 00 5a 00 5b 00     X.X.Y.Y.Z.Z.Z.[.
     3b8:	5b 00 5c 00 5c 00 5d 00 5d 00 5d 00 5e 00 5e 00     [.\.\.].].].^.^.
     3c8:	5f 00 5f 00 60 00 60 00 60 00 61 00 61 00 62 00     _._.`.`.`.a.a.b.
     3d8:	62 00 63 00 63 00 63 00 64 00 64 00 65 00 65 00     b.c.c.c.d.d.e.e.
     3e8:	66 00 66 00 67 00 67 00 67 00 68 00 68 00 69 00     f.f.g.g.g.h.h.i.
     3f8:	69 00 6a 00 6a 00 6b 00 6b 00 6b 00 6c 00 6c 00     i.j.j.k.k.k.l.l.
     408:	6d 00 6d 00 6e 00 6e 00 6f 00 6f 00 6f 00 70 00     m.m.n.n.o.o.o.p.
     418:	70 00 71 00 71 00 72 00 72 00 73 00 73 00 74 00     p.q.q.r.r.s.s.t.
     428:	74 00 74 00 75 00 75 00 76 00 76 00 77 00 77 00     t.t.u.u.v.v.w.w.
     438:	78 00 78 00 79 00 79 00 7a 00 7a 00 7b 00 7b 00     x.x.y.y.z.z.{.{.
     448:	7b 00 7c 00 7c 00 7d 00 7d 00 7e 00 7e 00 7f 00     {.|.|.}.}.~.~...
     458:	7f 00 80 00 80 00 81 00 81 00 82 00 82 00 83 00     ................
     468:	83 00 83 00 84 00 84 00 85 00 85 00 86 00 86 00     ................
     478:	87 00 87 00 88 00 88 00 89 00 89 00 8a 00 8a 00     ................
     488:	8b 00 8b 00 8c 00 8c 00 8d 00 8d 00 8e 00 8e 00     ................
     498:	8f 00 8f 00 90 00 90 00 91 00 91 00 92 00 92 00     ................
     4a8:	93 00 93 00 94 00 94 00 95 00 95 00 96 00 96 00     ................
     4b8:	97 00 97 00 98 00 98 00 99 00 99 00 9a 00 9a 00     ................
     4c8:	9b 00 9b 00 9c 00 9c 00 9d 00 9d 00 9e 00 9e 00     ................
     4d8:	9f 00 9f 00 a0 00 a1 00 a1 00 a2 00 a2 00 a3 00     ................
     4e8:	a3 00 a4 00 a4 00 a5 00 a5 00 a6 00 a6 00 a7 00     ................
     4f8:	a7 00 a8 00 a8 00 a9 00 aa 00 aa 00 ab 00 ab 00     ................
     508:	ac 00 ac 00 ad 00 ad 00 ae 00 ae 00 af 00 b0 00     ................
     518:	b0 00 b1 00 b1 00 b2 00 b2 00 b3 00 b3 00 b4 00     ................
     528:	b5 00 b5 00 b6 00 b6 00 b7 00 b7 00 b8 00 b9 00     ................
     538:	b9 00 ba 00 ba 00 bb 00 bb 00 bc 00 bd 00 bd 00     ................
     548:	be 00 be 00 bf 00 c0 00 c0 00 c1 00 c1 00 c2 00     ................
     558:	c2 00 c3 00 c4 00 c4 00 c5 00 c5 00 c6 00 c7 00     ................
     568:	c7 00 c8 00 c8 00 c9 00 ca 00 ca 00 cb 00 cc 00     ................
     578:	cc 00 cd 00 cd 00 ce 00 cf 00 cf 00 d0 00 d0 00     ................
     588:	d1 00 d2 00 d2 00 d3 00 d4 00 d4 00 d5 00 d6 00     ................
     598:	d6 00 d7 00 d7 00 d8 00 d9 00 d9 00 da 00 db 00     ................
     5a8:	db 00 dc 00 dd 00 dd 00 de 00 df 00 df 00 00 00     ................
     5b8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5d8:	00 00 00 00 00 00                                   ......

000005de <spectralsensitivitycoeff>:
     5de:	78 5a 0c 4b 78 5a 0c 4b 78 5a 0c 4b 78 5a 0c 4b     xZ.KxZ.KxZ.KxZ.K
     5ee:	78 5a 0c 4b 78 5a 0c 4b 78 5a 0c 4b 78 5a 0c 4b     xZ.KxZ.KxZ.KxZ.K
     5fe:	78 5a 0c 4b cf 04 0f 4b 76 8e 13 4b 2f e2 18 4b     xZ.K...Kv..K/..K
     60e:	d7 96 1e 4b 71 31 24 4b 37 3c 29 4b f6 90 2d 4b     ...Kq1$K7<)K..-K
     61e:	eb e1 30 4b 32 14 32 4b 59 4c 31 4b 49 96 2f 4b     ..0K2.2KYL1KI./K
     62e:	fe 48 2d 4b 9f 58 2a 4b 03 85 27 4b 2c 7f 25 4b     .H-K.X*K..'K,.%K
     63e:	33 d4 24 4b b1 a5 27 4b f8 52 2c 4b 85 8e 32 4b     3.$K..'K.R,K..2K
     64e:	4a 43 3a 4b 0e e1 43 4b 1c 0c 4e 4b dc 32 58 4b     JC:K..CK..NK.2XK
     65e:	4c 87 61 4b fb 35 69 4b 08 a5 6f 4b 29 a0 74 4b     L.aK.5iK..oK).tK
     66e:	45 81 77 4b 3a 19 78 4b 76 3f 77 4b 55 2e 75 4b     E.wK:.xKv?wKU.uK
     67e:	eb e1 71 4b 7c b5 6d 4b e1 44 69 4b 04 f6 64 4b     ..qK|.mK.DiK..dK
     68e:	2b 5c 61 4b 32 b5 5e 4b 92 2c 5d 4b d2 07 5d 4b     +\aK2.^K.,]K..]K
     69e:	76 dd 5f 4b 73 a4 64 4b fb 58 6a 4b 3f 84 70 4b     v._Ks.dK.XjK?.pK
     6ae:	eb 93 75 4b d1 45 7a 4b 63 14 7f 4b 21 0f 82 4b     ..uK.EzKc..K!..K
     6be:	63 30 85 4b 00 81 88 4b 8d b9 8b 4b 6e b2 8e 4b     c0.K...K...Kn..K
     6ce:	58 d0 90 4b 20 6c 92 4b 6b b9 93 4b 40 ca 94 4b     X..K l.Kk..K@..K
     6de:	80 2d 96 4b 7d 73 97 4b fe 43 98 4b 90 72 98 4b     .-.K}s.K.C.K.r.K
     6ee:	99 15 97 4b 62 ac 94 4b 05 cb 91 4b 5b ab 8e 4b     ...Kb..K...K[..K
     6fe:	b6 c8 8b 4b 77 30 89 4b 02 c3 86 4b a7 8f 84 4b     ...Kw0.K...K...K
     70e:	ad b8 82 4b e4 49 81 4b 78 2c 80 4b e4 c0 7e 4b     ...K.I.Kx,.K..~K
     71e:	9c e9 7d 4b a3 f3 7d 4b 6e 72 7e 4b d3 42 7f 4b     ..}K..}Knr~K.B.K
     72e:	3f 20 80 4b ac 9c 80 4b 42 12 81 4b b9 73 81 4b     ? .K...KB..K.s.K
     73e:	f7 b3 81 4b 85 8c 81 4b e7 31 81 4b e4 ba 80 4b     ...K...K.1.K...K
     74e:	0e 32 80 4b f3 57 7f 4b 0c 5c 7e 4b 55 67 7d 4b     .2.K.W.K.\~KUg}K
     75e:	d6 81 7c 4b 1a ba 7b 4b 97 27 7b 4b 8a af 7a 4b     ..|K..{K.'{K..zK
     76e:	ad 4f 7a 4b c3 05 7a 4b 9c ca 79 4b 88 a1 79 4b     .OzK..zK..yK..yK
     77e:	59 8b 79 4b cb 87 79 4b 0e 95 79 4b 93 b2 79 4b     Y.yK..yK..yK..yK
     78e:	9d e3 79 4b 12 29 7a 4b d6 83 7a 4b fe 1f 7b 4b     ..yK.)zK..zK..{K
     79e:	15 ca 7b 4b 7b 70 7c 4b 01 06 7d 4b 34 72 7d 4b     ..{K{p|K..}K4r}K
     7ae:	71 a4 7d 4b ac ab 7d 4b 22 84 7d 4b 26 2a 7d 4b     q.}K..}K".}K&*}K
     7be:	21 6e 7c 4b b8 78 7b 4b e1 62 7a 4b cf 38 79 4b     !n|K.x{K.bzK.8yK
     7ce:	0c 11 78 4b 28 2f 77 4b 16 43 76 4b 5f 42 75 4b     ..xK(/wK.CvK_BuK
     7de:	b9 22 74 4b 3a c1 72 4b 0c 10 71 4b e9 38 6f 4b     ."tK:.rK..qK.8oK
     7ee:	f1 41 6d 4b 28 31 6b 4b 39 1f 69 4b a0 05 67 4b     .AmK(1kK9.iK..gK
     7fe:	ed d6 64 4b 22 91 62 4b 4e 32 60 4b 51 75 5d 4b     ..dK".bKN2`KQu]K
     80e:	36 98 5a 4b db c3 57 4b 02 0c 55 4b 11 84 52 4b     6.ZK..WK..UK..RK
     81e:	7f e1 50 4b bd 8b 4f 4b a4 45 4e 4b c1 f2 4c 4b     ..PK..OK.ENK..LK
     82e:	2d 77 4b 4b 1e fd 48 4b 88 2a 46 4b 33 41 43 4b     -wKK..HK.*FK3ACK
     83e:	4a 5b 40 4b 75 92 3d 4b d1 6c 3b 4b 86 a3 39 4b     J[@Ku.=K.l;K..9K
     84e:	35 06 38 4b c1 8b 36 4b 39 2b 35 4b 60 b2 33 4b     5.8K..6K9+5K`.3K
     85e:	ff 2a 32 4b 40 bd 30 4b a3 70 2f 4b 81 4c 2e 4b     .*2K@.0K.p/K.L.K
     86e:	9a 80 2d 4b 33 43 2d 4b 49 1d 2d 4b 23 f9 2c 4b     ..-K3C-KI.-K#.,K
     87e:	79 c1 2c 4b 76 61 2c 4b 8a 30 2b 4b 1f c2 29 4b     y.,Kva,K.0+K..)K
     88e:	b1 2f 28 4b 32 86 26 4b 52 d2 24 4b fe 40 23 4b     ./(K2.&KR.$K.@#K
     89e:	dc dd 21 4b 5f 80 20 4b a5 26 1f 4b d5 ce 1d 4b     ..!K_. K.&.K...K
     8ae:	23 77 1c 4b 2f e1 1a 4b 2b 4b 19 4b f1 c8 17 4b     #w.K/..K+K.K...K
     8be:	8d 65 16 4b cd 2b 15 4b 09 44 14 4b 6b 14 14 4b     .e.K.+.K.D.Kk..K
     8ce:	ee 0a 14 4b 83 15 14 4b 7e 22 14 4b 96 20 14 4b     ...K...K~".K. .K
     8de:	50 d1 13 4b e1 0d 13 4b 3d 27 12 4b 0e 22 11 4b     P..K...K='.K.".K
     8ee:	e8 02 10 4b 42 ce 0e 4b b0 a0 0d 4b f2 81 0c 4b     ...KB..K...K...K
     8fe:	26 4d 0b 4b 68 fd 09 4b f5 8d 08 4b 23 fa 06 4b     &M.Kh..K...K#..K
     90e:	7d 16 05 4b 1d c5 02 4b dd 59 00 4b b7 c2 fb 4a     }..K...K.Y.K...J
     91e:	db cf f6 4a 44 f3 f1 4a 05 5f ed 4a fa b7 e9 4a     ...JD..J._.J...J
     92e:	4c 49 e6 4a 66 0b e3 4a dc f6 df 4a 6e 04 dd 4a     LI.Jf..J...Jn..J
     93e:	02 2d da 4a c9 46 d7 4a b0 67 d4 4a 07 9b d1 4a     .-.J.F.J.g.J...J
     94e:	b9 e0 ce 4a b0 38 cc 4a d8 a2 c9 4a d8 a2 c9 4a     ...J.8.J...J...J
     95e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     96e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     97e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     98e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     99e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     9ae:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     9be:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     9ce:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     9de:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     9ee:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     9fe:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     a0e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     a1e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     a2e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     a3e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J
     a4e:	d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a d8 a2 c9 4a     ...J...J...J...J

00000a5e <wccoeff>:
     a5e:	d2 bb 9c 43 b6 9d 2b 40 59 19 58 ba ff b5 25 b7     ...C..+@Y.X...%.
     a6e:	e0 7d 87 32 a2 6f 0c ac                             .}.2.o..

00000a76 <serialnumber>:
     a76:	43 50 31 35 30 32 32 47 30 32 36 38 39 00           CP15022G02689.

00000a84 <name>:
     a84:	55 56 56 49 53 53 50 45 43 00                       UVVISSPEC.

00000a8e <model>:
     a8e:	43 50 31 35 30 00                                   CP150.

00000a94 <wl_1nm>:
     a94:	4a 01 4b 01 4c 01 4d 01 4e 01 4f 01 50 01 51 01     J.K.L.M.N.O.P.Q.
     aa4:	52 01 53 01 54 01 55 01 56 01 57 01 58 01 59 01     R.S.T.U.V.W.X.Y.
     ab4:	5a 01 5b 01 5c 01 5d 01 5e 01 5f 01 60 01 61 01     Z.[.\.].^._.`.a.
     ac4:	62 01 63 01 64 01 65 01 66 01 67 01 68 01 69 01     b.c.d.e.f.g.h.i.
     ad4:	6a 01 6b 01 6c 01 6d 01 6e 01 6f 01 70 01 71 01     j.k.l.m.n.o.p.q.
     ae4:	72 01 73 01 74 01 75 01 76 01 77 01 78 01 79 01     r.s.t.u.v.w.x.y.
     af4:	7a 01 7b 01 7c 01 7d 01 7e 01 7f 01 80 01 81 01     z.{.|.}.~.......
     b04:	82 01 83 01 84 01 85 01 86 01 87 01 88 01 89 01     ................
     b14:	8a 01 8b 01 8c 01 8d 01 8e 01 8f 01 90 01 91 01     ................
     b24:	92 01 93 01 94 01 95 01 96 01 97 01 98 01 99 01     ................
     b34:	9a 01 9b 01 9c 01 9d 01 9e 01 9f 01 a0 01 a1 01     ................
     b44:	a2 01 a3 01 a4 01 a5 01 a6 01 a7 01 a8 01 a9 01     ................
     b54:	aa 01 ab 01 ac 01 ad 01 ae 01 af 01 b0 01 b1 01     ................
     b64:	b2 01 b3 01 b4 01 b5 01 b6 01 b7 01 b8 01 b9 01     ................
     b74:	ba 01 bb 01 bc 01 bd 01 be 01 bf 01 c0 01 c1 01     ................
     b84:	c2 01 c3 01 c4 01 c5 01 c6 01 c7 01 c8 01 c9 01     ................
     b94:	ca 01 cb 01 cc 01 cd 01 ce 01 cf 01 d0 01 d1 01     ................
     ba4:	d2 01 d3 01 d4 01 d5 01 d6 01 d7 01 d8 01 d9 01     ................
     bb4:	da 01 db 01 dc 01 dd 01 de 01 df 01 e0 01 e1 01     ................
     bc4:	e2 01 e3 01 e4 01 e5 01 e6 01 e7 01 e8 01 e9 01     ................
     bd4:	ea 01 eb 01 ec 01 ed 01 ee 01 ef 01 f0 01 f1 01     ................
     be4:	f2 01 f3 01 f4 01 f5 01 f6 01 f7 01 f8 01 f9 01     ................
     bf4:	fa 01 fb 01 fc 01 fd 01 fe 01 ff 01 00 02 01 02     ................
     c04:	02 02 03 02 04 02 05 02 06 02 07 02 08 02 09 02     ................
     c14:	0a 02 0b 02 0c 02 0d 02 0e 02 0f 02 10 02 11 02     ................
     c24:	12 02 13 02 14 02 15 02 16 02 17 02 18 02 19 02     ................
     c34:	1a 02 1b 02 1c 02 1d 02 1e 02 1f 02 20 02 21 02     ............ .!.
     c44:	22 02 23 02 24 02 25 02 26 02 27 02 28 02 29 02     ".#.$.%.&.'.(.).
     c54:	2a 02 2b 02 2c 02 2d 02 2e 02 2f 02 30 02 31 02     *.+.,.-.../.0.1.
     c64:	32 02 33 02 34 02 35 02 36 02 37 02 38 02 39 02     2.3.4.5.6.7.8.9.
     c74:	3a 02 3b 02 3c 02 3d 02 3e 02 3f 02 40 02 41 02     :.;.<.=.>.?.@.A.
     c84:	42 02 43 02 44 02 45 02 46 02 47 02 48 02 49 02     B.C.D.E.F.G.H.I.
     c94:	4a 02 4b 02 4c 02 4d 02 4e 02 4f 02 50 02 51 02     J.K.L.M.N.O.P.Q.
     ca4:	52 02 53 02 54 02 55 02 56 02 57 02 58 02 59 02     R.S.T.U.V.W.X.Y.
     cb4:	5a 02 5b 02 5c 02 5d 02 5e 02 5f 02 60 02 61 02     Z.[.\.].^._.`.a.
     cc4:	62 02 63 02 64 02 65 02 66 02 67 02 68 02 69 02     b.c.d.e.f.g.h.i.
     cd4:	6a 02 6b 02 6c 02 6d 02 6e 02 6f 02 70 02 71 02     j.k.l.m.n.o.p.q.
     ce4:	72 02 73 02 74 02 75 02 76 02 77 02 78 02 79 02     r.s.t.u.v.w.x.y.
     cf4:	7a 02 7b 02 7c 02 7d 02 7e 02 7f 02 80 02 81 02     z.{.|.}.~.......
     d04:	82 02 83 02 84 02 85 02 86 02 87 02 88 02 89 02     ................
     d14:	8a 02 8b 02 8c 02 8d 02 8e 02 8f 02 90 02 91 02     ................
     d24:	92 02 93 02 94 02 95 02 96 02 97 02 98 02 99 02     ................
     d34:	9a 02 9b 02 9c 02 9d 02 9e 02 9f 02 a0 02 a1 02     ................
     d44:	a2 02 a3 02 a4 02 a5 02 a6 02 a7 02 a8 02 a9 02     ................
     d54:	aa 02 ab 02 ac 02 ad 02 ae 02 af 02 b0 02 b1 02     ................
     d64:	b2 02 b3 02 b4 02 b5 02 b6 02 b7 02 b8 02 b9 02     ................
     d74:	ba 02 bb 02 bc 02 bd 02 be 02 bf 02 c0 02 c1 02     ................
     d84:	c2 02 c3 02 c4 02 c5 02 c6 02 c7 02 c8 02 c9 02     ................
     d94:	ca 02 cb 02 cc 02 cd 02 ce 02 cf 02 d0 02 d1 02     ................
     da4:	d2 02 d3 02 d4 02 d5 02 d6 02 d7 02 d8 02 d9 02     ................
     db4:	da 02 db 02 dc 02 dd 02 de 02 df 02 e0 02 e1 02     ................
     dc4:	e2 02 e3 02 e4 02 e5 02 e6 02 e7 02 e8 02 e9 02     ................
     dd4:	ea 02 eb 02 ec 02 ed 02 ee 02 ef 02 f0 02 f1 02     ................
     de4:	f2 02 f3 02 f4 02 f5 02 f6 02 f7 02 f8 02 f9 02     ................
     df4:	fa 02 fb 02 fc 02 fd 02 fe 02 ff 02 00 03 01 03     ................
     e04:	02 03 03 03 04 03 05 03 06 03 07 03 08 03 09 03     ................
     e14:	0a 03 0b 03 0c 03 0d 03 0e 03 0f 03 10 03 11 03     ................
     e24:	12 03 13 03 14 03 15 03 16 03 17 03 18 03 19 03     ................
     e34:	1a 03 1b 03 1c 03 1d 03 1e 03 1f 03 20 03           ............ .

00000e42 <wl_10nm>:
     e42:	4a 01 54 01 5e 01 68 01 72 01 7c 01 86 01 90 01     J.T.^.h.r.|.....
     e52:	9a 01 a4 01 ae 01 b8 01 c2 01 cc 01 d6 01 e0 01     ................
     e62:	ea 01 f4 01 fe 01 08 02 12 02 1c 02 26 02 30 02     ............&.0.
     e72:	3a 02 44 02 4e 02 58 02 62 02 6c 02 76 02 80 02     :.D.N.X.b.l.v...
     e82:	8a 02 94 02 9e 02 a8 02 b2 02 bc 02 c6 02 d0 02     ................
     e92:	da 02 e4 02 ee 02 f8 02 02 03 0c 03 16 03 20 03     .............. .

00000ea2 <unitcoeff>:
     ea2:	17 b7 d1 38 17 b7 51 39 6f 12 03 3a 6f 12 83 3a     ...8..Q9o..:o..:
     eb2:	6f 12 03 3b 0a d7 a3 3b 0a d7 23 3c 0a d7 a3 3c     o..;...;..#<...<
     ec2:	cd cc 4c 3d cd cc cc 3d                             ..L=...=

00000eca <ProductString>:
     eca:	14 03 55 00 56 00 56 00 49 00 53 00 53 00 50 00     ..U.V.V.I.S.S.P.
     eda:	45 00 43 00 00 00                                   E.C...

00000ee0 <ManufacturerString>:
     ee0:	0e 03 4f 00 50 00 54 00 43 00 4f 00 4d 00 00 00     ..O.P.T.C.O.M...

00000ef0 <LanguageString>:
     ef0:	04 03 09 04                                         ....

00000ef4 <ConfigurationDescriptor>:
     ef4:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     f04:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     f14:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     f24:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000f32 <DeviceDescriptor>:
     f32:	12 01 10 01 02 00 00 08 a3 21 01 20 01 00 01 02     .........!. ....
     f42:	dc 01                                               ..

00000f44 <__c.2529>:
     f44:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     f54:	47 00                                               G.

00000f56 <pstr_an>:
     f56:	61 6e 00                                            an.

00000f59 <pstr_nfinity>:
     f59:	6e 66 69 6e 69 74 79 00                             nfinity.

00000f61 <pwr_m10>:
     f61:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     f71:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000f79 <pwr_p10>:
     f79:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     f89:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000f92 <__ctors_end>:
     f92:	11 24       	eor	r1, r1
     f94:	1f be       	out	0x3f, r1	; 63
     f96:	cf ef       	ldi	r28, 0xFF	; 255
     f98:	da e0       	ldi	r29, 0x0A	; 10
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	cd bf       	out	0x3d, r28	; 61

00000f9e <__do_copy_data>:
     f9e:	12 e0       	ldi	r17, 0x02	; 2
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b1 e0       	ldi	r27, 0x01	; 1
     fa4:	ea eb       	ldi	r30, 0xBA	; 186
     fa6:	fe e4       	ldi	r31, 0x4E	; 78
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <__do_copy_data+0x10>
     faa:	05 90       	lpm	r0, Z+
     fac:	0d 92       	st	X+, r0
     fae:	ac 35       	cpi	r26, 0x5C	; 92
     fb0:	b1 07       	cpc	r27, r17
     fb2:	d9 f7       	brne	.-10     	; 0xfaa <__do_copy_data+0xc>

00000fb4 <__do_clear_bss>:
     fb4:	28 e0       	ldi	r18, 0x08	; 8
     fb6:	ac e5       	ldi	r26, 0x5C	; 92
     fb8:	b2 e0       	ldi	r27, 0x02	; 2
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <.do_clear_bss_start>

00000fbc <.do_clear_bss_loop>:
     fbc:	1d 92       	st	X+, r1

00000fbe <.do_clear_bss_start>:
     fbe:	a0 38       	cpi	r26, 0x80	; 128
     fc0:	b2 07       	cpc	r27, r18
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <.do_clear_bss_loop>
     fc4:	0e 94 49 14 	call	0x2892	; 0x2892 <main>
     fc8:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <_exit>

00000fcc <__bad_interrupt>:
     fcc:	19 c8       	rjmp	.-4046   	; 0x0 <__vectors>

00000fce <conv_wl>:
    asm volatile("nop");
    asm volatile("nop");
    asm volatile("nop");
}
void adc_temp_init()
{
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	60 97       	sbiw	r28, 0x10	; 16
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	ee e5       	ldi	r30, 0x5E	; 94
     ffc:	fa e0       	ldi	r31, 0x0A	; 10
     ffe:	85 90       	lpm	r8, Z+
    1000:	95 90       	lpm	r9, Z+
    1002:	a5 90       	lpm	r10, Z+
    1004:	b4 90       	lpm	r11, Z
    1006:	e2 e6       	ldi	r30, 0x62	; 98
    1008:	fa e0       	ldi	r31, 0x0A	; 10
    100a:	45 90       	lpm	r4, Z+
    100c:	55 90       	lpm	r5, Z+
    100e:	65 90       	lpm	r6, Z+
    1010:	74 90       	lpm	r7, Z
    1012:	e6 e6       	ldi	r30, 0x66	; 102
    1014:	fa e0       	ldi	r31, 0x0A	; 10
    1016:	25 91       	lpm	r18, Z+
    1018:	35 91       	lpm	r19, Z+
    101a:	45 91       	lpm	r20, Z+
    101c:	54 91       	lpm	r21, Z
    101e:	29 83       	std	Y+1, r18	; 0x01
    1020:	3a 83       	std	Y+2, r19	; 0x02
    1022:	4b 83       	std	Y+3, r20	; 0x03
    1024:	5c 83       	std	Y+4, r21	; 0x04
    1026:	ea e6       	ldi	r30, 0x6A	; 106
    1028:	fa e0       	ldi	r31, 0x0A	; 10
    102a:	25 91       	lpm	r18, Z+
    102c:	35 91       	lpm	r19, Z+
    102e:	45 91       	lpm	r20, Z+
    1030:	54 91       	lpm	r21, Z
    1032:	2d 83       	std	Y+5, r18	; 0x05
    1034:	3e 83       	std	Y+6, r19	; 0x06
    1036:	4f 83       	std	Y+7, r20	; 0x07
    1038:	58 87       	std	Y+8, r21	; 0x08
    103a:	ee e6       	ldi	r30, 0x6E	; 110
    103c:	fa e0       	ldi	r31, 0x0A	; 10
    103e:	25 91       	lpm	r18, Z+
    1040:	35 91       	lpm	r19, Z+
    1042:	45 91       	lpm	r20, Z+
    1044:	54 91       	lpm	r21, Z
    1046:	29 87       	std	Y+9, r18	; 0x09
    1048:	3a 87       	std	Y+10, r19	; 0x0a
    104a:	4b 87       	std	Y+11, r20	; 0x0b
    104c:	5c 87       	std	Y+12, r21	; 0x0c
    104e:	e2 e7       	ldi	r30, 0x72	; 114
    1050:	fa e0       	ldi	r31, 0x0A	; 10
    1052:	25 91       	lpm	r18, Z+
    1054:	35 91       	lpm	r19, Z+
    1056:	45 91       	lpm	r20, Z+
    1058:	54 91       	lpm	r21, Z
    105a:	2d 87       	std	Y+13, r18	; 0x0d
    105c:	3e 87       	std	Y+14, r19	; 0x0e
    105e:	4f 87       	std	Y+15, r20	; 0x0f
    1060:	58 8b       	std	Y+16, r21	; 0x10
    1062:	bc 01       	movw	r22, r24
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	07 2e       	mov	r0, r23
    106a:	00 0c       	add	r0, r0
    106c:	88 0b       	sbc	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	0e 94 2e 1c 	call	0x385c	; 0x385c <__floatsisf>
    1074:	6b 01       	movw	r12, r22
    1076:	7c 01       	movw	r14, r24
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	c3 01       	movw	r24, r6
    107e:	b2 01       	movw	r22, r4
    1080:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1084:	a5 01       	movw	r20, r10
    1086:	94 01       	movw	r18, r8
    1088:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    108c:	4b 01       	movw	r8, r22
    108e:	5c 01       	movw	r10, r24
    1090:	a7 01       	movw	r20, r14
    1092:	96 01       	movw	r18, r12
    1094:	69 81       	ldd	r22, Y+1	; 0x01
    1096:	7a 81       	ldd	r23, Y+2	; 0x02
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    10a0:	a7 01       	movw	r20, r14
    10a2:	96 01       	movw	r18, r12
    10a4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	c5 01       	movw	r24, r10
    10ae:	b4 01       	movw	r22, r8
    10b0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    10b4:	4b 01       	movw	r8, r22
    10b6:	5c 01       	movw	r10, r24
    10b8:	a7 01       	movw	r20, r14
    10ba:	96 01       	movw	r18, r12
    10bc:	6d 81       	ldd	r22, Y+5	; 0x05
    10be:	7e 81       	ldd	r23, Y+6	; 0x06
    10c0:	8f 81       	ldd	r24, Y+7	; 0x07
    10c2:	98 85       	ldd	r25, Y+8	; 0x08
    10c4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    10c8:	a7 01       	movw	r20, r14
    10ca:	96 01       	movw	r18, r12
    10cc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    10d0:	a7 01       	movw	r20, r14
    10d2:	96 01       	movw	r18, r12
    10d4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	c5 01       	movw	r24, r10
    10de:	b4 01       	movw	r22, r8
    10e0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    10e4:	4b 01       	movw	r8, r22
    10e6:	5c 01       	movw	r10, r24
    10e8:	a7 01       	movw	r20, r14
    10ea:	96 01       	movw	r18, r12
    10ec:	69 85       	ldd	r22, Y+9	; 0x09
    10ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    10f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    10f8:	a7 01       	movw	r20, r14
    10fa:	96 01       	movw	r18, r12
    10fc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1100:	a7 01       	movw	r20, r14
    1102:	96 01       	movw	r18, r12
    1104:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1108:	a7 01       	movw	r20, r14
    110a:	96 01       	movw	r18, r12
    110c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1110:	9b 01       	movw	r18, r22
    1112:	ac 01       	movw	r20, r24
    1114:	c5 01       	movw	r24, r10
    1116:	b4 01       	movw	r22, r8
    1118:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    111c:	4b 01       	movw	r8, r22
    111e:	5c 01       	movw	r10, r24
    1120:	a7 01       	movw	r20, r14
    1122:	96 01       	movw	r18, r12
    1124:	6d 85       	ldd	r22, Y+13	; 0x0d
    1126:	7e 85       	ldd	r23, Y+14	; 0x0e
    1128:	8f 85       	ldd	r24, Y+15	; 0x0f
    112a:	98 89       	ldd	r25, Y+16	; 0x10
    112c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1130:	a7 01       	movw	r20, r14
    1132:	96 01       	movw	r18, r12
    1134:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1138:	a7 01       	movw	r20, r14
    113a:	96 01       	movw	r18, r12
    113c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1140:	a7 01       	movw	r20, r14
    1142:	96 01       	movw	r18, r12
    1144:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1148:	a7 01       	movw	r20, r14
    114a:	96 01       	movw	r18, r12
    114c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1150:	9b 01       	movw	r18, r22
    1152:	ac 01       	movw	r20, r24
    1154:	c5 01       	movw	r24, r10
    1156:	b4 01       	movw	r22, r8
    1158:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    115c:	60 96       	adiw	r28, 0x10	; 16
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	7f 90       	pop	r7
    117e:	6f 90       	pop	r6
    1180:	5f 90       	pop	r5
    1182:	4f 90       	pop	r4
    1184:	08 95       	ret

00001186 <EVENT_USB_Device_Connect>:
    1186:	08 95       	ret

00001188 <EVENT_USB_Device_Disconnect>:
    1188:	08 95       	ret

0000118a <EVENT_USB_Device_ConfigurationChanged>:
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <CDC_Device_ConfigureEndpoints>

00001192 <EVENT_USB_Device_ControlRequest>:
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <CDC_Device_ProcessControlRequest>

0000119a <EVENT_CDC_Device_ControLineStateChanged>:
    119a:	08 95       	ret

0000119c <delay>:
    119c:	00 00       	nop
    119e:	00 00       	nop
    11a0:	00 00       	nop
    11a2:	00 00       	nop
    11a4:	00 00       	nop
    11a6:	08 95       	ret

000011a8 <adc_temp_read>:
}

float adc_temp_read()
{
    11a8:	8f 92       	push	r8
    11aa:	9f 92       	push	r9
    11ac:	af 92       	push	r10
    11ae:	bf 92       	push	r11
    11b0:	cf 92       	push	r12
    11b2:	df 92       	push	r13
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    int channel = 7;
    ADMUX = 0b01000000;
    11b8:	80 e4       	ldi	r24, 0x40	; 64
    11ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADMUX |= (channel & 0x1F);
    11be:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    11c2:	87 60       	ori	r24, 0x07	; 7
    11c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    ADCSRB = 0b00000000;
    11c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    ADCSRB |= (((channel >> 5) & 1) << MUX5);
    11cc:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    11d0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    ADCSRA = (1 << ADEN) | (1 << ADSC) | 7;
    11d4:	87 ec       	ldi	r24, 0xC7	; 199
    11d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

    while ((ADCSRA & (1 << ADSC)))
    11da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    11de:	86 fd       	sbrc	r24, 6
    11e0:	fc cf       	rjmp	.-8      	; 0x11da <adc_temp_read+0x32>
        ;

    float v = (ADCL | (ADCH << 8)) & 0x3FF;
    11e2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    11e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    const float tr25 = 25;
    const float K = 273.15;
    const float B = 3435;
    float vcc = 5.0;
    float vcoff = 5.0 / 1.023;
    v = v / 1023 * 5.0;
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	78 2b       	or	r23, r24
    11ee:	73 70       	andi	r23, 0x03	; 3
    11f0:	07 2e       	mov	r0, r23
    11f2:	00 0c       	add	r0, r0
    11f4:	88 0b       	sbc	r24, r24
    11f6:	99 0b       	sbc	r25, r25
    11f8:	0e 94 2e 1c 	call	0x385c	; 0x385c <__floatsisf>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 ec       	ldi	r19, 0xC0	; 192
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 ea       	ldi	r20, 0xA0	; 160
    120e:	50 e4       	ldi	r21, 0x40	; 64
    1210:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1214:	4b 01       	movw	r8, r22
    1216:	5c 01       	movw	r10, r24

    float resi1 = (vcc - v) == 0 ? 0 : (v * resis) / (vcc - v);
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 ea       	ldi	r24, 0xA0	; 160
    1222:	90 e4       	ldi	r25, 0x40	; 64
    1224:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1228:	6b 01       	movw	r12, r22
    122a:	7c 01       	movw	r14, r24
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	0e 94 8f 1b 	call	0x371e	; 0x371e <__cmpsf2>
    1236:	88 23       	and	r24, r24
    1238:	69 f0       	breq	.+26     	; 0x1254 <adc_temp_read+0xac>
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e4       	ldi	r19, 0x40	; 64
    123e:	4c e1       	ldi	r20, 0x1C	; 28
    1240:	56 e4       	ldi	r21, 0x46	; 70
    1242:	c5 01       	movw	r24, r10
    1244:	b4 01       	movw	r22, r8
    1246:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    124a:	a7 01       	movw	r20, r14
    124c:	96 01       	movw	r18, r12
    124e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1252:	03 c0       	rjmp	.+6      	; 0x125a <adc_temp_read+0xb2>
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	cb 01       	movw	r24, r22
    float t = 1 / (logf(resi1 / resi0) / B + (1 / (tr25 + K))) - K;
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e4       	ldi	r19, 0x40	; 64
    125e:	4c e1       	ldi	r20, 0x1C	; 28
    1260:	56 e4       	ldi	r21, 0x46	; 70
    1262:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1266:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <log>

    return t;
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 eb       	ldi	r19, 0xB0	; 176
    126e:	46 e5       	ldi	r20, 0x56	; 86
    1270:	55 e4       	ldi	r21, 0x45	; 69
    1272:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1276:	2f e0       	ldi	r18, 0x0F	; 15
    1278:	3f ec       	ldi	r19, 0xCF	; 207
    127a:	4b e5       	ldi	r20, 0x5B	; 91
    127c:	5b e3       	ldi	r21, 0x3B	; 59
    127e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	9f e3       	ldi	r25, 0x3F	; 63
    128e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1292:	23 e3       	ldi	r18, 0x33	; 51
    1294:	33 e9       	ldi	r19, 0x93	; 147
    1296:	48 e8       	ldi	r20, 0x88	; 136
    1298:	53 e4       	ldi	r21, 0x43	; 67
    129a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
}
    129e:	ff 90       	pop	r15
    12a0:	ef 90       	pop	r14
    12a2:	df 90       	pop	r13
    12a4:	cf 90       	pop	r12
    12a6:	bf 90       	pop	r11
    12a8:	af 90       	pop	r10
    12aa:	9f 90       	pop	r9
    12ac:	8f 90       	pop	r8
    12ae:	08 95       	ret

000012b0 <mcp3201_init>:

void mcp3201_init()
{
    spi_init();
    12b0:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <spi_init>
    DDRB |= (1 << PORTB0);
    12b4:	20 9a       	sbi	0x04, 0	; 4
    PORTB |= (1 << PORTB0);
    12b6:	28 9a       	sbi	0x05, 0	; 5
    12b8:	08 95       	ret

000012ba <mcp3201_read>:
}
unsigned int mcp3201_read()
{
    12ba:	cf 93       	push	r28
    PORTB &= ~(1 << PORTB0);
    12bc:	28 98       	cbi	0x05, 0	; 5
    asm volatile("nop");
    12be:	00 00       	nop
    char high_byte = spi_transfer(0) & 0x1F;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 75 14 	call	0x28ea	; 0x28ea <spi_transfer>
    12c6:	c8 2f       	mov	r28, r24
    char low_byte = spi_transfer(0);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 75 14 	call	0x28ea	; 0x28ea <spi_transfer>
    PORTB |= (1 << PORTB0);
    12ce:	28 9a       	sbi	0x05, 0	; 5

    return (((high_byte << 7) & 0xF80) | ((low_byte >> 1) & 0x7F)) & 0xFFF;
    12d0:	cf 71       	andi	r28, 0x1F	; 31
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	c4 9f       	mul	r28, r20
    12d6:	90 01       	movw	r18, r0
    12d8:	11 24       	eor	r1, r1
    12da:	86 95       	lsr	r24
}
    12dc:	a9 01       	movw	r20, r18
    12de:	48 2b       	or	r20, r24
    12e0:	ca 01       	movw	r24, r20
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <c12880ma_init>:
    return y;
}

void c12880ma_init()
{
    DDRF |= (1 << C12880MA_CLK);
    12e6:	81 9a       	sbi	0x10, 1	; 16
    PORTF &= ~(1 << C12880MA_CLK);
    12e8:	89 98       	cbi	0x11, 1	; 17
    DDRF |= (1 << C12880MA_ST);
    12ea:	85 9a       	sbi	0x10, 5	; 16
    PORTF &= ~(1 << C12880MA_ST);
    12ec:	8d 98       	cbi	0x11, 5	; 17
    12ee:	e8 e6       	ldi	r30, 0x68	; 104
    12f0:	f4 e0       	ldi	r31, 0x04	; 4

    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        opticalPower[i] = 0;
    12f2:	11 92       	st	Z+, r1
    12f4:	11 92       	st	Z+, r1
    12f6:	11 92       	st	Z+, r1
    12f8:	11 92       	st	Z+, r1
    DDRF |= (1 << C12880MA_CLK);
    PORTF &= ~(1 << C12880MA_CLK);
    DDRF |= (1 << C12880MA_ST);
    PORTF &= ~(1 << C12880MA_ST);

    for (int i = 0; i < C12880MA_CHANELS; i++)
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	e0 35       	cpi	r30, 0x50	; 80
    12fe:	f8 07       	cpc	r31, r24
    1300:	c1 f7       	brne	.-16     	; 0x12f2 <c12880ma_init+0xc>
    {
        opticalPower[i] = 0;
    }
}
    1302:	08 95       	ret

00001304 <c12880ma_read>:

void c12880ma_read()
{
    1304:	cf 92       	push	r12
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	c8 e6       	ldi	r28, 0x68	; 104
    1316:	d4 e0       	ldi	r29, 0x04	; 4
    1318:	00 e5       	ldi	r16, 0x50	; 80
    131a:	18 e0       	ldi	r17, 0x08	; 8
    131c:	fe 01       	movw	r30, r28
    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        opticalPower[i] = 0;
    131e:	11 92       	st	Z+, r1
    1320:	11 92       	st	Z+, r1
    1322:	11 92       	st	Z+, r1
    1324:	11 92       	st	Z+, r1
    }
}

void c12880ma_read()
{
    for (int i = 0; i < C12880MA_CHANELS; i++)
    1326:	0e 17       	cp	r16, r30
    1328:	1f 07       	cpc	r17, r31
    132a:	c9 f7       	brne	.-14     	; 0x131e <c12880ma_read+0x1a>
    }

    digital_out_low(C12880MA_PORT, C12880MA_CLK);
    delay();
    digital_out_high(C12880MA_PORT, C12880MA_CLK);
    delay();
    132c:	89 98       	cbi	0x11, 1	; 17
    digital_out_low(C12880MA_PORT, C12880MA_CLK);
    digital_out_high(C12880MA_PORT, C12880MA_ST);
    132e:	36 df       	rcall	.-404    	; 0x119c <delay>
    delay();
    1330:	89 9a       	sbi	0x11, 1	; 17
    1332:	34 df       	rcall	.-408    	; 0x119c <delay>

    for (long i = 0; i < exposure_time; i++)
    1334:	89 98       	cbi	0x11, 1	; 17
    1336:	8d 9a       	sbi	0x11, 5	; 17
    1338:	31 df       	rcall	.-414    	; 0x119c <delay>
    133a:	c1 2c       	mov	r12, r1
    133c:	d1 2c       	mov	r13, r1
    133e:	76 01       	movw	r14, r12
    1340:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <exposure_time>
    1344:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <exposure_time+0x1>
    1348:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <exposure_time+0x2>
    134c:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <exposure_time+0x3>
    {
        digital_out_high(C12880MA_PORT, C12880MA_CLK);
        delay();
    1350:	c8 16       	cp	r12, r24
    1352:	d9 06       	cpc	r13, r25
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
    1354:	ea 06       	cpc	r14, r26
        delay();
    1356:	fb 06       	cpc	r15, r27
    1358:	54 f4       	brge	.+20     	; 0x136e <c12880ma_read+0x6a>
    delay();
    digital_out_low(C12880MA_PORT, C12880MA_CLK);
    digital_out_high(C12880MA_PORT, C12880MA_ST);
    delay();

    for (long i = 0; i < exposure_time; i++)
    135a:	89 9a       	sbi	0x11, 1	; 17
    135c:	1f df       	rcall	.-450    	; 0x119c <delay>
    135e:	89 98       	cbi	0x11, 1	; 17
    1360:	1d df       	rcall	.-454    	; 0x119c <delay>
    1362:	8f ef       	ldi	r24, 0xFF	; 255
        delay();
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
        delay();
    }

    digital_out_low(C12880MA_PORT, C12880MA_ST);
    1364:	c8 1a       	sub	r12, r24
    1366:	d8 0a       	sbc	r13, r24

    for (int i = 0; i < 88; i++)
    {
        digital_out_high(C12880MA_PORT, C12880MA_CLK);
    1368:	e8 0a       	sbc	r14, r24
        delay();
    136a:	f8 0a       	sbc	r15, r24
    136c:	e9 cf       	rjmp	.-46     	; 0x1340 <c12880ma_read+0x3c>
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
    136e:	8d 98       	cbi	0x11, 5	; 17
        delay();
    1370:	28 e5       	ldi	r18, 0x58	; 88
    1372:	e2 2e       	mov	r14, r18
    1374:	f1 2c       	mov	r15, r1
    1376:	89 9a       	sbi	0x11, 1	; 17
        delay();
    }

    digital_out_low(C12880MA_PORT, C12880MA_ST);

    for (int i = 0; i < 88; i++)
    1378:	11 df       	rcall	.-478    	; 0x119c <delay>
    137a:	89 98       	cbi	0x11, 1	; 17
    137c:	0f df       	rcall	.-482    	; 0x119c <delay>
    137e:	e1 e0       	ldi	r30, 0x01	; 1
    1380:	ee 1a       	sub	r14, r30
        delay();
    }

    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        opticalPower[i] = (float)mcp3201_read();
    1382:	f1 08       	sbc	r15, r1
    1384:	c1 f7       	brne	.-16     	; 0x1376 <c12880ma_read+0x72>
    1386:	98 e6       	ldi	r25, 0x68	; 104
    1388:	e9 2e       	mov	r14, r25
    138a:	94 e0       	ldi	r25, 0x04	; 4
    138c:	f9 2e       	mov	r15, r25
    138e:	95 df       	rcall	.-214    	; 0x12ba <mcp3201_read>
    1390:	bc 01       	movw	r22, r24
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__floatunsisf>
        digital_out_high(C12880MA_PORT, C12880MA_CLK);
        delay();
    139a:	f7 01       	movw	r30, r14
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
        delay();
    139c:	61 93       	st	Z+, r22
        delay();
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
        delay();
    }

    for (int i = 0; i < C12880MA_CHANELS; i++)
    139e:	71 93       	st	Z+, r23
    13a0:	81 93       	st	Z+, r24
    13a2:	91 93       	st	Z+, r25
    13a4:	7f 01       	movw	r14, r30
    13a6:	89 9a       	sbi	0x11, 1	; 17
    13a8:	f9 de       	rcall	.-526    	; 0x119c <delay>
    }

    for (int i = 0; i < 32; i++)
    {
        //mcp3201_read();
        digital_out_high(C12880MA_PORT, C12880MA_CLK);
    13aa:	89 98       	cbi	0x11, 1	; 17
        delay();
    13ac:	f7 de       	rcall	.-530    	; 0x119c <delay>
    13ae:	0e 15       	cp	r16, r14
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
    13b0:	1f 05       	cpc	r17, r15
        delay();
    13b2:	69 f7       	brne	.-38     	; 0x138e <c12880ma_read+0x8a>
    13b4:	80 e2       	ldi	r24, 0x20	; 32
    13b6:	e8 2e       	mov	r14, r24
    13b8:	f1 2c       	mov	r15, r1
    13ba:	89 9a       	sbi	0x11, 1	; 17
        delay();
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
        delay();
    }

    for (int i = 0; i < 32; i++)
    13bc:	ef de       	rcall	.-546    	; 0x119c <delay>
    }

    float sat = 3890;//4095 * 95 / 100;
    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        if(opticalPower[i] > sat)
    13be:	89 98       	cbi	0x11, 1	; 17
    13c0:	ed de       	rcall	.-550    	; 0x119c <delay>
    13c2:	f1 e0       	ldi	r31, 0x01	; 1
    13c4:	ef 1a       	sub	r14, r31
    13c6:	f1 08       	sbc	r15, r1
    13c8:	c1 f7       	brne	.-16     	; 0x13ba <c12880ma_read+0xb6>
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e2       	ldi	r19, 0x20	; 32
    13ce:	43 e7       	ldi	r20, 0x73	; 115
    13d0:	55 e4       	ldi	r21, 0x45	; 69
    13d2:	68 81       	ld	r22, Y
    13d4:	79 81       	ldd	r23, Y+1	; 0x01
        {
            opticalPower[i] = sat;
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	9b 81       	ldd	r25, Y+3	; 0x03
    13da:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__gesf2>
    13de:	18 16       	cp	r1, r24
    13e0:	44 f4       	brge	.+16     	; 0x13f2 <c12880ma_read+0xee>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e2       	ldi	r25, 0x20	; 32
    13e6:	a3 e7       	ldi	r26, 0x73	; 115
        digital_out_low(C12880MA_PORT, C12880MA_CLK);
        delay();
    }

    float sat = 3890;//4095 * 95 / 100;
    for (int i = 0; i < C12880MA_CHANELS; i++)
    13e8:	b5 e4       	ldi	r27, 0x45	; 69
    13ea:	88 83       	st	Y, r24
    13ec:	99 83       	std	Y+1, r25	; 0x01
        if(opticalPower[i] > sat)
        {
            opticalPower[i] = sat;
        }
    }
}
    13ee:	aa 83       	std	Y+2, r26	; 0x02
    13f0:	bb 83       	std	Y+3, r27	; 0x03
    13f2:	24 96       	adiw	r28, 0x04	; 4
    13f4:	0c 17       	cp	r16, r28
    13f6:	1d 07       	cpc	r17, r29
    13f8:	41 f7       	brne	.-48     	; 0x13ca <c12880ma_read+0xc6>
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	08 95       	ret

0000140c <check_status>:
//         opticalPower[i] = opticalPowerInteg[i] / integ; 
//     }
// }

int check_status()
{
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    if (temperature > 40.0f)
    1418:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <temperature>
    141c:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <temperature+0x1>
    1420:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <temperature+0x2>
    1424:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <temperature+0x3>
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	52 e4       	ldi	r21, 0x42	; 66
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__gesf2>
    1438:	18 16       	cp	r1, r24
    143a:	d4 f0       	brlt	.+52     	; 0x1470 <check_status+0x64>
    {
        return STATUS_ERROR;
    143c:	a7 01       	movw	r20, r14
    143e:	96 01       	movw	r18, r12
    1440:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <temperature_dark>
    1444:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <temperature_dark+0x1>
    1448:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <temperature_dark+0x2>
    144c:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <temperature_dark+0x3>
    1450:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1454:	9f 77       	andi	r25, 0x7F	; 127
    1456:	d1 e0       	ldi	r29, 0x01	; 1
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e4       	ldi	r21, 0x40	; 64
    1462:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__gesf2>
    1466:	87 fd       	sbrc	r24, 7
    1468:	d0 e0       	ldi	r29, 0x00	; 0
    146a:	8d 2f       	mov	r24, r29
    146c:	9c 2f       	mov	r25, r28
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <check_status+0x68>
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	90 e0       	ldi	r25, 0x00	; 0
    {
        return STATUS_WARN;
    }

    return STATUS_RUN;
}
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	08 95       	ret

00001482 <SetupHardware>:
{
    // MCUCR = 0x80;
    // MCUCR = 0x80;

    c12880ma_init();
    mcp3201_init();
    1482:	31 df       	rcall	.-414    	; 0x12e6 <c12880ma_init>
    1484:	15 df       	rcall	.-470    	; 0x12b0 <mcp3201_init>
    adc_temp_init();

    MCUSR &= ~(1 << WDRF);
    1486:	84 b7       	in	r24, 0x34	; 52
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	a8 95       	wdr
    1492:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1496:	88 61       	ori	r24, 0x18	; 24
    1498:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    149c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14a0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14b2:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
    clock_prescale_set(clock_div_1);

    USB_Init();
    14b4:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <USB_Init>

000014b8 <correct>:
}

void correct()
{
    14b8:	2f 92       	push	r2
    14ba:	3f 92       	push	r3
    14bc:	4f 92       	push	r4
    14be:	5f 92       	push	r5
    14c0:	6f 92       	push	r6
    14c2:	7f 92       	push	r7
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	00 d0       	rcall	.+0      	; 0x14de <correct+0x26>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <correct+0x28>
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    float sat = 1.0f;
    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        sat = MIN(sat, 3890.0f / pgm_read_float(&unitcoeff[exposure_time_sel]) / pgm_read_float(&spectralsensitivitycoeff[i]));
    14e4:	80 90 6e 02 	lds	r8, 0x026E	; 0x80026e <exposure_time_sel>
    14e8:	90 90 6f 02 	lds	r9, 0x026F	; 0x80026f <exposure_time_sel+0x1>
    14ec:	88 0c       	add	r8, r8
    14ee:	99 1c       	adc	r9, r9
    14f0:	88 0c       	add	r8, r8
    14f2:	99 1c       	adc	r9, r9
    14f4:	c4 01       	movw	r24, r8
    14f6:	8e 55       	subi	r24, 0x5E	; 94
    14f8:	91 4f       	sbci	r25, 0xF1	; 241
    14fa:	5c 01       	movw	r10, r24
    14fc:	ee ed       	ldi	r30, 0xDE	; 222
    14fe:	f5 e0       	ldi	r31, 0x05	; 5
    1500:	fc 83       	std	Y+4, r31	; 0x04
    1502:	eb 83       	std	Y+3, r30	; 0x03
    1504:	26 ec       	ldi	r18, 0xC6	; 198
    1506:	62 2e       	mov	r6, r18
    1508:	29 e0       	ldi	r18, 0x09	; 9
    150a:	72 2e       	mov	r7, r18
    150c:	8f 01       	movw	r16, r30
    USB_Init();
}

void correct()
{
    float sat = 1.0f;
    150e:	31 2c       	mov	r3, r1
    1510:	21 2c       	mov	r2, r1
    1512:	f0 e8       	ldi	r31, 0x80	; 128
    1514:	f9 83       	std	Y+1, r31	; 0x01
    1516:	8f e3       	ldi	r24, 0x3F	; 63
    1518:	8a 83       	std	Y+2, r24	; 0x02
    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        sat = MIN(sat, 3890.0f / pgm_read_float(&unitcoeff[exposure_time_sel]) / pgm_read_float(&spectralsensitivitycoeff[i]));
    151a:	f5 01       	movw	r30, r10
    151c:	25 91       	lpm	r18, Z+
    151e:	35 91       	lpm	r19, Z+
    1520:	45 91       	lpm	r20, Z+
    1522:	54 91       	lpm	r21, Z
    1524:	f8 01       	movw	r30, r16
    1526:	c5 90       	lpm	r12, Z+
    1528:	d5 90       	lpm	r13, Z+
    152a:	e5 90       	lpm	r14, Z+
    152c:	f4 90       	lpm	r15, Z
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e2       	ldi	r23, 0x20	; 32
    1532:	83 e7       	ldi	r24, 0x73	; 115
    1534:	95 e4       	ldi	r25, 0x45	; 69
    1536:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    153a:	a7 01       	movw	r20, r14
    153c:	96 01       	movw	r18, r12
    153e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1542:	23 2d       	mov	r18, r3
    1544:	32 2d       	mov	r19, r2
    1546:	49 81       	ldd	r20, Y+1	; 0x01
    1548:	5a 81       	ldd	r21, Y+2	; 0x02
    154a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__gesf2>
    154e:	18 16       	cp	r1, r24
    1550:	c4 f0       	brlt	.+48     	; 0x1582 <correct+0xca>
    1552:	f5 01       	movw	r30, r10
    1554:	25 91       	lpm	r18, Z+
    1556:	35 91       	lpm	r19, Z+
    1558:	45 91       	lpm	r20, Z+
    155a:	54 91       	lpm	r21, Z
    155c:	f8 01       	movw	r30, r16
    155e:	c5 90       	lpm	r12, Z+
    1560:	d5 90       	lpm	r13, Z+
    1562:	e5 90       	lpm	r14, Z+
    1564:	f4 90       	lpm	r15, Z
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e2       	ldi	r23, 0x20	; 32
    156a:	83 e7       	ldi	r24, 0x73	; 115
    156c:	95 e4       	ldi	r25, 0x45	; 69
    156e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1572:	a7 01       	movw	r20, r14
    1574:	96 01       	movw	r18, r12
    1576:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    157a:	36 2e       	mov	r3, r22
    157c:	27 2e       	mov	r2, r23
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	0c 5f       	subi	r16, 0xFC	; 252
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
}

void correct()
{
    float sat = 1.0f;
    for (int i = 0; i < C12880MA_CHANELS; i++)
    1586:	60 16       	cp	r6, r16
    1588:	71 06       	cpc	r7, r17
    158a:	09 f0       	breq	.+2      	; 0x158e <correct+0xd6>
    158c:	c6 cf       	rjmp	.-116    	; 0x151a <correct+0x62>
        sat = MIN(sat, 3890.0f / pgm_read_float(&unitcoeff[exposure_time_sel]) / pgm_read_float(&spectralsensitivitycoeff[i]));
    }

    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        float value = opticalPower[i] - darkopticalPower[i] * darkopticalPowerGain[exposure_time_sel];
    158e:	f4 01       	movw	r30, r8
    1590:	ed 5d       	subi	r30, 0xDD	; 221
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	40 80       	ld	r4, Z
    1596:	51 80       	ldd	r5, Z+1	; 0x01
    1598:	62 80       	ldd	r6, Z+2	; 0x02
    159a:	73 80       	ldd	r7, Z+3	; 0x03
    159c:	84 e7       	ldi	r24, 0x74	; 116
    159e:	88 2e       	mov	r8, r24
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	98 2e       	mov	r9, r24
    15a4:	08 e6       	ldi	r16, 0x68	; 104
    15a6:	14 e0       	ldi	r17, 0x04	; 4
    15a8:	f4 01       	movw	r30, r8
    15aa:	61 91       	ld	r22, Z+
    15ac:	71 91       	ld	r23, Z+
    15ae:	4f 01       	movw	r8, r30
        value = value / pgm_read_float(&unitcoeff[exposure_time_sel]) / pgm_read_float(&spectralsensitivitycoeff[i]);
    15b0:	f5 01       	movw	r30, r10
    15b2:	c5 90       	lpm	r12, Z+
    15b4:	d5 90       	lpm	r13, Z+
    15b6:	e5 90       	lpm	r14, Z+
    15b8:	f4 90       	lpm	r15, Z
    15ba:	07 2e       	mov	r0, r23
    15bc:	00 0c       	add	r0, r0
    15be:	88 0b       	sbc	r24, r24
    15c0:	99 0b       	sbc	r25, r25
    15c2:	0e 94 2e 1c 	call	0x385c	; 0x385c <__floatsisf>
    15c6:	a3 01       	movw	r20, r6
    15c8:	92 01       	movw	r18, r4
    15ca:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    15ce:	9b 01       	movw	r18, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	f8 01       	movw	r30, r16
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    15e0:	a7 01       	movw	r20, r14
    15e2:	96 01       	movw	r18, r12
    15e4:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	25 91       	lpm	r18, Z+
    15ee:	35 91       	lpm	r19, Z+
    15f0:	45 91       	lpm	r20, Z+
    15f2:	54 91       	lpm	r21, Z
    15f4:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    15f8:	6b 01       	movw	r12, r22
    15fa:	7c 01       	movw	r14, r24
        if (value < 1e-9f)
    15fc:	2f e5       	ldi	r18, 0x5F	; 95
    15fe:	30 e7       	ldi	r19, 0x70	; 112
    1600:	49 e8       	ldi	r20, 0x89	; 137
    1602:	50 e3       	ldi	r21, 0x30	; 48
    1604:	0e 94 8f 1b 	call	0x371e	; 0x371e <__cmpsf2>
    1608:	87 ff       	sbrs	r24, 7
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <correct+0x15a>
        {
            value = 0.0f;
    160c:	c1 2c       	mov	r12, r1
    160e:	d1 2c       	mov	r13, r1
    1610:	76 01       	movw	r14, r12
        }
        if(value > sat)
    1612:	23 2d       	mov	r18, r3
    1614:	32 2d       	mov	r19, r2
    1616:	49 81       	ldd	r20, Y+1	; 0x01
    1618:	5a 81       	ldd	r21, Y+2	; 0x02
    161a:	c7 01       	movw	r24, r14
    161c:	b6 01       	movw	r22, r12
    161e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__gesf2>
    1622:	18 16       	cp	r1, r24
    1624:	24 f4       	brge	.+8      	; 0x162e <correct+0x176>
    1626:	c3 2c       	mov	r12, r3
    1628:	d2 2c       	mov	r13, r2
    162a:	e9 80       	ldd	r14, Y+1	; 0x01
    162c:	fa 80       	ldd	r15, Y+2	; 0x02
        {
            value = sat;
        }
        opticalPower[i] = value;
    162e:	f8 01       	movw	r30, r16
    1630:	c1 92       	st	Z+, r12
    1632:	d1 92       	st	Z+, r13
    1634:	e1 92       	st	Z+, r14
    1636:	f1 92       	st	Z+, r15
    1638:	8f 01       	movw	r16, r30
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	04 96       	adiw	r24, 0x04	; 4
    1640:	9c 83       	std	Y+4, r25	; 0x04
    1642:	8b 83       	std	Y+3, r24	; 0x03
    for (int i = 0; i < C12880MA_CHANELS; i++)
    {
        sat = MIN(sat, 3890.0f / pgm_read_float(&unitcoeff[exposure_time_sel]) / pgm_read_float(&spectralsensitivitycoeff[i]));
    }

    for (int i = 0; i < C12880MA_CHANELS; i++)
    1644:	98 e6       	ldi	r25, 0x68	; 104
    1646:	89 16       	cp	r8, r25
    1648:	94 e0       	ldi	r25, 0x04	; 4
    164a:	99 06       	cpc	r9, r25
    164c:	09 f0       	breq	.+2      	; 0x1650 <correct+0x198>
    164e:	ac cf       	rjmp	.-168    	; 0x15a8 <correct+0xf0>
        {
            value = sat;
        }
        opticalPower[i] = value;
    }
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	bf 90       	pop	r11
    166a:	af 90       	pop	r10
    166c:	9f 90       	pop	r9
    166e:	8f 90       	pop	r8
    1670:	7f 90       	pop	r7
    1672:	6f 90       	pop	r6
    1674:	5f 90       	pop	r5
    1676:	4f 90       	pop	r4
    1678:	3f 90       	pop	r3
    167a:	2f 90       	pop	r2
    167c:	08 95       	ret

0000167e <select_exposure_time>:

long select_exposure_time(int sel)
{
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	89 30       	cpi	r24, 0x09	; 9
    1682:	91 05       	cpc	r25, r1
    1684:	98 f4       	brcc	.+38     	; 0x16ac <select_exposure_time+0x2e>
    1686:	fc 01       	movw	r30, r24
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	8e 0f       	add	r24, r30
    168e:	9f 1f       	adc	r25, r31
    1690:	fc 01       	movw	r30, r24
    1692:	e5 5b       	subi	r30, 0xB5	; 181
    1694:	fe 4f       	sbci	r31, 0xFE	; 254
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	a2 81       	ldd	r26, Z+2	; 0x02
    169c:	9c 01       	movw	r18, r24
    169e:	4a 2f       	mov	r20, r26
    16a0:	04 2e       	mov	r0, r20
    16a2:	00 0c       	add	r0, r0
    16a4:	55 0b       	sbc	r21, r21
    16a6:	ca 01       	movw	r24, r20
    16a8:	b9 01       	movw	r22, r18
    16aa:	08 95       	ret
    switch (sel)
    16ac:	64 e3       	ldi	r22, 0x34	; 52
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    case EXPOSURE_TIME_SEL_100ms:
        return EXPOSURE_TIME_100ms;
    default:
        return EXPOSURE_TIME_100us;
    }
}
    16b4:	08 95       	ret

000016b6 <measure>:
void measure()
{
    16b6:	6f 92       	push	r6
    16b8:	7f 92       	push	r7
    16ba:	8f 92       	push	r8
    16bc:	9f 92       	push	r9
    16be:	af 92       	push	r10
    16c0:	bf 92       	push	r11
    16c2:	cf 92       	push	r12
    16c4:	df 92       	push	r13
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    if (auto_exposure)
    16d2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <auto_exposure>
    16d6:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <auto_exposure+0x1>
    16da:	89 2b       	or	r24, r25
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <measure+0x2a>
    16de:	3d c0       	rjmp	.+122    	; 0x175a <measure+0xa4>
    16e0:	c0 e0       	ldi	r28, 0x00	; 0
    16e2:	d0 e0       	ldi	r29, 0x00	; 0
    16e4:	00 e5       	ldi	r16, 0x50	; 80
    16e6:	18 e0       	ldi	r17, 0x08	; 8
    {
        for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
        {
            exposure_time = select_exposure_time(i);
    16e8:	ce 01       	movw	r24, r28
    16ea:	c9 df       	rcall	.-110    	; 0x167e <select_exposure_time>
    16ec:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <exposure_time>
    16f0:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <exposure_time+0x1>
    16f4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <exposure_time+0x2>
    16f8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <exposure_time+0x3>
            exposure_time_sel = i;
    16fc:	d0 93 6f 02 	sts	0x026F, r29	; 0x80026f <exposure_time_sel+0x1>
    1700:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <exposure_time_sel>
            c12880ma_read();
    1704:	ff dd       	rcall	.-1026   	; 0x1304 <c12880ma_read>
    1706:	88 e6       	ldi	r24, 0x68	; 104
    1708:	88 2e       	mov	r8, r24
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	98 2e       	mov	r9, r24
            //c12880ma_read_integ();
            float max = 0;
    170e:	61 2c       	mov	r6, r1
    1710:	71 2c       	mov	r7, r1
    1712:	a1 2c       	mov	r10, r1
    1714:	b1 2c       	mov	r11, r1
            float th = 1400.0f;
            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
                max = MAX(max, opticalPower[i]);
    1716:	f4 01       	movw	r30, r8
    1718:	c1 90       	ld	r12, Z+
    171a:	d1 90       	ld	r13, Z+
    171c:	e1 90       	ld	r14, Z+
    171e:	f1 90       	ld	r15, Z+
    1720:	4f 01       	movw	r8, r30
    1722:	93 01       	movw	r18, r6
    1724:	a5 01       	movw	r20, r10
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 8f 1b 	call	0x371e	; 0x371e <__cmpsf2>
    172e:	87 fd       	sbrc	r24, 7
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <measure+0x80>
    1732:	36 01       	movw	r6, r12
    1734:	57 01       	movw	r10, r14
            exposure_time_sel = i;
            c12880ma_read();
            //c12880ma_read_integ();
            float max = 0;
            float th = 1400.0f;
            for (int i = 0; i < C12880MA_CHANELS; i++)
    1736:	08 15       	cp	r16, r8
    1738:	19 05       	cpc	r17, r9
    173a:	69 f7       	brne	.-38     	; 0x1716 <measure+0x60>
            {
                max = MAX(max, opticalPower[i]);
            }
            if (max >= th)
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4f ea       	ldi	r20, 0xAF	; 175
    1742:	54 e4       	ldi	r21, 0x44	; 68
    1744:	b3 01       	movw	r22, r6
    1746:	c5 01       	movw	r24, r10
    1748:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__gesf2>
    174c:	87 ff       	sbrs	r24, 7
    174e:	21 c0       	rjmp	.+66     	; 0x1792 <measure+0xdc>
}
void measure()
{
    if (auto_exposure)
    {
        for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1750:	21 96       	adiw	r28, 0x01	; 1
    1752:	ca 30       	cpi	r28, 0x0A	; 10
    1754:	d1 05       	cpc	r29, r1
    1756:	41 f6       	brne	.-112    	; 0x16e8 <measure+0x32>
    1758:	1c c0       	rjmp	.+56     	; 0x1792 <measure+0xdc>
                break;
        }
    }
    else
    {
        exposure_time = select_exposure_time(exposure_time_sel);
    175a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <exposure_time_sel>
    175e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <exposure_time_sel+0x1>
    1762:	8d df       	rcall	.-230    	; 0x167e <select_exposure_time>
    1764:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <exposure_time>
    1768:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <exposure_time+0x1>
    176c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <exposure_time+0x2>
    1770:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <exposure_time+0x3>
        c12880ma_read();
        //c12880ma_read_integ();
    }
}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	bf 90       	pop	r11
    1786:	af 90       	pop	r10
    1788:	9f 90       	pop	r9
    178a:	8f 90       	pop	r8
    178c:	7f 90       	pop	r7
        }
    }
    else
    {
        exposure_time = select_exposure_time(exposure_time_sel);
        c12880ma_read();
    178e:	6f 90       	pop	r6
    1790:	b9 cd       	rjmp	.-1166   	; 0x1304 <c12880ma_read>
        //c12880ma_read_integ();
    }
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	cf 90       	pop	r12
    17a2:	bf 90       	pop	r11
    17a4:	af 90       	pop	r10
    17a6:	9f 90       	pop	r9
    17a8:	8f 90       	pop	r8
    17aa:	7f 90       	pop	r7
    17ac:	6f 90       	pop	r6
    17ae:	08 95       	ret

000017b0 <dark>:

void dark()
{
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	83 e2       	ldi	r24, 0x23	; 35
    17d6:	c8 2e       	mov	r12, r24
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	d8 2e       	mov	r13, r24
    17dc:	16 01       	movw	r2, r12
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    17de:	e1 2c       	mov	r14, r1
    17e0:	f1 2c       	mov	r15, r1
    {

        exposure_time = select_exposure_time(i);
    17e2:	c7 01       	movw	r24, r14
    17e4:	4c df       	rcall	.-360    	; 0x167e <select_exposure_time>
    17e6:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <exposure_time>
    17ea:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <exposure_time+0x1>
    17ee:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <exposure_time+0x2>
    17f2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <exposure_time+0x3>
        c12880ma_read();
    17f6:	86 dd       	rcall	.-1268   	; 0x1304 <c12880ma_read>
    17f8:	c0 e6       	ldi	r28, 0x60	; 96
    17fa:	d4 e0       	ldi	r29, 0x04	; 4
        //c12880ma_read_integ();
        
        for(int j=0;j<C12880MA_CHANELS;j++)
    17fc:	00 e0       	ldi	r16, 0x00	; 0
    17fe:	10 e0       	ldi	r17, 0x00	; 0
        {
            if(j == 0)
    1800:	01 15       	cp	r16, r1
    1802:	11 05       	cpc	r17, r1
    1804:	09 f0       	breq	.+2      	; 0x1808 <dark+0x58>
    1806:	6b c0       	rjmp	.+214    	; 0x18de <dark+0x12e>
            {
                opticalPower[j] = (-3.0f * opticalPower[j] + 12.0f * opticalPower[j] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
    1808:	80 90 68 04 	lds	r8, 0x0468	; 0x800468 <opticalPower>
    180c:	90 90 69 04 	lds	r9, 0x0469	; 0x800469 <opticalPower+0x1>
    1810:	a0 90 6a 04 	lds	r10, 0x046A	; 0x80046a <opticalPower+0x2>
    1814:	b0 90 6b 04 	lds	r11, 0x046B	; 0x80046b <opticalPower+0x3>
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e4       	ldi	r20, 0x40	; 64
    181e:	50 ec       	ldi	r21, 0xC0	; 192
    1820:	c5 01       	movw	r24, r10
    1822:	b4 01       	movw	r22, r8
    1824:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1828:	2b 01       	movw	r4, r22
    182a:	3c 01       	movw	r6, r24
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e4       	ldi	r20, 0x40	; 64
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	c5 01       	movw	r24, r10
    1836:	b4 01       	movw	r22, r8
    1838:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    183c:	9b 01       	movw	r18, r22
    183e:	ac 01       	movw	r20, r24
    1840:	c3 01       	movw	r24, r6
    1842:	b2 01       	movw	r22, r4
    1844:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1848:	2b 01       	movw	r4, r22
    184a:	3c 01       	movw	r6, r24
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	48 e8       	ldi	r20, 0x88	; 136
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	c5 01       	movw	r24, r10
    1856:	b4 01       	movw	r22, r8
    1858:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    185c:	9b 01       	movw	r18, r22
    185e:	ac 01       	movw	r20, r24
    1860:	c3 01       	movw	r24, r6
    1862:	b2 01       	movw	r22, r4
    1864:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1868:	4b 01       	movw	r8, r22
    186a:	5c 01       	movw	r10, r24
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e4       	ldi	r20, 0x40	; 64
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <opticalPower+0x4>
    1878:	70 91 6d 04 	lds	r23, 0x046D	; 0x80046d <opticalPower+0x5>
    187c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <opticalPower+0x6>
    1880:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <opticalPower+0x7>
    1884:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	c5 01       	movw	r24, r10
    188e:	b4 01       	movw	r22, r8
    1890:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1894:	4b 01       	movw	r8, r22
    1896:	5c 01       	movw	r10, r24
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e4       	ldi	r20, 0x40	; 64
    189e:	50 e4       	ldi	r21, 0x40	; 64
    18a0:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <opticalPower+0x8>
    18a4:	70 91 71 04 	lds	r23, 0x0471	; 0x800471 <opticalPower+0x9>
    18a8:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <opticalPower+0xa>
    18ac:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <opticalPower+0xb>
    18b0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	c5 01       	movw	r24, r10
    18ba:	b4 01       	movw	r22, r8
    18bc:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4c e0       	ldi	r20, 0x0C	; 12
    18c6:	52 e4       	ldi	r21, 0x42	; 66
    18c8:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    18cc:	60 93 68 04 	sts	0x0468, r22	; 0x800468 <opticalPower>
    18d0:	70 93 69 04 	sts	0x0469, r23	; 0x800469 <opticalPower+0x1>
    18d4:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <opticalPower+0x2>
    18d8:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <opticalPower+0x3>
    18dc:	b5 c1       	rjmp	.+874    	; 0x1c48 <dark+0x498>
            }
            else if(j == 1)
    18de:	01 30       	cpi	r16, 0x01	; 1
    18e0:	11 05       	cpc	r17, r1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <dark+0x136>
    18e4:	71 c0       	rjmp	.+226    	; 0x19c8 <dark+0x218>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-1] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
    18e6:	80 90 68 04 	lds	r8, 0x0468	; 0x800468 <opticalPower>
    18ea:	90 90 69 04 	lds	r9, 0x0469	; 0x800469 <opticalPower+0x1>
    18ee:	a0 90 6a 04 	lds	r10, 0x046A	; 0x80046a <opticalPower+0x2>
    18f2:	b0 90 6b 04 	lds	r11, 0x046B	; 0x80046b <opticalPower+0x3>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e4       	ldi	r20, 0x40	; 64
    18fc:	50 ec       	ldi	r21, 0xC0	; 192
    18fe:	c5 01       	movw	r24, r10
    1900:	b4 01       	movw	r22, r8
    1902:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1906:	2b 01       	movw	r4, r22
    1908:	3c 01       	movw	r6, r24
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e4       	ldi	r20, 0x40	; 64
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	c5 01       	movw	r24, r10
    1914:	b4 01       	movw	r22, r8
    1916:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    191a:	9b 01       	movw	r18, r22
    191c:	ac 01       	movw	r20, r24
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1926:	4b 01       	movw	r8, r22
    1928:	5c 01       	movw	r10, r24
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	48 e8       	ldi	r20, 0x88	; 136
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <opticalPower+0x4>
    1936:	70 91 6d 04 	lds	r23, 0x046D	; 0x80046d <opticalPower+0x5>
    193a:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <opticalPower+0x6>
    193e:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <opticalPower+0x7>
    1942:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1946:	9b 01       	movw	r18, r22
    1948:	ac 01       	movw	r20, r24
    194a:	c5 01       	movw	r24, r10
    194c:	b4 01       	movw	r22, r8
    194e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1952:	4b 01       	movw	r8, r22
    1954:	5c 01       	movw	r10, r24
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e4       	ldi	r20, 0x40	; 64
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <opticalPower+0x8>
    1962:	70 91 71 04 	lds	r23, 0x0471	; 0x800471 <opticalPower+0x9>
    1966:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <opticalPower+0xa>
    196a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <opticalPower+0xb>
    196e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	c5 01       	movw	r24, r10
    1978:	b4 01       	movw	r22, r8
    197a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    197e:	4b 01       	movw	r8, r22
    1980:	5c 01       	movw	r10, r24
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e4       	ldi	r20, 0x40	; 64
    1988:	50 e4       	ldi	r21, 0x40	; 64
    198a:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <opticalPower+0xc>
    198e:	70 91 75 04 	lds	r23, 0x0475	; 0x800475 <opticalPower+0xd>
    1992:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <opticalPower+0xe>
    1996:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <opticalPower+0xf>
    199a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    199e:	9b 01       	movw	r18, r22
    19a0:	ac 01       	movw	r20, r24
    19a2:	c5 01       	movw	r24, r10
    19a4:	b4 01       	movw	r22, r8
    19a6:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4c e0       	ldi	r20, 0x0C	; 12
    19b0:	52 e4       	ldi	r21, 0x42	; 66
    19b2:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    19b6:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <opticalPower+0x4>
    19ba:	70 93 6d 04 	sts	0x046D, r23	; 0x80046d <opticalPower+0x5>
    19be:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <opticalPower+0x6>
    19c2:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <opticalPower+0x7>
    19c6:	40 c1       	rjmp	.+640    	; 0x1c48 <dark+0x498>
            }
            else if(j == C12880MA_CHANELS - 2)
    19c8:	08 3f       	cpi	r16, 0xF8	; 248
    19ca:	11 05       	cpc	r17, r1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <dark+0x220>
    19ce:	71 c0       	rjmp	.+226    	; 0x1ab2 <dark+0x302>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+1]) / 35.0f;
    19d0:	80 90 4c 08 	lds	r8, 0x084C	; 0x80084c <opticalPower+0x3e4>
    19d4:	90 90 4d 08 	lds	r9, 0x084D	; 0x80084d <opticalPower+0x3e5>
    19d8:	a0 90 4e 08 	lds	r10, 0x084E	; 0x80084e <opticalPower+0x3e6>
    19dc:	b0 90 4f 08 	lds	r11, 0x084F	; 0x80084f <opticalPower+0x3e7>
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e4       	ldi	r20, 0x40	; 64
    19e6:	50 ec       	ldi	r21, 0xC0	; 192
    19e8:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <opticalPower+0x3d8>
    19ec:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <opticalPower+0x3d9>
    19f0:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <opticalPower+0x3da>
    19f4:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <opticalPower+0x3db>
    19f8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    19fc:	2b 01       	movw	r4, r22
    19fe:	3c 01       	movw	r6, r24
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e4       	ldi	r20, 0x40	; 64
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	60 91 44 08 	lds	r22, 0x0844	; 0x800844 <opticalPower+0x3dc>
    1a0c:	70 91 45 08 	lds	r23, 0x0845	; 0x800845 <opticalPower+0x3dd>
    1a10:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <opticalPower+0x3de>
    1a14:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <opticalPower+0x3df>
    1a18:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1a1c:	9b 01       	movw	r18, r22
    1a1e:	ac 01       	movw	r20, r24
    1a20:	c3 01       	movw	r24, r6
    1a22:	b2 01       	movw	r22, r4
    1a24:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1a28:	2b 01       	movw	r4, r22
    1a2a:	3c 01       	movw	r6, r24
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	48 e8       	ldi	r20, 0x88	; 136
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <opticalPower+0x3e0>
    1a38:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <opticalPower+0x3e1>
    1a3c:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <opticalPower+0x3e2>
    1a40:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <opticalPower+0x3e3>
    1a44:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1a48:	9b 01       	movw	r18, r22
    1a4a:	ac 01       	movw	r20, r24
    1a4c:	c3 01       	movw	r24, r6
    1a4e:	b2 01       	movw	r22, r4
    1a50:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1a54:	2b 01       	movw	r4, r22
    1a56:	3c 01       	movw	r6, r24
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e4       	ldi	r20, 0x40	; 64
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	c5 01       	movw	r24, r10
    1a62:	b4 01       	movw	r22, r8
    1a64:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	c3 01       	movw	r24, r6
    1a6e:	b2 01       	movw	r22, r4
    1a70:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1a74:	2b 01       	movw	r4, r22
    1a76:	3c 01       	movw	r6, r24
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e4       	ldi	r20, 0x40	; 64
    1a7e:	50 e4       	ldi	r21, 0x40	; 64
    1a80:	c5 01       	movw	r24, r10
    1a82:	b4 01       	movw	r22, r8
    1a84:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	c3 01       	movw	r24, r6
    1a8e:	b2 01       	movw	r22, r4
    1a90:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	4c e0       	ldi	r20, 0x0C	; 12
    1a9a:	52 e4       	ldi	r21, 0x42	; 66
    1a9c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1aa0:	60 93 48 08 	sts	0x0848, r22	; 0x800848 <opticalPower+0x3e0>
    1aa4:	70 93 49 08 	sts	0x0849, r23	; 0x800849 <opticalPower+0x3e1>
    1aa8:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <opticalPower+0x3e2>
    1aac:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <opticalPower+0x3e3>
    1ab0:	cb c0       	rjmp	.+406    	; 0x1c48 <dark+0x498>
            }
            else if(j == C12880MA_CHANELS - 1)
    1ab2:	09 3f       	cpi	r16, 0xF9	; 249
    1ab4:	11 05       	cpc	r17, r1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <dark+0x30a>
    1ab8:	6b c0       	rjmp	.+214    	; 0x1b90 <dark+0x3e0>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j] - 3.0f * opticalPower[j]) / 35.0f;
    1aba:	80 90 4c 08 	lds	r8, 0x084C	; 0x80084c <opticalPower+0x3e4>
    1abe:	90 90 4d 08 	lds	r9, 0x084D	; 0x80084d <opticalPower+0x3e5>
    1ac2:	a0 90 4e 08 	lds	r10, 0x084E	; 0x80084e <opticalPower+0x3e6>
    1ac6:	b0 90 4f 08 	lds	r11, 0x084F	; 0x80084f <opticalPower+0x3e7>
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e4       	ldi	r20, 0x40	; 64
    1ad0:	50 ec       	ldi	r21, 0xC0	; 192
    1ad2:	60 91 44 08 	lds	r22, 0x0844	; 0x800844 <opticalPower+0x3dc>
    1ad6:	70 91 45 08 	lds	r23, 0x0845	; 0x800845 <opticalPower+0x3dd>
    1ada:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <opticalPower+0x3de>
    1ade:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <opticalPower+0x3df>
    1ae2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1ae6:	2b 01       	movw	r4, r22
    1ae8:	3c 01       	movw	r6, r24
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e4       	ldi	r20, 0x40	; 64
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <opticalPower+0x3e0>
    1af6:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <opticalPower+0x3e1>
    1afa:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <opticalPower+0x3e2>
    1afe:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <opticalPower+0x3e3>
    1b02:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1b06:	9b 01       	movw	r18, r22
    1b08:	ac 01       	movw	r20, r24
    1b0a:	c3 01       	movw	r24, r6
    1b0c:	b2 01       	movw	r22, r4
    1b0e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1b12:	2b 01       	movw	r4, r22
    1b14:	3c 01       	movw	r6, r24
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	48 e8       	ldi	r20, 0x88	; 136
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	c5 01       	movw	r24, r10
    1b20:	b4 01       	movw	r22, r8
    1b22:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	c3 01       	movw	r24, r6
    1b2c:	b2 01       	movw	r22, r4
    1b2e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1b32:	2b 01       	movw	r4, r22
    1b34:	3c 01       	movw	r6, r24
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e4       	ldi	r20, 0x40	; 64
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	c5 01       	movw	r24, r10
    1b40:	b4 01       	movw	r22, r8
    1b42:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1b46:	9b 01       	movw	r18, r22
    1b48:	ac 01       	movw	r20, r24
    1b4a:	c3 01       	movw	r24, r6
    1b4c:	b2 01       	movw	r22, r4
    1b4e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1b52:	2b 01       	movw	r4, r22
    1b54:	3c 01       	movw	r6, r24
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e4       	ldi	r20, 0x40	; 64
    1b5c:	50 e4       	ldi	r21, 0x40	; 64
    1b5e:	c5 01       	movw	r24, r10
    1b60:	b4 01       	movw	r22, r8
    1b62:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1b66:	9b 01       	movw	r18, r22
    1b68:	ac 01       	movw	r20, r24
    1b6a:	c3 01       	movw	r24, r6
    1b6c:	b2 01       	movw	r22, r4
    1b6e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4c e0       	ldi	r20, 0x0C	; 12
    1b78:	52 e4       	ldi	r21, 0x42	; 66
    1b7a:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1b7e:	60 93 4c 08 	sts	0x084C, r22	; 0x80084c <opticalPower+0x3e4>
    1b82:	70 93 4d 08 	sts	0x084D, r23	; 0x80084d <opticalPower+0x3e5>
    1b86:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <opticalPower+0x3e6>
    1b8a:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <opticalPower+0x3e7>
    1b8e:	5c c0       	rjmp	.+184    	; 0x1c48 <dark+0x498>
            }
            else
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e4       	ldi	r20, 0x40	; 64
    1b96:	50 ec       	ldi	r21, 0xC0	; 192
    1b98:	68 81       	ld	r22, Y
    1b9a:	79 81       	ldd	r23, Y+1	; 0x01
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1ba4:	4b 01       	movw	r8, r22
    1ba6:	5c 01       	movw	r10, r24
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e4       	ldi	r20, 0x40	; 64
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	6c 81       	ldd	r22, Y+4	; 0x04
    1bb2:	7d 81       	ldd	r23, Y+5	; 0x05
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1bbc:	9b 01       	movw	r18, r22
    1bbe:	ac 01       	movw	r20, r24
    1bc0:	c5 01       	movw	r24, r10
    1bc2:	b4 01       	movw	r22, r8
    1bc4:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1bc8:	4b 01       	movw	r8, r22
    1bca:	5c 01       	movw	r10, r24
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	48 e8       	ldi	r20, 0x88	; 136
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	68 85       	ldd	r22, Y+8	; 0x08
    1bd6:	79 85       	ldd	r23, Y+9	; 0x09
    1bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bdc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1be0:	9b 01       	movw	r18, r22
    1be2:	ac 01       	movw	r20, r24
    1be4:	c5 01       	movw	r24, r10
    1be6:	b4 01       	movw	r22, r8
    1be8:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1bec:	4b 01       	movw	r8, r22
    1bee:	5c 01       	movw	r10, r24
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e4       	ldi	r20, 0x40	; 64
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bfa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c00:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	c5 01       	movw	r24, r10
    1c0a:	b4 01       	movw	r22, r8
    1c0c:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1c10:	4b 01       	movw	r8, r22
    1c12:	5c 01       	movw	r10, r24
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e4       	ldi	r20, 0x40	; 64
    1c1a:	50 e4       	ldi	r21, 0x40	; 64
    1c1c:	68 89       	ldd	r22, Y+16	; 0x10
    1c1e:	79 89       	ldd	r23, Y+17	; 0x11
    1c20:	8a 89       	ldd	r24, Y+18	; 0x12
    1c22:	9b 89       	ldd	r25, Y+19	; 0x13
    1c24:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1c28:	9b 01       	movw	r18, r22
    1c2a:	ac 01       	movw	r20, r24
    1c2c:	c5 01       	movw	r24, r10
    1c2e:	b4 01       	movw	r22, r8
    1c30:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4c e0       	ldi	r20, 0x0C	; 12
    1c3a:	52 e4       	ldi	r21, 0x42	; 66
    1c3c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1c40:	68 87       	std	Y+8, r22	; 0x08
    1c42:	79 87       	std	Y+9, r23	; 0x09
    1c44:	8a 87       	std	Y+10, r24	; 0x0a
    1c46:	9b 87       	std	Y+11, r25	; 0x0b

        exposure_time = select_exposure_time(i);
        c12880ma_read();
        //c12880ma_read_integ();
        
        for(int j=0;j<C12880MA_CHANELS;j++)
    1c48:	0f 5f       	subi	r16, 0xFF	; 255
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	24 96       	adiw	r28, 0x04	; 4
    1c4e:	0a 3f       	cpi	r16, 0xFA	; 250
    1c50:	11 05       	cpc	r17, r1
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <dark+0x4a6>
    1c54:	d5 cd       	rjmp	.-1110   	; 0x1800 <dark+0x50>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
            }
        }

        darkopticalPowerGain[i] = 0.0f;
    1c56:	f1 01       	movw	r30, r2
    1c58:	10 82       	st	Z, r1
    1c5a:	11 82       	std	Z+1, r1	; 0x01
    1c5c:	12 82       	std	Z+2, r1	; 0x02
    1c5e:	13 82       	std	Z+3, r1	; 0x03
    1c60:	c8 e6       	ldi	r28, 0x68	; 104
    1c62:	d4 e0       	ldi	r29, 0x04	; 4
    1c64:	04 e7       	ldi	r16, 0x74	; 116
    1c66:	12 e0       	ldi	r17, 0x02	; 2
    1c68:	81 2c       	mov	r8, r1
    1c6a:	91 2c       	mov	r9, r1
    1c6c:	54 01       	movw	r10, r8
        for (int j = 0; j < C12880MA_CHANELS; j++)
        {
            if (i == EXPOSURE_TIME_SEL_1ms)
    1c6e:	f3 e0       	ldi	r31, 0x03	; 3
    1c70:	ef 16       	cp	r14, r31
    1c72:	f1 04       	cpc	r15, r1
    1c74:	49 f4       	brne	.+18     	; 0x1c88 <dark+0x4d8>
            {
                darkopticalPower[j] = opticalPower[j];
    1c76:	68 81       	ld	r22, Y
    1c78:	79 81       	ldd	r23, Y+1	; 0x01
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fixsfsi>
    1c82:	f8 01       	movw	r30, r16
    1c84:	71 83       	std	Z+1, r23	; 0x01
    1c86:	60 83       	st	Z, r22
            }
            darkopticalPowerGain[i] += opticalPower[j];
    1c88:	29 91       	ld	r18, Y+
    1c8a:	39 91       	ld	r19, Y+
    1c8c:	49 91       	ld	r20, Y+
    1c8e:	59 91       	ld	r21, Y+
    1c90:	c5 01       	movw	r24, r10
    1c92:	b4 01       	movw	r22, r8
    1c94:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    1c98:	4b 01       	movw	r8, r22
    1c9a:	5c 01       	movw	r10, r24
    1c9c:	0e 5f       	subi	r16, 0xFE	; 254
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
            }
        }

        darkopticalPowerGain[i] = 0.0f;
        for (int j = 0; j < C12880MA_CHANELS; j++)
    1ca0:	80 e5       	ldi	r24, 0x50	; 80
    1ca2:	98 e0       	ldi	r25, 0x08	; 8
    1ca4:	8c 17       	cp	r24, r28
    1ca6:	9d 07       	cpc	r25, r29
    1ca8:	11 f7       	brne	.-60     	; 0x1c6e <dark+0x4be>
    1caa:	f1 01       	movw	r30, r2
    1cac:	81 92       	st	Z+, r8
    1cae:	91 92       	st	Z+, r9
    1cb0:	a1 92       	st	Z+, r10
    1cb2:	b1 92       	st	Z+, r11
    1cb4:	1f 01       	movw	r2, r30
    }
}

void dark()
{
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1cb6:	ff ef       	ldi	r31, 0xFF	; 255
    1cb8:	ef 1a       	sub	r14, r31
    1cba:	ff 0a       	sbc	r15, r31
    1cbc:	8a e0       	ldi	r24, 0x0A	; 10
    1cbe:	e8 16       	cp	r14, r24
    1cc0:	f1 04       	cpc	r15, r1
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <dark+0x516>
    1cc4:	8e cd       	rjmp	.-1252   	; 0x17e2 <dark+0x32>
            }
            darkopticalPowerGain[i] += opticalPower[j];
        }
        //darkopticalPowerGain[i] /= (float)C12880MA_CHANELS;
    }
    float x = darkopticalPowerGain[EXPOSURE_TIME_SEL_1ms];
    1cc6:	80 90 2f 01 	lds	r8, 0x012F	; 0x80012f <darkopticalPowerGain+0xc>
    1cca:	90 90 30 01 	lds	r9, 0x0130	; 0x800130 <darkopticalPowerGain+0xd>
    1cce:	a0 90 31 01 	lds	r10, 0x0131	; 0x800131 <darkopticalPowerGain+0xe>
    1cd2:	b0 90 32 01 	lds	r11, 0x0132	; 0x800132 <darkopticalPowerGain+0xf>
    1cd6:	cb e4       	ldi	r28, 0x4B	; 75
    1cd8:	d1 e0       	ldi	r29, 0x01	; 1
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    {
        darkopticalPowerGain[i] /= x;
    1cda:	a5 01       	movw	r20, r10
    1cdc:	94 01       	movw	r18, r8
    1cde:	f6 01       	movw	r30, r12
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    1cec:	f6 01       	movw	r30, r12
    1cee:	61 93       	st	Z+, r22
    1cf0:	71 93       	st	Z+, r23
    1cf2:	81 93       	st	Z+, r24
    1cf4:	91 93       	st	Z+, r25
    1cf6:	6f 01       	movw	r12, r30
            darkopticalPowerGain[i] += opticalPower[j];
        }
        //darkopticalPowerGain[i] /= (float)C12880MA_CHANELS;
    }
    float x = darkopticalPowerGain[EXPOSURE_TIME_SEL_1ms];
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1cf8:	ce 17       	cp	r28, r30
    1cfa:	df 07       	cpc	r29, r31
    {
        darkopticalPowerGain[i] /= x;
    }
    temperature_dark = adc_temp_read();
    1cfc:	71 f7       	brne	.-36     	; 0x1cda <dark+0x52a>
    1cfe:	54 da       	rcall	.-2904   	; 0x11a8 <adc_temp_read>
    1d00:	60 93 6a 02 	sts	0x026A, r22	; 0x80026a <temperature_dark>
    1d04:	70 93 6b 02 	sts	0x026B, r23	; 0x80026b <temperature_dark+0x1>
    1d08:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <temperature_dark+0x2>
    1d0c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <temperature_dark+0x3>
}
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	8f 90       	pop	r8
    1d28:	7f 90       	pop	r7
    1d2a:	6f 90       	pop	r6
    1d2c:	5f 90       	pop	r5
    1d2e:	4f 90       	pop	r4
    1d30:	3f 90       	pop	r3
    1d32:	2f 90       	pop	r2
    1d34:	08 95       	ret

00001d36 <CDC_Recive_Event>:

void CDC_Recive_Event()
{
    int d = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 27 1a 	call	0x344e	; 0x344e <CDC_Device_ReceiveByte>
    if (d > 0)
    1d3e:	18 16       	cp	r1, r24
    1d40:	19 06       	cpc	r1, r25
    1d42:	9c f4       	brge	.+38     	; 0x1d6a <CDC_Recive_Event+0x34>
    {
        cdc_recive_buffer[cdc_recive_index] = d;
    1d44:	20 91 50 08 	lds	r18, 0x0850	; 0x800850 <cdc_recive_index>
    1d48:	30 91 51 08 	lds	r19, 0x0851	; 0x800851 <cdc_recive_index+0x1>
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	ee 5a       	subi	r30, 0xAE	; 174
    1d50:	f7 4f       	sbci	r31, 0xF7	; 247
    1d52:	80 83       	st	Z, r24
        cdc_recive_index++;
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	30 93 51 08 	sts	0x0851, r19	; 0x800851 <cdc_recive_index+0x1>
    1d5c:	20 93 50 08 	sts	0x0850, r18	; 0x800850 <cdc_recive_index>
        if (d == '\n')
    1d60:	0a 97       	sbiw	r24, 0x0a	; 10
    1d62:	19 f4       	brne	.+6      	; 0x1d6a <CDC_Recive_Event+0x34>
        {
            cdc_recived = true;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <cdc_recived>
    1d6a:	08 95       	ret

00001d6c <CDC_Recive_Event_Process>:
        }
    }
}

void CDC_Recive_Event_Process()
{
    1d6c:	2f 92       	push	r2
    1d6e:	3f 92       	push	r3
    1d70:	4f 92       	push	r4
    1d72:	5f 92       	push	r5
    1d74:	6f 92       	push	r6
    1d76:	7f 92       	push	r7
    1d78:	8f 92       	push	r8
    1d7a:	9f 92       	push	r9
    1d7c:	af 92       	push	r10
    1d7e:	bf 92       	push	r11
    1d80:	cf 92       	push	r12
    1d82:	df 92       	push	r13
    1d84:	ef 92       	push	r14
    1d86:	ff 92       	push	r15
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	cc 58       	subi	r28, 0x8C	; 140
    1d96:	d1 09       	sbc	r29, r1
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    if (cdc_recived)
    1da2:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <cdc_recived>
    1da6:	88 23       	and	r24, r24
    1da8:	09 f4       	brne	.+2      	; 0x1dac <CDC_Recive_Event_Process+0x40>
    1daa:	59 c5       	rjmp	.+2738   	; 0x285e <CDC_Recive_Event_Process+0xaf2>
    {
        cdc_recived = false;
    1dac:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <cdc_recived>
        char *message = cdc_recive_buffer;

        if (strncmp(message, "MEAS\n", 5) == 0)
    1db0:	45 e0       	ldi	r20, 0x05	; 5
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	66 e6       	ldi	r22, 0x66	; 102
    1db6:	71 e0       	ldi	r23, 0x01	; 1
    1db8:	82 e5       	ldi	r24, 0x52	; 82
    1dba:	98 e0       	ldi	r25, 0x08	; 8
    1dbc:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
    1dc0:	89 2b       	or	r24, r25
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <CDC_Recive_Event_Process+0x5a>
        {
            measure();
            correct();
    1dc4:	5f c0       	rjmp	.+190    	; 0x1e84 <CDC_Recive_Event_Process+0x118>
    1dc6:	77 dc       	rcall	.-1810   	; 0x16b6 <measure>
    1dc8:	77 db       	rcall	.-2322   	; 0x14b8 <correct>
    1dca:	68 e6       	ldi	r22, 0x68	; 104
    1dcc:	e6 2e       	mov	r14, r22
    1dce:	64 e0       	ldi	r22, 0x04	; 4

            for (int i = 0; i < C12880MA_CHANELS; i++)
    1dd0:	f6 2e       	mov	r15, r22
    1dd2:	00 e0       	ldi	r16, 0x00	; 0
            {
#ifdef CP150
                if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[470]))
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
    1dd6:	78 e0       	ldi	r23, 0x08	; 8
    1dd8:	67 2e       	mov	r6, r23
    1dda:	72 e0       	ldi	r23, 0x02	; 2
    1ddc:	77 2e       	mov	r7, r23
    1dde:	e4 eb       	ldi	r30, 0xB4	; 180
    1de0:	8e 2e       	mov	r8, r30
    1de2:	e5 e0       	ldi	r30, 0x05	; 5
#ifdef CP160
                    if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[490]))
#endif
                    {
                        float wl = conv_wl(i);
                        char msg[32] = {0};
    1de4:	9e 2e       	mov	r9, r30
    1de6:	f0 e2       	ldi	r31, 0x20	; 32
    1de8:	5f 2e       	mov	r5, r31
    1dea:	ce 01       	movw	r24, r28
    1dec:	01 96       	adiw	r24, 0x01	; 1
                        sprintf(msg, "%f:%g\r", wl, opticalPower[i]);
    1dee:	6c 01       	movw	r12, r24
    1df0:	ac e6       	ldi	r26, 0x6C	; 108
    1df2:	aa 2e       	mov	r10, r26
    1df4:	a1 e0       	ldi	r26, 0x01	; 1
            correct();

            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
#ifdef CP150
                if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[470]))
    1df6:	ba 2e       	mov	r11, r26
    1df8:	f3 01       	movw	r30, r6
    1dfa:	85 91       	lpm	r24, Z+
    1dfc:	94 91       	lpm	r25, Z
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	08 17       	cp	r16, r24
    1e02:	19 07       	cpc	r17, r25
    1e04:	80 f1       	brcs	.+96     	; 0x1e66 <CDC_Recive_Event_Process+0xfa>
    1e06:	f4 01       	movw	r30, r8
    1e08:	85 91       	lpm	r24, Z+
    1e0a:	94 91       	lpm	r25, Z
    1e0c:	80 17       	cp	r24, r16
#endif
#ifdef CP160
                    if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[490]))
#endif
                    {
                        float wl = conv_wl(i);
    1e0e:	91 07       	cpc	r25, r17
    1e10:	50 f1       	brcs	.+84     	; 0x1e66 <CDC_Recive_Event_Process+0xfa>
    1e12:	c8 01       	movw	r24, r16
                        char msg[32] = {0};
    1e14:	dc d8       	rcall	.-3656   	; 0xfce <conv_wl>
    1e16:	d6 01       	movw	r26, r12
    1e18:	e5 2d       	mov	r30, r5
    1e1a:	1d 92       	st	X+, r1
    1e1c:	ea 95       	dec	r30
                        sprintf(msg, "%f:%g\r", wl, opticalPower[i]);
    1e1e:	e9 f7       	brne	.-6      	; 0x1e1a <CDC_Recive_Event_Process+0xae>
    1e20:	d7 01       	movw	r26, r14
    1e22:	13 96       	adiw	r26, 0x03	; 3
    1e24:	2c 91       	ld	r18, X
    1e26:	13 97       	sbiw	r26, 0x03	; 3
    1e28:	2f 93       	push	r18
    1e2a:	12 96       	adiw	r26, 0x02	; 2
    1e2c:	2c 91       	ld	r18, X
    1e2e:	12 97       	sbiw	r26, 0x02	; 2
    1e30:	2f 93       	push	r18
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	2c 91       	ld	r18, X
    1e36:	11 97       	sbiw	r26, 0x01	; 1
    1e38:	2f 93       	push	r18
    1e3a:	2c 91       	ld	r18, X
    1e3c:	2f 93       	push	r18
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	7f 93       	push	r23
    1e44:	6f 93       	push	r22
    1e46:	bf 92       	push	r11
    1e48:	af 92       	push	r10
    1e4a:	df 92       	push	r13
    1e4c:	cf 92       	push	r12
    1e4e:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
                        CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    1e52:	b6 01       	movw	r22, r12
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	0e 94 88 19 	call	0x3310	; 0x3310 <CDC_Device_SendString>
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
        if (strncmp(message, "MEAS\n", 5) == 0)
        {
            measure();
            correct();

            for (int i = 0; i < C12880MA_CHANELS; i++)
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	0f 5f       	subi	r16, 0xFF	; 255
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	f4 e0       	ldi	r31, 0x04	; 4
    1e6c:	ef 0e       	add	r14, r31
    1e6e:	f1 1c       	adc	r15, r1
    1e70:	0a 3f       	cpi	r16, 0xFA	; 250
    1e72:	11 05       	cpc	r17, r1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <CDC_Recive_Event_Process+0x10c>
                        char msg[32] = {0};
                        sprintf(msg, "%f:%g\r", wl, opticalPower[i]);
                        CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
                    }
            }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
    1e76:	c0 cf       	rjmp	.-128    	; 0x1df8 <CDC_Recive_Event_Process+0x8c>
    1e78:	6a e0       	ldi	r22, 0x0A	; 10
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	0e 94 a8 19 	call	0x3350	; 0x3350 <CDC_Device_SendByte>
        }
        else if (strncmp(message, "MEAS1nm\n", 9) == 0)
    1e82:	e2 c4       	rjmp	.+2500   	; 0x2848 <CDC_Recive_Event_Process+0xadc>
    1e84:	49 e0       	ldi	r20, 0x09	; 9
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	63 e7       	ldi	r22, 0x73	; 115
    1e8a:	71 e0       	ldi	r23, 0x01	; 1
    1e8c:	82 e5       	ldi	r24, 0x52	; 82
    1e8e:	98 e0       	ldi	r25, 0x08	; 8
    1e90:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {
            measure();
    1e94:	89 2b       	or	r24, r25
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <CDC_Recive_Event_Process+0x12e>
            correct();
    1e98:	c5 c2       	rjmp	.+1418   	; 0x2424 <CDC_Recive_Event_Process+0x6b8>
    1e9a:	0d dc       	rcall	.-2022   	; 0x16b6 <measure>
    1e9c:	0d db       	rcall	.-2534   	; 0x14b8 <correct>
    1e9e:	84 e9       	ldi	r24, 0x94	; 148
    1ea0:	9a e0       	ldi	r25, 0x0A	; 10
    1ea2:	e9 96       	adiw	r28, 0x39	; 57
    1ea4:	9f af       	std	Y+63, r25	; 0x3f
    1ea6:	8e af       	std	Y+62, r24	; 0x3e
    1ea8:	e9 97       	sbiw	r28, 0x39	; 57
    1eaa:	a8 e0       	ldi	r26, 0x08	; 8
    1eac:	b2 e0       	ldi	r27, 0x02	; 2
    1eae:	ed 96       	adiw	r28, 0x3d	; 61
    1eb0:	bf af       	std	Y+63, r27	; 0x3f
    1eb2:	ae af       	std	Y+62, r26	; 0x3e
#ifdef CP150
            for (int i = 0; i < 471; i++)
    1eb4:	ed 97       	sbiw	r28, 0x3d	; 61
    1eb6:	eb 96       	adiw	r28, 0x3b	; 59
    1eb8:	1f ae       	std	Y+63, r1	; 0x3f
    1eba:	1e ae       	std	Y+62, r1	; 0x3e
#endif
                {
                    
                    float op = lagrange(i);
                    int wl = pgm_read_word(&wl_1nm[i]);
                    char msg[32] = {0};
    1ebc:	eb 97       	sbiw	r28, 0x3b	; 59
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	31 96       	adiw	r30, 0x01	; 1
    1ec2:	a7 96       	adiw	r28, 0x27	; 39
    1ec4:	ff af       	std	Y+63, r31	; 0x3f
    1ec6:	ee af       	std	Y+62, r30	; 0x3e
    return y;
}

static float lagrange(int index)
{
    float x = pgm_read_word(&wl_1nm[index]);
    1ec8:	a7 97       	sbiw	r28, 0x27	; 39
    1eca:	e9 96       	adiw	r28, 0x39	; 57
    1ecc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ece:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ed0:	e9 97       	sbiw	r28, 0x39	; 57
    1ed2:	65 91       	lpm	r22, Z+
    int j = pgm_read_word(&wl_lut_1nm[index]);
    1ed4:	74 91       	lpm	r23, Z
    1ed6:	ed 96       	adiw	r28, 0x3d	; 61
    1ed8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eda:	ff ad       	ldd	r31, Y+63	; 0x3f
    1edc:	ed 97       	sbiw	r28, 0x3d	; 61
    1ede:	25 90       	lpm	r2, Z+

    if(index < 2)
    1ee0:	34 90       	lpm	r3, Z
    1ee2:	eb 96       	adiw	r28, 0x3b	; 59
    1ee4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ee6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ee8:	eb 97       	sbiw	r28, 0x3b	; 59
    1eea:	02 97       	sbiw	r24, 0x02	; 2
    {
        return opticalPower[0];
    1eec:	4c f4       	brge	.+18     	; 0x1f00 <CDC_Recive_Event_Process+0x194>
    1eee:	60 91 68 04 	lds	r22, 0x0468	; 0x800468 <opticalPower>
    1ef2:	70 91 69 04 	lds	r23, 0x0469	; 0x800469 <opticalPower+0x1>
    1ef6:	00 91 6a 04 	lds	r16, 0x046A	; 0x80046a <opticalPower+0x2>
    1efa:	f0 90 6b 04 	lds	r15, 0x046B	; 0x80046b <opticalPower+0x3>
    return y;
}

static float lagrange(int index)
{
    float x = pgm_read_word(&wl_1nm[index]);
    1efe:	43 c2       	rjmp	.+1158   	; 0x2386 <CDC_Recive_Event_Process+0x61a>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__floatunsisf>
    if(index < 2)
    {
        return opticalPower[0];
    }

    float x0 = conv_wl(j - 2);
    1f08:	6b 01       	movw	r12, r22
    1f0a:	7c 01       	movw	r14, r24
    1f0c:	81 01       	movw	r16, r2
    1f0e:	02 50       	subi	r16, 0x02	; 2
    1f10:	11 09       	sbc	r17, r1
    1f12:	c8 01       	movw	r24, r16
    1f14:	5c d8       	rcall	.-3912   	; 0xfce <conv_wl>
    1f16:	ab 96       	adiw	r28, 0x2b	; 43
    1f18:	6c af       	std	Y+60, r22	; 0x3c
    1f1a:	7d af       	std	Y+61, r23	; 0x3d
    1f1c:	8e af       	std	Y+62, r24	; 0x3e
    1f1e:	9f af       	std	Y+63, r25	; 0x3f
    float x1 = conv_wl(j - 1);
    1f20:	ab 97       	sbiw	r28, 0x2b	; 43
    1f22:	d1 01       	movw	r26, r2
    1f24:	11 97       	sbiw	r26, 0x01	; 1
    1f26:	cb 57       	subi	r28, 0x7B	; 123
    1f28:	df 4f       	sbci	r29, 0xFF	; 255
    1f2a:	b9 83       	std	Y+1, r27	; 0x01
    1f2c:	a8 83       	st	Y, r26
    1f2e:	c5 58       	subi	r28, 0x85	; 133
    1f30:	d0 40       	sbci	r29, 0x00	; 0
    1f32:	cd 01       	movw	r24, r26
    1f34:	4c d8       	rcall	.-3944   	; 0xfce <conv_wl>
    1f36:	af 96       	adiw	r28, 0x2f	; 47
    1f38:	6c af       	std	Y+60, r22	; 0x3c
    1f3a:	7d af       	std	Y+61, r23	; 0x3d
    1f3c:	8e af       	std	Y+62, r24	; 0x3e
    float x2 = conv_wl(j);
    1f3e:	9f af       	std	Y+63, r25	; 0x3f
    1f40:	af 97       	sbiw	r28, 0x2f	; 47
    1f42:	c1 01       	movw	r24, r2
    1f44:	44 d8       	rcall	.-3960   	; 0xfce <conv_wl>
    1f46:	e3 96       	adiw	r28, 0x33	; 51
    1f48:	6c af       	std	Y+60, r22	; 0x3c
    1f4a:	7d af       	std	Y+61, r23	; 0x3d
    1f4c:	8e af       	std	Y+62, r24	; 0x3e
    1f4e:	9f af       	std	Y+63, r25	; 0x3f
    float x3 = conv_wl(j + 1);
    1f50:	e3 97       	sbiw	r28, 0x33	; 51
    1f52:	f1 01       	movw	r30, r2
    1f54:	31 96       	adiw	r30, 0x01	; 1
    1f56:	c9 57       	subi	r28, 0x79	; 121
    1f58:	df 4f       	sbci	r29, 0xFF	; 255
    1f5a:	f9 83       	std	Y+1, r31	; 0x01
    1f5c:	e8 83       	st	Y, r30
    1f5e:	c7 58       	subi	r28, 0x87	; 135
    1f60:	d0 40       	sbci	r29, 0x00	; 0
    1f62:	cf 01       	movw	r24, r30
    1f64:	34 d8       	rcall	.-3992   	; 0xfce <conv_wl>
    1f66:	e7 96       	adiw	r28, 0x37	; 55
    1f68:	6c af       	std	Y+60, r22	; 0x3c
    1f6a:	7d af       	std	Y+61, r23	; 0x3d
    1f6c:	8e af       	std	Y+62, r24	; 0x3e
    1f6e:	9f af       	std	Y+63, r25	; 0x3f
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    1f70:	e7 97       	sbiw	r28, 0x37	; 55
    1f72:	af 96       	adiw	r28, 0x2f	; 47
    1f74:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f76:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f78:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f7c:	af 97       	sbiw	r28, 0x2f	; 47
    1f7e:	c7 01       	movw	r24, r14
    1f80:	b6 01       	movw	r22, r12
    1f82:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1f86:	4b 01       	movw	r8, r22
    1f88:	5c 01       	movw	r10, r24
    1f8a:	e3 96       	adiw	r28, 0x33	; 51
    1f8c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f8e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f90:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f92:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f94:	e3 97       	sbiw	r28, 0x33	; 51
    1f96:	c7 01       	movw	r24, r14
    1f98:	b6 01       	movw	r22, r12
    1f9a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1f9e:	c3 58       	subi	r28, 0x83	; 131
    1fa0:	df 4f       	sbci	r29, 0xFF	; 255
    1fa2:	68 83       	st	Y, r22
    1fa4:	79 83       	std	Y+1, r23	; 0x01
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
    1fa8:	9b 83       	std	Y+3, r25	; 0x03
    1faa:	cd 57       	subi	r28, 0x7D	; 125
    1fac:	d0 40       	sbci	r29, 0x00	; 0
    1fae:	e7 96       	adiw	r28, 0x37	; 55
    1fb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fb8:	e7 97       	sbiw	r28, 0x37	; 55
    1fba:	c7 01       	movw	r24, r14
    1fbc:	b6 01       	movw	r22, r12
    1fbe:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1fc2:	cf 57       	subi	r28, 0x7F	; 127
    1fc4:	df 4f       	sbci	r29, 0xFF	; 255
    1fc6:	68 83       	st	Y, r22
    1fc8:	79 83       	std	Y+1, r23	; 0x01
    1fca:	8a 83       	std	Y+2, r24	; 0x02
    1fcc:	9b 83       	std	Y+3, r25	; 0x03
    1fce:	c1 58       	subi	r28, 0x81	; 129
    +((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3))*y1
    1fd0:	d0 40       	sbci	r29, 0x00	; 0
    1fd2:	ab 96       	adiw	r28, 0x2b	; 43
    1fd4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fd6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fd8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fda:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fdc:	ab 97       	sbiw	r28, 0x2b	; 43
    1fde:	c7 01       	movw	r24, r14
    1fe0:	b6 01       	movw	r22, r12
    1fe2:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    1fe6:	6b 01       	movw	r12, r22
    +((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3))*y2
    1fe8:	7c 01       	movw	r14, r24
    1fea:	9b 01       	movw	r18, r22
    1fec:	ac 01       	movw	r20, r24
    1fee:	c5 01       	movw	r24, r10
    1ff0:	b4 01       	movw	r22, r8
    1ff2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    1ff6:	c7 57       	subi	r28, 0x77	; 119
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	68 83       	st	Y, r22
    1ffc:	79 83       	std	Y+1, r23	; 0x01
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	9b 83       	std	Y+3, r25	; 0x03
    2002:	c9 58       	subi	r28, 0x89	; 137
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    2004:	d0 40       	sbci	r29, 0x00	; 0
    2006:	c3 58       	subi	r28, 0x83	; 131
    2008:	df 4f       	sbci	r29, 0xFF	; 255
    200a:	28 81       	ld	r18, Y
    200c:	39 81       	ldd	r19, Y+1	; 0x01
    200e:	4a 81       	ldd	r20, Y+2	; 0x02
    2010:	5b 81       	ldd	r21, Y+3	; 0x03
    2012:	cd 57       	subi	r28, 0x7D	; 125
    2014:	d0 40       	sbci	r29, 0x00	; 0
    2016:	c5 01       	movw	r24, r10
    2018:	b4 01       	movw	r22, r8
    201a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    201e:	cf 57       	subi	r28, 0x7F	; 127
    2020:	df 4f       	sbci	r29, 0xFF	; 255
    2022:	28 81       	ld	r18, Y
    2024:	39 81       	ldd	r19, Y+1	; 0x01
    2026:	4a 81       	ldd	r20, Y+2	; 0x02
    2028:	5b 81       	ldd	r21, Y+3	; 0x03
    202a:	c1 58       	subi	r28, 0x81	; 129
    202c:	d0 40       	sbci	r29, 0x00	; 0
    202e:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2032:	4b 01       	movw	r8, r22
    2034:	5c 01       	movw	r10, r24
    2036:	af 96       	adiw	r28, 0x2f	; 47
    2038:	2c ad       	ldd	r18, Y+60	; 0x3c
    203a:	3d ad       	ldd	r19, Y+61	; 0x3d
    203c:	4e ad       	ldd	r20, Y+62	; 0x3e
    203e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2040:	af 97       	sbiw	r28, 0x2f	; 47
    2042:	ab 96       	adiw	r28, 0x2b	; 43
    2044:	6c ad       	ldd	r22, Y+60	; 0x3c
    2046:	7d ad       	ldd	r23, Y+61	; 0x3d
    2048:	8e ad       	ldd	r24, Y+62	; 0x3e
    204a:	9f ad       	ldd	r25, Y+63	; 0x3f
    204c:	ab 97       	sbiw	r28, 0x2b	; 43
    204e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    2052:	2b 01       	movw	r4, r22
    2054:	3c 01       	movw	r6, r24
    2056:	e3 96       	adiw	r28, 0x33	; 51
    2058:	2c ad       	ldd	r18, Y+60	; 0x3c
    205a:	3d ad       	ldd	r19, Y+61	; 0x3d
    205c:	4e ad       	ldd	r20, Y+62	; 0x3e
    205e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2060:	e3 97       	sbiw	r28, 0x33	; 51
    2062:	ab 96       	adiw	r28, 0x2b	; 43
    2064:	6c ad       	ldd	r22, Y+60	; 0x3c
    2066:	7d ad       	ldd	r23, Y+61	; 0x3d
    2068:	8e ad       	ldd	r24, Y+62	; 0x3e
    206a:	9f ad       	ldd	r25, Y+63	; 0x3f
    206c:	ab 97       	sbiw	r28, 0x2b	; 43
    206e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    2072:	9b 01       	movw	r18, r22
    2074:	ac 01       	movw	r20, r24
    2076:	c3 01       	movw	r24, r6
    2078:	b2 01       	movw	r22, r4
    207a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    207e:	2b 01       	movw	r4, r22
    2080:	3c 01       	movw	r6, r24
    2082:	e7 96       	adiw	r28, 0x37	; 55
    2084:	2c ad       	ldd	r18, Y+60	; 0x3c
    2086:	3d ad       	ldd	r19, Y+61	; 0x3d
    2088:	4e ad       	ldd	r20, Y+62	; 0x3e
    208a:	5f ad       	ldd	r21, Y+63	; 0x3f
    208c:	e7 97       	sbiw	r28, 0x37	; 55
    208e:	ab 96       	adiw	r28, 0x2b	; 43
    2090:	6c ad       	ldd	r22, Y+60	; 0x3c
    2092:	7d ad       	ldd	r23, Y+61	; 0x3d
    2094:	8e ad       	ldd	r24, Y+62	; 0x3e
    2096:	9f ad       	ldd	r25, Y+63	; 0x3f
    2098:	ab 97       	sbiw	r28, 0x2b	; 43
    209a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	c3 01       	movw	r24, r6
    20a4:	b2 01       	movw	r22, r4
    20a6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	c5 01       	movw	r24, r10
    20b0:	b4 01       	movw	r22, r8
    20b2:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>

    float x0 = conv_wl(j - 2);
    float x1 = conv_wl(j - 1);
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    20b6:	00 0f       	add	r16, r16
    20b8:	11 1f       	adc	r17, r17
    20ba:	00 0f       	add	r16, r16
    20bc:	11 1f       	adc	r17, r17
    20be:	f8 01       	movw	r30, r16
    20c0:	e8 59       	subi	r30, 0x98	; 152
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    20c2:	fb 4f       	sbci	r31, 0xFB	; 251
    20c4:	20 81       	ld	r18, Z
    20c6:	31 81       	ldd	r19, Z+1	; 0x01
    20c8:	42 81       	ldd	r20, Z+2	; 0x02
    20ca:	53 81       	ldd	r21, Z+3	; 0x03
    20cc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    20d0:	4b 01       	movw	r8, r22
    20d2:	5c 01       	movw	r10, r24
    20d4:	a7 01       	movw	r20, r14
    20d6:	96 01       	movw	r18, r12
    20d8:	c3 58       	subi	r28, 0x83	; 131
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	68 81       	ld	r22, Y
    20de:	79 81       	ldd	r23, Y+1	; 0x01
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	9b 81       	ldd	r25, Y+3	; 0x03
    20e4:	cd 57       	subi	r28, 0x7D	; 125
    20e6:	d0 40       	sbci	r29, 0x00	; 0
    20e8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    20ec:	cf 57       	subi	r28, 0x7F	; 127
    20ee:	df 4f       	sbci	r29, 0xFF	; 255
    20f0:	28 81       	ld	r18, Y
    20f2:	39 81       	ldd	r19, Y+1	; 0x01
    20f4:	4a 81       	ldd	r20, Y+2	; 0x02
    20f6:	5b 81       	ldd	r21, Y+3	; 0x03
    20f8:	c1 58       	subi	r28, 0x81	; 129
    20fa:	d0 40       	sbci	r29, 0x00	; 0
    20fc:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2100:	6b 01       	movw	r12, r22
    2102:	7c 01       	movw	r14, r24
    2104:	ab 96       	adiw	r28, 0x2b	; 43
    2106:	2c ad       	ldd	r18, Y+60	; 0x3c
    2108:	3d ad       	ldd	r19, Y+61	; 0x3d
    210a:	4e ad       	ldd	r20, Y+62	; 0x3e
    210c:	5f ad       	ldd	r21, Y+63	; 0x3f
    210e:	ab 97       	sbiw	r28, 0x2b	; 43
    2110:	af 96       	adiw	r28, 0x2f	; 47
    2112:	6c ad       	ldd	r22, Y+60	; 0x3c
    2114:	7d ad       	ldd	r23, Y+61	; 0x3d
    2116:	8e ad       	ldd	r24, Y+62	; 0x3e
    2118:	9f ad       	ldd	r25, Y+63	; 0x3f
    211a:	af 97       	sbiw	r28, 0x2f	; 47
    211c:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    2120:	2b 01       	movw	r4, r22
    2122:	3c 01       	movw	r6, r24
    2124:	e3 96       	adiw	r28, 0x33	; 51
    2126:	2c ad       	ldd	r18, Y+60	; 0x3c
    2128:	3d ad       	ldd	r19, Y+61	; 0x3d
    212a:	4e ad       	ldd	r20, Y+62	; 0x3e
    212c:	5f ad       	ldd	r21, Y+63	; 0x3f
    212e:	e3 97       	sbiw	r28, 0x33	; 51
    2130:	af 96       	adiw	r28, 0x2f	; 47
    2132:	6c ad       	ldd	r22, Y+60	; 0x3c
    2134:	7d ad       	ldd	r23, Y+61	; 0x3d
    2136:	8e ad       	ldd	r24, Y+62	; 0x3e
    2138:	9f ad       	ldd	r25, Y+63	; 0x3f
    213a:	af 97       	sbiw	r28, 0x2f	; 47
    213c:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    2140:	9b 01       	movw	r18, r22
    2142:	ac 01       	movw	r20, r24
    2144:	c3 01       	movw	r24, r6
    2146:	b2 01       	movw	r22, r4
    2148:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    214c:	2b 01       	movw	r4, r22
    214e:	3c 01       	movw	r6, r24
    2150:	e7 96       	adiw	r28, 0x37	; 55
    2152:	2c ad       	ldd	r18, Y+60	; 0x3c
    2154:	3d ad       	ldd	r19, Y+61	; 0x3d
    2156:	4e ad       	ldd	r20, Y+62	; 0x3e
    2158:	5f ad       	ldd	r21, Y+63	; 0x3f
    215a:	e7 97       	sbiw	r28, 0x37	; 55
    215c:	af 96       	adiw	r28, 0x2f	; 47
    215e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2160:	7d ad       	ldd	r23, Y+61	; 0x3d
    2162:	8e ad       	ldd	r24, Y+62	; 0x3e
    2164:	9f ad       	ldd	r25, Y+63	; 0x3f
    2166:	af 97       	sbiw	r28, 0x2f	; 47
    2168:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    216c:	9b 01       	movw	r18, r22
    216e:	ac 01       	movw	r20, r24
    2170:	c3 01       	movw	r24, r6
    2172:	b2 01       	movw	r22, r4
    2174:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2178:	9b 01       	movw	r18, r22
    217a:	ac 01       	movw	r20, r24
    217c:	c7 01       	movw	r24, r14
    217e:	b6 01       	movw	r22, r12
    2180:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    float x0 = conv_wl(j - 2);
    float x1 = conv_wl(j - 1);
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    2184:	cb 57       	subi	r28, 0x7B	; 123
    2186:	df 4f       	sbci	r29, 0xFF	; 255
    2188:	e8 81       	ld	r30, Y
    218a:	f9 81       	ldd	r31, Y+1	; 0x01
    218c:	c5 58       	subi	r28, 0x85	; 133
    218e:	d0 40       	sbci	r29, 0x00	; 0
    2190:	ee 0f       	add	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	e8 59       	subi	r30, 0x98	; 152
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    219a:	fb 4f       	sbci	r31, 0xFB	; 251
    219c:	20 81       	ld	r18, Z
    219e:	31 81       	ldd	r19, Z+1	; 0x01
    21a0:	42 81       	ldd	r20, Z+2	; 0x02
    21a2:	53 81       	ldd	r21, Z+3	; 0x03
    21a4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    21a8:	9b 01       	movw	r18, r22
    21aa:	ac 01       	movw	r20, r24
    21ac:	c5 01       	movw	r24, r10
    21ae:	b4 01       	movw	r22, r8
    21b0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    21b4:	6b 01       	movw	r12, r22
    21b6:	7c 01       	movw	r14, r24
    21b8:	c7 57       	subi	r28, 0x77	; 119
    21ba:	df 4f       	sbci	r29, 0xFF	; 255
    21bc:	28 81       	ld	r18, Y
    21be:	39 81       	ldd	r19, Y+1	; 0x01
    21c0:	4a 81       	ldd	r20, Y+2	; 0x02
    21c2:	5b 81       	ldd	r21, Y+3	; 0x03
    21c4:	c9 58       	subi	r28, 0x89	; 137
    21c6:	d0 40       	sbci	r29, 0x00	; 0
    21c8:	cf 57       	subi	r28, 0x7F	; 127
    21ca:	df 4f       	sbci	r29, 0xFF	; 255
    21cc:	68 81       	ld	r22, Y
    21ce:	79 81       	ldd	r23, Y+1	; 0x01
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	c1 58       	subi	r28, 0x81	; 129
    21d6:	d0 40       	sbci	r29, 0x00	; 0
    21d8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    21dc:	4b 01       	movw	r8, r22
    21de:	5c 01       	movw	r10, r24
    21e0:	ab 96       	adiw	r28, 0x2b	; 43
    21e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    21e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    21e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    21e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ea:	ab 97       	sbiw	r28, 0x2b	; 43
    21ec:	e3 96       	adiw	r28, 0x33	; 51
    21ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    21f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    21f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f6:	e3 97       	sbiw	r28, 0x33	; 51
    21f8:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    21fc:	2b 01       	movw	r4, r22
    21fe:	3c 01       	movw	r6, r24
    2200:	af 96       	adiw	r28, 0x2f	; 47
    2202:	2c ad       	ldd	r18, Y+60	; 0x3c
    2204:	3d ad       	ldd	r19, Y+61	; 0x3d
    2206:	4e ad       	ldd	r20, Y+62	; 0x3e
    2208:	5f ad       	ldd	r21, Y+63	; 0x3f
    220a:	af 97       	sbiw	r28, 0x2f	; 47
    220c:	e3 96       	adiw	r28, 0x33	; 51
    220e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2210:	7d ad       	ldd	r23, Y+61	; 0x3d
    2212:	8e ad       	ldd	r24, Y+62	; 0x3e
    2214:	9f ad       	ldd	r25, Y+63	; 0x3f
    2216:	e3 97       	sbiw	r28, 0x33	; 51
    2218:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    221c:	9b 01       	movw	r18, r22
    221e:	ac 01       	movw	r20, r24
    2220:	c3 01       	movw	r24, r6
    2222:	b2 01       	movw	r22, r4
    2224:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2228:	2b 01       	movw	r4, r22
    222a:	3c 01       	movw	r6, r24
    222c:	e7 96       	adiw	r28, 0x37	; 55
    222e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2230:	3d ad       	ldd	r19, Y+61	; 0x3d
    2232:	4e ad       	ldd	r20, Y+62	; 0x3e
    2234:	5f ad       	ldd	r21, Y+63	; 0x3f
    2236:	e7 97       	sbiw	r28, 0x37	; 55
    2238:	e3 96       	adiw	r28, 0x33	; 51
    223a:	6c ad       	ldd	r22, Y+60	; 0x3c
    223c:	7d ad       	ldd	r23, Y+61	; 0x3d
    223e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2240:	9f ad       	ldd	r25, Y+63	; 0x3f
    2242:	e3 97       	sbiw	r28, 0x33	; 51
    2244:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	c3 01       	movw	r24, r6
    224e:	b2 01       	movw	r22, r4
    2250:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2254:	9b 01       	movw	r18, r22
    2256:	ac 01       	movw	r20, r24
    2258:	c5 01       	movw	r24, r10
    225a:	b4 01       	movw	r22, r8
    225c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    float x1 = conv_wl(j - 1);
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    2260:	f1 01       	movw	r30, r2
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	e8 59       	subi	r30, 0x98	; 152
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    226c:	fb 4f       	sbci	r31, 0xFB	; 251
    226e:	20 81       	ld	r18, Z
    2270:	31 81       	ldd	r19, Z+1	; 0x01
    2272:	42 81       	ldd	r20, Z+2	; 0x02
    2274:	53 81       	ldd	r21, Z+3	; 0x03
    2276:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    227a:	9b 01       	movw	r18, r22
    227c:	ac 01       	movw	r20, r24
    227e:	c7 01       	movw	r24, r14
    2280:	b6 01       	movw	r22, r12
    2282:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    2286:	6b 01       	movw	r12, r22
    2288:	7c 01       	movw	r14, r24
    228a:	c7 57       	subi	r28, 0x77	; 119
    228c:	df 4f       	sbci	r29, 0xFF	; 255
    228e:	28 81       	ld	r18, Y
    2290:	39 81       	ldd	r19, Y+1	; 0x01
    2292:	4a 81       	ldd	r20, Y+2	; 0x02
    2294:	5b 81       	ldd	r21, Y+3	; 0x03
    2296:	c9 58       	subi	r28, 0x89	; 137
    2298:	d0 40       	sbci	r29, 0x00	; 0
    229a:	c3 58       	subi	r28, 0x83	; 131
    229c:	df 4f       	sbci	r29, 0xFF	; 255
    229e:	68 81       	ld	r22, Y
    22a0:	79 81       	ldd	r23, Y+1	; 0x01
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	cd 57       	subi	r28, 0x7D	; 125
    22a8:	d0 40       	sbci	r29, 0x00	; 0
    22aa:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    22ae:	4b 01       	movw	r8, r22
    22b0:	5c 01       	movw	r10, r24
    22b2:	ab 96       	adiw	r28, 0x2b	; 43
    22b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    22b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    22b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    22ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    22bc:	ab 97       	sbiw	r28, 0x2b	; 43
    22be:	e7 96       	adiw	r28, 0x37	; 55
    22c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    22c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    22c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22c8:	e7 97       	sbiw	r28, 0x37	; 55
    22ca:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    22ce:	2b 01       	movw	r4, r22
    22d0:	3c 01       	movw	r6, r24
    22d2:	af 96       	adiw	r28, 0x2f	; 47
    22d4:	2c ad       	ldd	r18, Y+60	; 0x3c
    22d6:	3d ad       	ldd	r19, Y+61	; 0x3d
    22d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    22da:	5f ad       	ldd	r21, Y+63	; 0x3f
    22dc:	af 97       	sbiw	r28, 0x2f	; 47
    22de:	e7 96       	adiw	r28, 0x37	; 55
    22e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    22e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    22e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22e8:	e7 97       	sbiw	r28, 0x37	; 55
    22ea:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    22ee:	9b 01       	movw	r18, r22
    22f0:	ac 01       	movw	r20, r24
    22f2:	c3 01       	movw	r24, r6
    22f4:	b2 01       	movw	r22, r4
    22f6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    22fa:	2b 01       	movw	r4, r22
    22fc:	3c 01       	movw	r6, r24
    22fe:	e3 96       	adiw	r28, 0x33	; 51
    2300:	2c ad       	ldd	r18, Y+60	; 0x3c
    2302:	3d ad       	ldd	r19, Y+61	; 0x3d
    2304:	4e ad       	ldd	r20, Y+62	; 0x3e
    2306:	5f ad       	ldd	r21, Y+63	; 0x3f
    2308:	e3 97       	sbiw	r28, 0x33	; 51
    230a:	e7 96       	adiw	r28, 0x37	; 55
    230c:	6c ad       	ldd	r22, Y+60	; 0x3c
    230e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2310:	8e ad       	ldd	r24, Y+62	; 0x3e
    2312:	9f ad       	ldd	r25, Y+63	; 0x3f
    2314:	e7 97       	sbiw	r28, 0x37	; 55
    2316:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__subsf3>
    231a:	9b 01       	movw	r18, r22
    231c:	ac 01       	movw	r20, r24
    231e:	c3 01       	movw	r24, r6
    2320:	b2 01       	movw	r22, r4
    2322:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2326:	9b 01       	movw	r18, r22
    2328:	ac 01       	movw	r20, r24
    232a:	c5 01       	movw	r24, r10
    232c:	b4 01       	movw	r22, r8
    232e:	0e 94 93 1b 	call	0x3726	; 0x3726 <__divsf3>
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];
    2332:	c9 57       	subi	r28, 0x79	; 121
    2334:	df 4f       	sbci	r29, 0xFF	; 255
    2336:	e8 81       	ld	r30, Y
    2338:	f9 81       	ldd	r31, Y+1	; 0x01
    233a:	c7 58       	subi	r28, 0x87	; 135
    233c:	d0 40       	sbci	r29, 0x00	; 0
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	e8 59       	subi	r30, 0x98	; 152

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    2348:	fb 4f       	sbci	r31, 0xFB	; 251
    234a:	20 81       	ld	r18, Z
    234c:	31 81       	ldd	r19, Z+1	; 0x01
    234e:	42 81       	ldd	r20, Z+2	; 0x02
    2350:	53 81       	ldd	r21, Z+3	; 0x03
    2352:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__mulsf3>
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	c7 01       	movw	r24, r14
    235c:	b6 01       	movw	r22, r12
    235e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <__addsf3>
    2362:	16 2f       	mov	r17, r22
    2364:	e7 2e       	mov	r14, r23
    2366:	08 2f       	mov	r16, r24
    +((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3))*y1
    +((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3))*y2
    +((x-x0)*(x-x1)*(x-x2))/((x3-x0)*(x3-x1)*(x3-x2))*y3;

    if(y < 0)
    2368:	f9 2e       	mov	r15, r25
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	a9 01       	movw	r20, r18
    2370:	0e 94 8f 1b 	call	0x371e	; 0x371e <__cmpsf2>
    2374:	87 ff       	sbrs	r24, 7
    {
        y = 0;
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <CDC_Recive_Event_Process+0x616>
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	00 e0       	ldi	r16, 0x00	; 0
    237e:	f1 2c       	mov	r15, r1
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <CDC_Recive_Event_Process+0x61a>
    2382:	61 2f       	mov	r22, r17
                for (int i = 0; i < 491; i++)
#endif
                {
                    
                    float op = lagrange(i);
                    int wl = pgm_read_word(&wl_1nm[i]);
    2384:	7e 2d       	mov	r23, r14
    2386:	e9 96       	adiw	r28, 0x39	; 57
    2388:	ee ad       	ldd	r30, Y+62	; 0x3e
    238a:	ff ad       	ldd	r31, Y+63	; 0x3f
    238c:	e9 97       	sbiw	r28, 0x39	; 57
    238e:	85 91       	lpm	r24, Z+
                    char msg[32] = {0};
    2390:	94 91       	lpm	r25, Z
    2392:	a7 96       	adiw	r28, 0x27	; 39
    2394:	ae ad       	ldd	r26, Y+62	; 0x3e
    2396:	bf ad       	ldd	r27, Y+63	; 0x3f
    2398:	a7 97       	sbiw	r28, 0x27	; 39
    239a:	e0 e2       	ldi	r30, 0x20	; 32
    239c:	1d 92       	st	X+, r1
    239e:	ea 95       	dec	r30
                    sprintf(msg, "%d:%g\r", wl, op);
    23a0:	e9 f7       	brne	.-6      	; 0x239c <CDC_Recive_Event_Process+0x630>
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	7f 93       	push	r23
    23a8:	6f 93       	push	r22
    23aa:	9f 93       	push	r25
    23ac:	8f 93       	push	r24
    23ae:	8c e7       	ldi	r24, 0x7C	; 124
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	9f 93       	push	r25
    23b4:	8f 93       	push	r24
    23b6:	e1 e0       	ldi	r30, 0x01	; 1
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	ec 0f       	add	r30, r28
    23bc:	fd 1f       	adc	r31, r29
    23be:	ff 93       	push	r31
    23c0:	ef 93       	push	r30
                    CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    23c2:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
    23c6:	be 01       	movw	r22, r28
    23c8:	6f 5f       	subi	r22, 0xFF	; 255
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	91 e0       	ldi	r25, 0x01	; 1
        else if (strncmp(message, "MEAS1nm\n", 9) == 0)
        {
            measure();
            correct();
#ifdef CP150
            for (int i = 0; i < 471; i++)
    23d0:	9f d7       	rcall	.+3902   	; 0x3310 <CDC_Device_SendString>
    23d2:	eb 96       	adiw	r28, 0x3b	; 59
    23d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    23d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23d8:	eb 97       	sbiw	r28, 0x3b	; 59
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	eb 96       	adiw	r28, 0x3b	; 59
    23de:	9f af       	std	Y+63, r25	; 0x3f
    23e0:	8e af       	std	Y+62, r24	; 0x3e
    23e2:	eb 97       	sbiw	r28, 0x3b	; 59
    23e4:	e9 96       	adiw	r28, 0x39	; 57
    23e6:	ae ad       	ldd	r26, Y+62	; 0x3e
    23e8:	bf ad       	ldd	r27, Y+63	; 0x3f
    23ea:	e9 97       	sbiw	r28, 0x39	; 57
    23ec:	12 96       	adiw	r26, 0x02	; 2
    23ee:	e9 96       	adiw	r28, 0x39	; 57
    23f0:	bf af       	std	Y+63, r27	; 0x3f
    23f2:	ae af       	std	Y+62, r26	; 0x3e
    23f4:	e9 97       	sbiw	r28, 0x39	; 57
    23f6:	ed 96       	adiw	r28, 0x3d	; 61
    23f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    23fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    23fc:	ed 97       	sbiw	r28, 0x3d	; 61
    23fe:	32 96       	adiw	r30, 0x02	; 2
    2400:	ed 96       	adiw	r28, 0x3d	; 61
    2402:	ff af       	std	Y+63, r31	; 0x3f
    2404:	ee af       	std	Y+62, r30	; 0x3e
    2406:	ed 97       	sbiw	r28, 0x3d	; 61
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	eb 96       	adiw	r28, 0x3b	; 59
    2414:	ae ad       	ldd	r26, Y+62	; 0x3e
    2416:	bf ad       	ldd	r27, Y+63	; 0x3f
    2418:	eb 97       	sbiw	r28, 0x3b	; 59
    241a:	a7 3d       	cpi	r26, 0xD7	; 215
    241c:	b1 40       	sbci	r27, 0x01	; 1
    241e:	09 f0       	breq	.+2      	; 0x2422 <CDC_Recive_Event_Process+0x6b6>
                    CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
                    wl += 1;
                }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else if (strncmp(message, "RAW", 3) == 0)
    2420:	54 cd       	rjmp	.-1368   	; 0x1eca <CDC_Recive_Event_Process+0x15e>
    2422:	2a cd       	rjmp	.-1452   	; 0x1e78 <CDC_Recive_Event_Process+0x10c>
    2424:	43 e0       	ldi	r20, 0x03	; 3
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	63 e8       	ldi	r22, 0x83	; 131
    242a:	71 e0       	ldi	r23, 0x01	; 1
    242c:	82 e5       	ldi	r24, 0x52	; 82
    242e:	98 e0       	ldi	r25, 0x08	; 8
    2430:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {
            measure();
    2434:	89 2b       	or	r24, r25
    2436:	81 f5       	brne	.+96     	; 0x2498 <CDC_Recive_Event_Process+0x72c>
    2438:	3e d9       	rcall	.-3460   	; 0x16b6 <measure>

            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
                char msg[16] = {0};
    243a:	08 e6       	ldi	r16, 0x68	; 104
    243c:	14 e0       	ldi	r17, 0x04	; 4
    243e:	80 e1       	ldi	r24, 0x10	; 16
    2440:	b8 2e       	mov	r11, r24
    2442:	ce 01       	movw	r24, r28
                sprintf(msg, "%d\r", (int)opticalPower[i]);
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	7c 01       	movw	r14, r24
    2448:	97 e8       	ldi	r25, 0x87	; 135
    244a:	c9 2e       	mov	r12, r25
        {
            measure();

            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
                char msg[16] = {0};
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	d9 2e       	mov	r13, r25
    2450:	d7 01       	movw	r26, r14
    2452:	eb 2d       	mov	r30, r11
    2454:	1d 92       	st	X+, r1
                sprintf(msg, "%d\r", (int)opticalPower[i]);
    2456:	ea 95       	dec	r30
    2458:	e9 f7       	brne	.-6      	; 0x2454 <CDC_Recive_Event_Process+0x6e8>
    245a:	d8 01       	movw	r26, r16
    245c:	6d 91       	ld	r22, X+
    245e:	7d 91       	ld	r23, X+
    2460:	8d 91       	ld	r24, X+
    2462:	9d 91       	ld	r25, X+
    2464:	8d 01       	movw	r16, r26
    2466:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fixsfsi>
    246a:	7f 93       	push	r23
    246c:	6f 93       	push	r22
    246e:	df 92       	push	r13
    2470:	cf 92       	push	r12
    2472:	ff 92       	push	r15
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    2474:	ef 92       	push	r14
    2476:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
    247a:	b7 01       	movw	r22, r14
    247c:	80 e0       	ldi	r24, 0x00	; 0
        }
        else if (strncmp(message, "RAW", 3) == 0)
        {
            measure();

            for (int i = 0; i < C12880MA_CHANELS; i++)
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	47 d7       	rcall	.+3726   	; 0x3310 <CDC_Device_SendString>
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	b8 e0       	ldi	r27, 0x08	; 8
    2490:	00 35       	cpi	r16, 0x50	; 80
                sprintf(msg, "%d\r", (int)opticalPower[i]);
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
            }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else if (strncmp(message, "DARK", 4) == 0)
    2492:	1b 07       	cpc	r17, r27
    2494:	e9 f6       	brne	.-70     	; 0x2450 <CDC_Recive_Event_Process+0x6e4>
    2496:	f0 cc       	rjmp	.-1568   	; 0x1e78 <CDC_Recive_Event_Process+0x10c>
    2498:	44 e0       	ldi	r20, 0x04	; 4
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	6b e8       	ldi	r22, 0x8B	; 139
    249e:	71 e0       	ldi	r23, 0x01	; 1
    24a0:	82 e5       	ldi	r24, 0x52	; 82
    24a2:	98 e0       	ldi	r25, 0x08	; 8
    24a4:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {
            dark();
    24a8:	89 2b       	or	r24, r25
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <CDC_Recive_Event_Process+0x744>
        //         sprintf(msg, "%g\r", pgm_read_float(&spectralsensitivitycoeff[i]));
        //         CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
        //     }
        //     CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        // }
        else if (strncmp(message, "MODEL?", 6) == 0)
    24ac:	81 d9       	rcall	.-3326   	; 0x17b0 <dark>
    24ae:	c4 c1       	rjmp	.+904    	; 0x2838 <CDC_Recive_Event_Process+0xacc>
    24b0:	46 e0       	ldi	r20, 0x06	; 6
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	65 e9       	ldi	r22, 0x95	; 149
    24b6:	71 e0       	ldi	r23, 0x01	; 1
    24b8:	82 e5       	ldi	r24, 0x52	; 82
    24ba:	98 e0       	ldi	r25, 0x08	; 8
    24bc:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {

            char msg[32] = {0};
    24c0:	89 2b       	or	r24, r25
    24c2:	89 f4       	brne	.+34     	; 0x24e6 <CDC_Recive_Event_Process+0x77a>
    24c4:	8e 01       	movw	r16, r28
    24c6:	0f 5f       	subi	r16, 0xFF	; 255
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	80 e2       	ldi	r24, 0x20	; 32
    24cc:	f8 01       	movw	r30, r16
    24ce:	11 92       	st	Z+, r1
            sprintf(msg, "MODEL/%s\n", (char*)pgm_read_word(&model[0]));
    24d0:	8a 95       	dec	r24
    24d2:	e9 f7       	brne	.-6      	; 0x24ce <CDC_Recive_Event_Process+0x762>
    24d4:	ee e8       	ldi	r30, 0x8E	; 142
    24d6:	fa e0       	ldi	r31, 0x0A	; 10
    24d8:	85 91       	lpm	r24, Z+
    24da:	94 91       	lpm	r25, Z
    24dc:	9f 93       	push	r25
    24de:	8f 93       	push	r24
    24e0:	8c e9       	ldi	r24, 0x9C	; 156
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
        }
        else if (strncmp(message, "NAME?", 5) == 0)
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	35 c0       	rjmp	.+106    	; 0x2550 <CDC_Recive_Event_Process+0x7e4>
    24e6:	45 e0       	ldi	r20, 0x05	; 5
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	66 ea       	ldi	r22, 0xA6	; 166
    24ec:	71 e0       	ldi	r23, 0x01	; 1
    24ee:	82 e5       	ldi	r24, 0x52	; 82
    24f0:	98 e0       	ldi	r25, 0x08	; 8
    24f2:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {

            char msg[32] = {0};
    24f6:	89 2b       	or	r24, r25
    24f8:	89 f4       	brne	.+34     	; 0x251c <CDC_Recive_Event_Process+0x7b0>
    24fa:	8e 01       	movw	r16, r28
    24fc:	0f 5f       	subi	r16, 0xFF	; 255
    24fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2500:	80 e2       	ldi	r24, 0x20	; 32
    2502:	d8 01       	movw	r26, r16
    2504:	1d 92       	st	X+, r1
            sprintf(msg, "NAME/%s\n", (char*)pgm_read_word(&name[0]));
    2506:	8a 95       	dec	r24
    2508:	e9 f7       	brne	.-6      	; 0x2504 <CDC_Recive_Event_Process+0x798>
    250a:	e4 e8       	ldi	r30, 0x84	; 132
    250c:	fa e0       	ldi	r31, 0x0A	; 10
    250e:	85 91       	lpm	r24, Z+
    2510:	94 91       	lpm	r25, Z
    2512:	9f 93       	push	r25
    2514:	8f 93       	push	r24
    2516:	8c ea       	ldi	r24, 0xAC	; 172
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
        }
        else if (strncmp(message, "SN?", 3) == 0)
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	1a c0       	rjmp	.+52     	; 0x2550 <CDC_Recive_Event_Process+0x7e4>
    251c:	43 e0       	ldi	r20, 0x03	; 3
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	65 eb       	ldi	r22, 0xB5	; 181
    2522:	71 e0       	ldi	r23, 0x01	; 1
    2524:	82 e5       	ldi	r24, 0x52	; 82
    2526:	98 e0       	ldi	r25, 0x08	; 8
    2528:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {

            char msg[32] = {0};
    252c:	89 2b       	or	r24, r25
    252e:	09 f5       	brne	.+66     	; 0x2572 <CDC_Recive_Event_Process+0x806>
    2530:	8e 01       	movw	r16, r28
    2532:	0f 5f       	subi	r16, 0xFF	; 255
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	80 e2       	ldi	r24, 0x20	; 32
    2538:	f8 01       	movw	r30, r16
    253a:	11 92       	st	Z+, r1
            sprintf(msg, "SN/%s\n", (char*)pgm_read_word(&serialnumber[0]));
    253c:	8a 95       	dec	r24
    253e:	e9 f7       	brne	.-6      	; 0x253a <CDC_Recive_Event_Process+0x7ce>
    2540:	e6 e7       	ldi	r30, 0x76	; 118
    2542:	fa e0       	ldi	r31, 0x0A	; 10
    2544:	85 91       	lpm	r24, Z+
    2546:	94 91       	lpm	r25, Z
    2548:	9f 93       	push	r25
    254a:	8f 93       	push	r24
    254c:	89 eb       	ldi	r24, 0xB9	; 185
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	9f 93       	push	r25
    2552:	8f 93       	push	r24
    2554:	1f 93       	push	r17
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    2556:	0f 93       	push	r16
    2558:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
    255c:	b8 01       	movw	r22, r16
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	d6 d6       	rcall	.+3500   	; 0x3310 <CDC_Device_SendString>
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
        }
        else if (strncmp(message, "WCCF", 3) == 0)
    256e:	0f 90       	pop	r0
    2570:	6b c1       	rjmp	.+726    	; 0x2848 <CDC_Recive_Event_Process+0xadc>
    2572:	43 e0       	ldi	r20, 0x03	; 3
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	60 ec       	ldi	r22, 0xC0	; 192
    2578:	71 e0       	ldi	r23, 0x01	; 1
    257a:	82 e5       	ldi	r24, 0x52	; 82
    257c:	98 e0       	ldi	r25, 0x08	; 8
    257e:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
    2582:	89 2b       	or	r24, r25
        {

            char msg[100] = {0};
    2584:	09 f0       	breq	.+2      	; 0x2588 <CDC_Recive_Event_Process+0x81c>
    2586:	4e c0       	rjmp	.+156    	; 0x2624 <CDC_Recive_Event_Process+0x8b8>
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	1c 01       	movw	r2, r24
    258e:	84 e6       	ldi	r24, 0x64	; 100
    2590:	d1 01       	movw	r26, r2
    2592:	1d 92       	st	X+, r1
            sprintf(msg, "WCCF/%g:%g:%g:%g:%g:%g\n", pgm_read_float(&wccoeff[0]), pgm_read_float(&wccoeff[1]), pgm_read_float(&wccoeff[2]), pgm_read_float(&wccoeff[3]), pgm_read_float(&wccoeff[4]), pgm_read_float(&wccoeff[5]));
    2594:	8a 95       	dec	r24
    2596:	e9 f7       	brne	.-6      	; 0x2592 <CDC_Recive_Event_Process+0x826>
    2598:	e2 e7       	ldi	r30, 0x72	; 114
    259a:	fa e0       	ldi	r31, 0x0A	; 10
    259c:	05 91       	lpm	r16, Z+
    259e:	15 91       	lpm	r17, Z+
    25a0:	25 91       	lpm	r18, Z+
    25a2:	34 91       	lpm	r19, Z
    25a4:	ee e6       	ldi	r30, 0x6E	; 110
    25a6:	fa e0       	ldi	r31, 0x0A	; 10
    25a8:	45 90       	lpm	r4, Z+
    25aa:	55 90       	lpm	r5, Z+
    25ac:	65 90       	lpm	r6, Z+
    25ae:	74 90       	lpm	r7, Z
    25b0:	ea e6       	ldi	r30, 0x6A	; 106
    25b2:	fa e0       	ldi	r31, 0x0A	; 10
    25b4:	85 90       	lpm	r8, Z+
    25b6:	95 90       	lpm	r9, Z+
    25b8:	a5 90       	lpm	r10, Z+
    25ba:	b4 90       	lpm	r11, Z
    25bc:	e6 e6       	ldi	r30, 0x66	; 102
    25be:	fa e0       	ldi	r31, 0x0A	; 10
    25c0:	c5 90       	lpm	r12, Z+
    25c2:	d5 90       	lpm	r13, Z+
    25c4:	e5 90       	lpm	r14, Z+
    25c6:	f4 90       	lpm	r15, Z
    25c8:	e2 e6       	ldi	r30, 0x62	; 98
    25ca:	fa e0       	ldi	r31, 0x0A	; 10
    25cc:	45 91       	lpm	r20, Z+
    25ce:	55 91       	lpm	r21, Z+
    25d0:	65 91       	lpm	r22, Z+
    25d2:	74 91       	lpm	r23, Z
    25d4:	ee e5       	ldi	r30, 0x5E	; 94
    25d6:	fa e0       	ldi	r31, 0x0A	; 10
    25d8:	85 91       	lpm	r24, Z+
    25da:	95 91       	lpm	r25, Z+
    25dc:	a5 91       	lpm	r26, Z+
    25de:	b4 91       	lpm	r27, Z
    25e0:	3f 93       	push	r19
    25e2:	2f 93       	push	r18
    25e4:	1f 93       	push	r17
    25e6:	0f 93       	push	r16
    25e8:	7f 92       	push	r7
    25ea:	6f 92       	push	r6
    25ec:	5f 92       	push	r5
    25ee:	4f 92       	push	r4
    25f0:	bf 92       	push	r11
    25f2:	af 92       	push	r10
    25f4:	9f 92       	push	r9
    25f6:	8f 92       	push	r8
    25f8:	ff 92       	push	r15
    25fa:	ef 92       	push	r14
    25fc:	df 92       	push	r13
    25fe:	cf 92       	push	r12
    2600:	7f 93       	push	r23
    2602:	6f 93       	push	r22
    2604:	5f 93       	push	r21
    2606:	4f 93       	push	r20
    2608:	bf 93       	push	r27
    260a:	af 93       	push	r26
    260c:	9f 93       	push	r25
    260e:	8f 93       	push	r24
    2610:	85 ec       	ldi	r24, 0xC5	; 197
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	9f 93       	push	r25
    2616:	8f 93       	push	r24
    2618:	3f 92       	push	r3
    261a:	2f 92       	push	r2
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    261c:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
        }
        else if (strncmp(message, "ST?", 3) == 0)
    2620:	b1 01       	movw	r22, r2
    2622:	36 c0       	rjmp	.+108    	; 0x2690 <CDC_Recive_Event_Process+0x924>
    2624:	43 e0       	ldi	r20, 0x03	; 3
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	6d ed       	ldi	r22, 0xDD	; 221
    262a:	71 e0       	ldi	r23, 0x01	; 1
    262c:	82 e5       	ldi	r24, 0x52	; 82
    262e:	98 e0       	ldi	r25, 0x08	; 8
    2630:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
        {

            int msg[32] = {0};
    2634:	89 2b       	or	r24, r25
    2636:	a9 f5       	brne	.+106    	; 0x26a2 <CDC_Recive_Event_Process+0x936>
    2638:	8e 01       	movw	r16, r28
    263a:	0f 5f       	subi	r16, 0xFF	; 255
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	80 e4       	ldi	r24, 0x40	; 64
    2640:	d8 01       	movw	r26, r16
    2642:	1d 92       	st	X+, r1
            char st = status == STATUS_RUN ? 'R' : status == STATUS_WARN ? 'W'
    2644:	8a 95       	dec	r24
    2646:	e9 f7       	brne	.-6      	; 0x2642 <CDC_Recive_Event_Process+0x8d6>
    2648:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <status>
    264c:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <status+0x1>
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	21 f0       	breq	.+8      	; 0x265c <CDC_Recive_Event_Process+0x8f0>
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	21 f0       	breq	.+8      	; 0x2660 <CDC_Recive_Event_Process+0x8f4>
    2658:	85 e4       	ldi	r24, 0x45	; 69
    265a:	03 c0       	rjmp	.+6      	; 0x2662 <CDC_Recive_Event_Process+0x8f6>
    265c:	82 e5       	ldi	r24, 0x52	; 82
                                                                         : 'E';
            sprintf(msg, "ST/%c:%.3f\n", st, temperature);
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <CDC_Recive_Event_Process+0x8f6>
    2660:	87 e5       	ldi	r24, 0x57	; 87
    2662:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <temperature+0x3>
    2666:	9f 93       	push	r25
    2668:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temperature+0x2>
    266c:	9f 93       	push	r25
    266e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <temperature+0x1>
    2672:	9f 93       	push	r25
    2674:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <temperature>
    2678:	9f 93       	push	r25
    267a:	1f 92       	push	r1
    267c:	8f 93       	push	r24
    267e:	81 ee       	ldi	r24, 0xE1	; 225
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	9f 93       	push	r25
    2684:	8f 93       	push	r24
    2686:	1f 93       	push	r17
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    2688:	0f 93       	push	r16
    268a:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
    268e:	b8 01       	movw	r22, r16
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	3d d6       	rcall	.+3194   	; 0x3310 <CDC_Device_SendString>
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
        }
        else if (strncmp(message, "EXP/", 4) == 0)
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	d3 c0       	rjmp	.+422    	; 0x2848 <CDC_Recive_Event_Process+0xadc>
    26a2:	44 e0       	ldi	r20, 0x04	; 4
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	6d ee       	ldi	r22, 0xED	; 237
    26a8:	71 e0       	ldi	r23, 0x01	; 1
    26aa:	82 e5       	ldi	r24, 0x52	; 82
    26ac:	98 e0       	ldi	r25, 0x08	; 8
    26ae:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
    26b2:	89 2b       	or	r24, r25
        {
            if (strncmp(message, "EXP/AUTO", 8) == 0)
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <CDC_Recive_Event_Process+0x94c>
    26b6:	c3 c0       	rjmp	.+390    	; 0x283e <CDC_Recive_Event_Process+0xad2>
    26b8:	48 e0       	ldi	r20, 0x08	; 8
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	62 ef       	ldi	r22, 0xF2	; 242
    26be:	71 e0       	ldi	r23, 0x01	; 1
    26c0:	82 e5       	ldi	r24, 0x52	; 82
    26c2:	98 e0       	ldi	r25, 0x08	; 8
    26c4:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 1;
    26c8:	89 2b       	or	r24, r25
    26ca:	39 f4       	brne	.+14     	; 0x26da <CDC_Recive_Event_Process+0x96e>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <auto_exposure+0x1>
    26d4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <auto_exposure>
            }
            else if (strncmp(message, "EXP/100us", 9) == 0)
    26d8:	af c0       	rjmp	.+350    	; 0x2838 <CDC_Recive_Event_Process+0xacc>
    26da:	49 e0       	ldi	r20, 0x09	; 9
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	6b ef       	ldi	r22, 0xFB	; 251
    26e0:	71 e0       	ldi	r23, 0x01	; 1
    26e2:	82 e5       	ldi	r24, 0x52	; 82
    26e4:	98 e0       	ldi	r25, 0x08	; 8
    26e6:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    26ea:	89 2b       	or	r24, r25
    26ec:	49 f4       	brne	.+18     	; 0x2700 <CDC_Recive_Event_Process+0x994>
    26ee:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_100us;
    26f2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    26f6:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <exposure_time_sel+0x1>
    26fa:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <exposure_time_sel>
            }
            else if (strncmp(message, "EXP/200us", 9) == 0)
    26fe:	9c c0       	rjmp	.+312    	; 0x2838 <CDC_Recive_Event_Process+0xacc>
    2700:	49 e0       	ldi	r20, 0x09	; 9
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	65 e0       	ldi	r22, 0x05	; 5
    2706:	72 e0       	ldi	r23, 0x02	; 2
    2708:	82 e5       	ldi	r24, 0x52	; 82
    270a:	98 e0       	ldi	r25, 0x08	; 8
    270c:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    2710:	89 2b       	or	r24, r25
    2712:	39 f4       	brne	.+14     	; 0x2722 <CDC_Recive_Event_Process+0x9b6>
    2714:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_200us;
    2718:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    271c:	81 e0       	ldi	r24, 0x01	; 1
            }
            else if (strncmp(message, "EXP/500us", 9) == 0)
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	87 c0       	rjmp	.+270    	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    2722:	49 e0       	ldi	r20, 0x09	; 9
    2724:	50 e0       	ldi	r21, 0x00	; 0
    2726:	6f e0       	ldi	r22, 0x0F	; 15
    2728:	72 e0       	ldi	r23, 0x02	; 2
    272a:	82 e5       	ldi	r24, 0x52	; 82
    272c:	98 e0       	ldi	r25, 0x08	; 8
    272e:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    2732:	89 2b       	or	r24, r25
    2734:	39 f4       	brne	.+14     	; 0x2744 <CDC_Recive_Event_Process+0x9d8>
    2736:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_500us;
    273a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    273e:	82 e0       	ldi	r24, 0x02	; 2
            }
            else if (strncmp(message, "EXP/1ms", 7) == 0)
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	76 c0       	rjmp	.+236    	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    2744:	47 e0       	ldi	r20, 0x07	; 7
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	69 e1       	ldi	r22, 0x19	; 25
    274a:	72 e0       	ldi	r23, 0x02	; 2
    274c:	82 e5       	ldi	r24, 0x52	; 82
    274e:	98 e0       	ldi	r25, 0x08	; 8
    2750:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    2754:	89 2b       	or	r24, r25
    2756:	39 f4       	brne	.+14     	; 0x2766 <CDC_Recive_Event_Process+0x9fa>
    2758:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_1ms;
    275c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    2760:	83 e0       	ldi	r24, 0x03	; 3
            }
            else if (strncmp(message, "EXP/2ms", 7) == 0)
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	65 c0       	rjmp	.+202    	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    2766:	47 e0       	ldi	r20, 0x07	; 7
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	61 e2       	ldi	r22, 0x21	; 33
    276c:	72 e0       	ldi	r23, 0x02	; 2
    276e:	82 e5       	ldi	r24, 0x52	; 82
    2770:	98 e0       	ldi	r25, 0x08	; 8
    2772:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    2776:	89 2b       	or	r24, r25
    2778:	39 f4       	brne	.+14     	; 0x2788 <CDC_Recive_Event_Process+0xa1c>
    277a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_2ms;
    277e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    2782:	84 e0       	ldi	r24, 0x04	; 4
            }
            else if (strncmp(message, "EXP/5ms", 7) == 0)
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	54 c0       	rjmp	.+168    	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    2788:	47 e0       	ldi	r20, 0x07	; 7
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	69 e2       	ldi	r22, 0x29	; 41
    278e:	72 e0       	ldi	r23, 0x02	; 2
    2790:	82 e5       	ldi	r24, 0x52	; 82
    2792:	98 e0       	ldi	r25, 0x08	; 8
    2794:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    2798:	89 2b       	or	r24, r25
    279a:	39 f4       	brne	.+14     	; 0x27aa <CDC_Recive_Event_Process+0xa3e>
    279c:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_5ms;
    27a0:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    27a4:	85 e0       	ldi	r24, 0x05	; 5
            }
            else if (strncmp(message, "EXP/10ms", 8) == 0)
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	43 c0       	rjmp	.+134    	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    27aa:	48 e0       	ldi	r20, 0x08	; 8
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	61 e3       	ldi	r22, 0x31	; 49
    27b0:	72 e0       	ldi	r23, 0x02	; 2
    27b2:	82 e5       	ldi	r24, 0x52	; 82
    27b4:	98 e0       	ldi	r25, 0x08	; 8
    27b6:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    27ba:	89 2b       	or	r24, r25
    27bc:	39 f4       	brne	.+14     	; 0x27cc <CDC_Recive_Event_Process+0xa60>
    27be:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_10ms;
    27c2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    27c6:	86 e0       	ldi	r24, 0x06	; 6
            }
            else if (strncmp(message, "EXP/20ms", 8) == 0)
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	32 c0       	rjmp	.+100    	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    27cc:	48 e0       	ldi	r20, 0x08	; 8
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	6a e3       	ldi	r22, 0x3A	; 58
    27d2:	72 e0       	ldi	r23, 0x02	; 2
    27d4:	82 e5       	ldi	r24, 0x52	; 82
    27d6:	98 e0       	ldi	r25, 0x08	; 8
    27d8:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    27dc:	89 2b       	or	r24, r25
    27de:	39 f4       	brne	.+14     	; 0x27ee <CDC_Recive_Event_Process+0xa82>
    27e0:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_20ms;
    27e4:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    27e8:	87 e0       	ldi	r24, 0x07	; 7
            }
            else if (strncmp(message, "EXP/50ms", 8) == 0)
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	21 c0       	rjmp	.+66     	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    27ee:	48 e0       	ldi	r20, 0x08	; 8
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	63 e4       	ldi	r22, 0x43	; 67
    27f4:	72 e0       	ldi	r23, 0x02	; 2
    27f6:	82 e5       	ldi	r24, 0x52	; 82
    27f8:	98 e0       	ldi	r25, 0x08	; 8
    27fa:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    27fe:	89 2b       	or	r24, r25
    2800:	39 f4       	brne	.+14     	; 0x2810 <CDC_Recive_Event_Process+0xaa4>
    2802:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_50ms;
    2806:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    280a:	88 e0       	ldi	r24, 0x08	; 8
            }
            else if (strncmp(message, "EXP/100ms", 9) == 0)
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	10 c0       	rjmp	.+32     	; 0x2830 <CDC_Recive_Event_Process+0xac4>
    2810:	49 e0       	ldi	r20, 0x09	; 9
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	6c e4       	ldi	r22, 0x4C	; 76
    2816:	72 e0       	ldi	r23, 0x02	; 2
    2818:	82 e5       	ldi	r24, 0x52	; 82
    281a:	98 e0       	ldi	r25, 0x08	; 8
    281c:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <strncmp>
            {
                auto_exposure = 0;
    2820:	89 2b       	or	r24, r25
    2822:	51 f4       	brne	.+20     	; 0x2838 <CDC_Recive_Event_Process+0xacc>
    2824:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_100ms;
    2828:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <auto_exposure>
    282c:	89 e0       	ldi	r24, 0x09	; 9
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <exposure_time_sel+0x1>
            }
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "ACK\n");
    2834:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <exposure_time_sel>
        }
        else
        {
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "NAK\n");
    2838:	60 e9       	ldi	r22, 0x90	; 144
    283a:	71 e0       	ldi	r23, 0x01	; 1
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <CDC_Recive_Event_Process+0xad6>
    283e:	66 e5       	ldi	r22, 0x56	; 86
    2840:	72 e0       	ldi	r23, 0x02	; 2
    2842:	80 e0       	ldi	r24, 0x00	; 0
        }
        memset(cdc_recive_buffer, 0, 32);
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	64 d5       	rcall	.+2760   	; 0x3310 <CDC_Device_SendString>
    2848:	80 e2       	ldi	r24, 0x20	; 32
    284a:	e2 e5       	ldi	r30, 0x52	; 82
    284c:	f8 e0       	ldi	r31, 0x08	; 8
    284e:	df 01       	movw	r26, r30
    2850:	1d 92       	st	X+, r1
        cdc_recive_index = 0;
    2852:	8a 95       	dec	r24
    2854:	e9 f7       	brne	.-6      	; 0x2850 <CDC_Recive_Event_Process+0xae4>
    2856:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <cdc_recive_index+0x1>
    }
}
    285a:	10 92 50 08 	sts	0x0850, r1	; 0x800850 <cdc_recive_index>
    285e:	c4 57       	subi	r28, 0x74	; 116
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	df 90       	pop	r13
    287a:	cf 90       	pop	r12
    287c:	bf 90       	pop	r11
    287e:	af 90       	pop	r10
    2880:	9f 90       	pop	r9
    2882:	8f 90       	pop	r8
    2884:	7f 90       	pop	r7
    2886:	6f 90       	pop	r6
    2888:	5f 90       	pop	r5
    288a:	4f 90       	pop	r4
    288c:	3f 90       	pop	r3
    288e:	2f 90       	pop	r2
    2890:	08 95       	ret

00002892 <main>:

int main(void)
{
    SetupHardware();
    2892:	0e 94 41 0a 	call	0x1482	; 0x1482 <SetupHardware>

    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2896:	6c e5       	ldi	r22, 0x5C	; 92
    2898:	72 e0       	ldi	r23, 0x02	; 2
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	15 d6       	rcall	.+3114   	; 0x34ca <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    28a0:	78 94       	sei

    GlobalInterruptEnable();

    c12880ma_read();
    28a2:	0e 94 82 09 	call	0x1304	; 0x1304 <c12880ma_read>

    temperature = adc_temp_read();
    28a6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <adc_temp_read>

    for (;;)
    {
        temperature = adc_temp_read();
    28aa:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <adc_temp_read>
    28ae:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <temperature>
    28b2:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <temperature+0x1>
    28b6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temperature+0x2>
    28ba:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <temperature+0x3>
        status = check_status();
    28be:	0e 94 06 0a 	call	0x140c	; 0x140c <check_status>
    28c2:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <status+0x1>

        CDC_Recive_Event_Process();
    28c6:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <status>
        CDC_Recive_Event();

        CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    28ca:	50 da       	rcall	.-2912   	; 0x1d6c <CDC_Recive_Event_Process>
    28cc:	34 da       	rcall	.-2968   	; 0x1d36 <CDC_Recive_Event>
        USB_USBTask();
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	a7 d5       	rcall	.+2894   	; 0x3422 <CDC_Device_USBTask>
    28d4:	de d4       	rcall	.+2492   	; 0x3292 <USB_USBTask>
    28d6:	e9 cf       	rjmp	.-46     	; 0x28aa <main+0x18>

000028d8 <spi_init>:
#define DD_MOSI DDB2
#define DD_SCK DDB1

void spi_init()
{
    DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK);
    28d8:	84 b1       	in	r24, 0x04	; 4
    28da:	86 60       	ori	r24, 0x06	; 6
    28dc:	84 b9       	out	0x04, r24	; 4
    SPCR = (1 << SPE) | (1 << MSTR);// | (1 << SPR0);// | (1 << CPOL) | (1 << CPHA);
    28de:	80 e5       	ldi	r24, 0x50	; 80
    28e0:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X);
    28e2:	8d b5       	in	r24, 0x2d	; 45
    28e4:	81 60       	ori	r24, 0x01	; 1
    28e6:	8d bd       	out	0x2d, r24	; 45
    28e8:	08 95       	ret

000028ea <spi_transfer>:
}

uint8_t spi_transfer(uint8_t value)
{
    SPDR = value;
    28ea:	8e bd       	out	0x2e, r24	; 46
    asm volatile("nop");
    28ec:	00 00       	nop
    while (!(SPSR & (1 << SPIF)));
    28ee:	0d b4       	in	r0, 0x2d	; 45
    28f0:	07 fe       	sbrs	r0, 7
    28f2:	fd cf       	rjmp	.-6      	; 0x28ee <spi_transfer+0x4>

    return SPDR;
    28f4:	8e b5       	in	r24, 0x2e	; 46
    28f6:	08 95       	ret

000028f8 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    28f8:	29 2f       	mov	r18, r25
    28fa:	33 27       	eor	r19, r19
    28fc:	22 30       	cpi	r18, 0x02	; 2
    28fe:	31 05       	cpc	r19, r1
    2900:	59 f0       	breq	.+22     	; 0x2918 <CALLBACK_USB_GetDescriptor+0x20>
    2902:	23 30       	cpi	r18, 0x03	; 3
    2904:	31 05       	cpc	r19, r1
    2906:	69 f0       	breq	.+26     	; 0x2922 <CALLBACK_USB_GetDescriptor+0x2a>
    2908:	21 30       	cpi	r18, 0x01	; 1
    290a:	31 05       	cpc	r19, r1
    290c:	e9 f4       	brne	.+58     	; 0x2948 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    290e:	82 e1       	ldi	r24, 0x12	; 18
    2910:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    2912:	22 e3       	ldi	r18, 0x32	; 50
    2914:	3f e0       	ldi	r19, 0x0F	; 15
    2916:	1c c0       	rjmp	.+56     	; 0x2950 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    2918:	8e e3       	ldi	r24, 0x3E	; 62
    291a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    291c:	24 ef       	ldi	r18, 0xF4	; 244
    291e:	3e e0       	ldi	r19, 0x0E	; 14
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    2920:	17 c0       	rjmp	.+46     	; 0x2950 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
    2922:	99 27       	eor	r25, r25
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	91 05       	cpc	r25, r1
    2928:	49 f0       	breq	.+18     	; 0x293c <CALLBACK_USB_GetDescriptor+0x44>
    292a:	28 f0       	brcs	.+10     	; 0x2936 <CALLBACK_USB_GetDescriptor+0x3e>
    292c:	02 97       	sbiw	r24, 0x02	; 2
    292e:	61 f4       	brne	.+24     	; 0x2948 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    2930:	ea ec       	ldi	r30, 0xCA	; 202
    2932:	fe e0       	ldi	r31, 0x0E	; 14
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    2936:	e0 ef       	ldi	r30, 0xF0	; 240
    2938:	fe e0       	ldi	r31, 0x0E	; 14
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    293c:	e0 ee       	ldi	r30, 0xE0	; 224
    293e:	fe e0       	ldi	r31, 0x0E	; 14
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    2940:	84 91       	lpm	r24, Z
    2942:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    2944:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    2950:	fa 01       	movw	r30, r20
    2952:	31 83       	std	Z+1, r19	; 0x01
    2954:	20 83       	st	Z, r18
	return Size;
}
    2956:	08 95       	ret

00002958 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	ec 01       	movw	r28, r24
    296a:	8b 01       	movw	r16, r22
    296c:	7a 01       	movw	r14, r20
    296e:	8d d1       	rcall	.+794    	; 0x2c8a <Endpoint_WaitUntilReady>
    2970:	81 11       	cpse	r24, r1
    2972:	32 c0       	rjmp	.+100    	; 0x29d8 <Endpoint_Write_Stream_LE+0x80>
    2974:	e1 14       	cp	r14, r1
    2976:	f1 04       	cpc	r15, r1
    2978:	39 f0       	breq	.+14     	; 0x2988 <Endpoint_Write_Stream_LE+0x30>
    297a:	f7 01       	movw	r30, r14
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	08 1b       	sub	r16, r24
    2982:	19 0b       	sbc	r17, r25
    2984:	c8 0f       	add	r28, r24
    2986:	d9 1f       	adc	r29, r25
    2988:	c1 2c       	mov	r12, r1
    298a:	d1 2c       	mov	r13, r1
    298c:	01 15       	cp	r16, r1
    298e:	11 05       	cpc	r17, r1
    2990:	11 f1       	breq	.+68     	; 0x29d6 <Endpoint_Write_Stream_LE+0x7e>
    2992:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2996:	85 fd       	sbrc	r24, 5
    2998:	15 c0       	rjmp	.+42     	; 0x29c4 <Endpoint_Write_Stream_LE+0x6c>
    299a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    299e:	8e 77       	andi	r24, 0x7E	; 126
    29a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29a4:	e1 14       	cp	r14, r1
    29a6:	f1 04       	cpc	r15, r1
    29a8:	49 f0       	breq	.+18     	; 0x29bc <Endpoint_Write_Stream_LE+0x64>
    29aa:	f7 01       	movw	r30, r14
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	c8 0e       	add	r12, r24
    29b2:	d9 1e       	adc	r13, r25
    29b4:	d1 82       	std	Z+1, r13	; 0x01
    29b6:	c0 82       	st	Z, r12
    29b8:	85 e0       	ldi	r24, 0x05	; 5
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <Endpoint_Write_Stream_LE+0x80>
    29bc:	66 d1       	rcall	.+716    	; 0x2c8a <Endpoint_WaitUntilReady>
    29be:	88 23       	and	r24, r24
    29c0:	29 f3       	breq	.-54     	; 0x298c <Endpoint_Write_Stream_LE+0x34>
    29c2:	0a c0       	rjmp	.+20     	; 0x29d8 <Endpoint_Write_Stream_LE+0x80>
    29c4:	89 91       	ld	r24, Y+
    29c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    29ca:	01 50       	subi	r16, 0x01	; 1
    29cc:	11 09       	sbc	r17, r1
    29ce:	ff ef       	ldi	r31, 0xFF	; 255
    29d0:	cf 1a       	sub	r12, r31
    29d2:	df 0a       	sbc	r13, r31
    29d4:	db cf       	rjmp	.-74     	; 0x298c <Endpoint_Write_Stream_LE+0x34>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ff 90       	pop	r15
    29e2:	ef 90       	pop	r14
    29e4:	df 90       	pop	r13
    29e6:	cf 90       	pop	r12
    29e8:	08 95       	ret

000029ea <Endpoint_Write_Control_Stream_LE>:
    29ea:	20 91 7e 08 	lds	r18, 0x087E	; 0x80087e <USB_ControlRequest+0x6>
    29ee:	30 91 7f 08 	lds	r19, 0x087F	; 0x80087f <USB_ControlRequest+0x7>
    29f2:	26 17       	cp	r18, r22
    29f4:	37 07       	cpc	r19, r23
    29f6:	48 f0       	brcs	.+18     	; 0x2a0a <Endpoint_Write_Control_Stream_LE+0x20>
    29f8:	61 15       	cp	r22, r1
    29fa:	71 05       	cpc	r23, r1
    29fc:	39 f4       	brne	.+14     	; 0x2a0c <Endpoint_Write_Control_Stream_LE+0x22>
    29fe:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a02:	2e 77       	andi	r18, 0x7E	; 126
    2a04:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <Endpoint_Write_Control_Stream_LE+0x22>
    2a0a:	b9 01       	movw	r22, r18
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	61 15       	cp	r22, r1
    2a12:	71 05       	cpc	r23, r1
    2a14:	79 f1       	breq	.+94     	; 0x2a74 <Endpoint_Write_Control_Stream_LE+0x8a>
    2a16:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>
    2a1a:	88 23       	and	r24, r24
    2a1c:	f1 f1       	breq	.+124    	; 0x2a9a <Endpoint_Write_Control_Stream_LE+0xb0>
    2a1e:	85 30       	cpi	r24, 0x05	; 5
    2a20:	f1 f1       	breq	.+124    	; 0x2a9e <Endpoint_Write_Control_Stream_LE+0xb4>
    2a22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a26:	83 fd       	sbrc	r24, 3
    2a28:	3c c0       	rjmp	.+120    	; 0x2aa2 <Endpoint_Write_Control_Stream_LE+0xb8>
    2a2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a2e:	82 fd       	sbrc	r24, 2
    2a30:	2e c0       	rjmp	.+92     	; 0x2a8e <Endpoint_Write_Control_Stream_LE+0xa4>
    2a32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a36:	80 ff       	sbrs	r24, 0
    2a38:	eb cf       	rjmp	.-42     	; 0x2a10 <Endpoint_Write_Control_Stream_LE+0x26>
    2a3a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2a3e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	92 2b       	or	r25, r18
    2a46:	61 15       	cp	r22, r1
    2a48:	71 05       	cpc	r23, r1
    2a4a:	51 f0       	breq	.+20     	; 0x2a60 <Endpoint_Write_Control_Stream_LE+0x76>
    2a4c:	88 30       	cpi	r24, 0x08	; 8
    2a4e:	91 05       	cpc	r25, r1
    2a50:	38 f4       	brcc	.+14     	; 0x2a60 <Endpoint_Write_Control_Stream_LE+0x76>
    2a52:	21 91       	ld	r18, Z+
    2a54:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a58:	61 50       	subi	r22, 0x01	; 1
    2a5a:	71 09       	sbc	r23, r1
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	f3 cf       	rjmp	.-26     	; 0x2a46 <Endpoint_Write_Control_Stream_LE+0x5c>
    2a60:	21 e0       	ldi	r18, 0x01	; 1
    2a62:	08 97       	sbiw	r24, 0x08	; 8
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <Endpoint_Write_Control_Stream_LE+0x7e>
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a6c:	8e 77       	andi	r24, 0x7E	; 126
    2a6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a72:	ce cf       	rjmp	.-100    	; 0x2a10 <Endpoint_Write_Control_Stream_LE+0x26>
    2a74:	21 11       	cpse	r18, r1
    2a76:	cf cf       	rjmp	.-98     	; 0x2a16 <Endpoint_Write_Control_Stream_LE+0x2c>
    2a78:	0a c0       	rjmp	.+20     	; 0x2a8e <Endpoint_Write_Control_Stream_LE+0xa4>
    2a7a:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>
    2a7e:	88 23       	and	r24, r24
    2a80:	61 f0       	breq	.+24     	; 0x2a9a <Endpoint_Write_Control_Stream_LE+0xb0>
    2a82:	85 30       	cpi	r24, 0x05	; 5
    2a84:	61 f0       	breq	.+24     	; 0x2a9e <Endpoint_Write_Control_Stream_LE+0xb4>
    2a86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a8a:	83 fd       	sbrc	r24, 3
    2a8c:	0a c0       	rjmp	.+20     	; 0x2aa2 <Endpoint_Write_Control_Stream_LE+0xb8>
    2a8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a92:	82 ff       	sbrs	r24, 2
    2a94:	f2 cf       	rjmp	.-28     	; 0x2a7a <Endpoint_Write_Control_Stream_LE+0x90>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	08 95       	ret
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	08 95       	ret
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	08 95       	ret
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	08 95       	ret

00002aa6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2aa6:	20 91 7e 08 	lds	r18, 0x087E	; 0x80087e <USB_ControlRequest+0x6>
    2aaa:	30 91 7f 08 	lds	r19, 0x087F	; 0x80087f <USB_ControlRequest+0x7>
    2aae:	26 17       	cp	r18, r22
    2ab0:	37 07       	cpc	r19, r23
    2ab2:	48 f0       	brcs	.+18     	; 0x2ac6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2ab4:	61 15       	cp	r22, r1
    2ab6:	71 05       	cpc	r23, r1
    2ab8:	39 f4       	brne	.+14     	; 0x2ac8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2aba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2abe:	2e 77       	andi	r18, 0x7E	; 126
    2ac0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <Endpoint_Write_Control_PStream_LE+0x22>
    2ac6:	b9 01       	movw	r22, r18
    2ac8:	fc 01       	movw	r30, r24
    2aca:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2acc:	61 15       	cp	r22, r1
    2ace:	71 05       	cpc	r23, r1
    2ad0:	91 f1       	breq	.+100    	; 0x2b36 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2ad2:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2ad6:	88 23       	and	r24, r24
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <Endpoint_Write_Control_PStream_LE+0x36>
    2ada:	40 c0       	rjmp	.+128    	; 0x2b5c <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2adc:	85 30       	cpi	r24, 0x05	; 5
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <Endpoint_Write_Control_PStream_LE+0x3c>
    2ae0:	3f c0       	rjmp	.+126    	; 0x2b60 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2ae2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2ae6:	83 fd       	sbrc	r24, 3
    2ae8:	3d c0       	rjmp	.+122    	; 0x2b64 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2aea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2aee:	82 fd       	sbrc	r24, 2
    2af0:	2f c0       	rjmp	.+94     	; 0x2b50 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2af2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    2af6:	80 ff       	sbrs	r24, 0
    2af8:	e9 cf       	rjmp	.-46     	; 0x2acc <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2afa:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2afe:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2b06:	61 15       	cp	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	59 f0       	breq	.+22     	; 0x2b22 <Endpoint_Write_Control_PStream_LE+0x7c>
    2b0c:	88 30       	cpi	r24, 0x08	; 8
    2b0e:	91 05       	cpc	r25, r1
    2b10:	40 f4       	brcc	.+16     	; 0x2b22 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2b12:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2b14:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2b18:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2b1a:	61 50       	subi	r22, 0x01	; 1
    2b1c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	f2 cf       	rjmp	.-28     	; 0x2b06 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2b22:	21 e0       	ldi	r18, 0x01	; 1
    2b24:	08 97       	sbiw	r24, 0x08	; 8
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <Endpoint_Write_Control_PStream_LE+0x84>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b2e:	8e 77       	andi	r24, 0x7E	; 126
    2b30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b34:	cb cf       	rjmp	.-106    	; 0x2acc <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2b36:	21 11       	cpse	r18, r1
    2b38:	cc cf       	rjmp	.-104    	; 0x2ad2 <Endpoint_Write_Control_PStream_LE+0x2c>
    2b3a:	0a c0       	rjmp	.+20     	; 0x2b50 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2b3c:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2b40:	88 23       	and	r24, r24
    2b42:	61 f0       	breq	.+24     	; 0x2b5c <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2b44:	85 30       	cpi	r24, 0x05	; 5
    2b46:	61 f0       	breq	.+24     	; 0x2b60 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2b48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2b4c:	83 fd       	sbrc	r24, 3
    2b4e:	0a c0       	rjmp	.+20     	; 0x2b64 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2b50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2b54:	82 ff       	sbrs	r24, 2
    2b56:	f2 cf       	rjmp	.-28     	; 0x2b3c <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2b66:	08 95       	ret

00002b68 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    2b68:	98 2f       	mov	r25, r24
    2b6a:	97 30       	cpi	r25, 0x07	; 7
    2b6c:	68 f5       	brcc	.+90     	; 0x2bc8 <Endpoint_ConfigureEndpoint_Prv+0x60>
    2b6e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2b72:	98 17       	cp	r25, r24
    2b74:	39 f0       	breq	.+14     	; 0x2b84 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    2b76:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2b7a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2b7e:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <Endpoint_ConfigureEndpoint_Prv+0x22>
    2b84:	24 2f       	mov	r18, r20
    2b86:	76 2f       	mov	r23, r22
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	21 fd       	sbrc	r18, 1
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    2b8e:	9f 5f       	subi	r25, 0xFF	; 255
    2b90:	ec cf       	rjmp	.-40     	; 0x2b6a <Endpoint_ConfigureEndpoint_Prv+0x2>
    2b92:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b96:	3e 7f       	andi	r19, 0xFE	; 254
    2b98:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b9c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2ba0:	3d 7f       	andi	r19, 0xFD	; 253
    2ba2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2ba6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2baa:	31 60       	ori	r19, 0x01	; 1
    2bac:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2bb0:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2bb4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2bb8:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2bbc:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    2bc0:	27 fd       	sbrc	r18, 7
    2bc2:	e5 cf       	rjmp	.-54     	; 0x2b8e <Endpoint_ConfigureEndpoint_Prv+0x26>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	08 95       	ret
    2bc8:	8f 70       	andi	r24, 0x0F	; 15
    2bca:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	08 95       	ret

00002bd2 <Endpoint_ConfigureEndpointTable>:
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	06 2f       	mov	r16, r22
    2bdc:	ec 01       	movw	r28, r24
    2bde:	10 e0       	ldi	r17, 0x00	; 0
    2be0:	10 17       	cp	r17, r16
    2be2:	71 f1       	breq	.+92     	; 0x2c40 <Endpoint_ConfigureEndpointTable+0x6e>
    2be4:	68 81       	ld	r22, Y
    2be6:	61 11       	cpse	r22, r1
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <Endpoint_ConfigureEndpointTable+0x1e>
    2bea:	1f 5f       	subi	r17, 0xFF	; 255
    2bec:	25 96       	adiw	r28, 0x05	; 5
    2bee:	f8 cf       	rjmp	.-16     	; 0x2be0 <Endpoint_ConfigureEndpointTable+0xe>
    2bf0:	2c 81       	ldd	r18, Y+4	; 0x04
    2bf2:	a9 81       	ldd	r26, Y+1	; 0x01
    2bf4:	ba 81       	ldd	r27, Y+2	; 0x02
    2bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf8:	86 2f       	mov	r24, r22
    2bfa:	8f 70       	andi	r24, 0x0F	; 15
    2bfc:	87 30       	cpi	r24, 0x07	; 7
    2bfe:	10 f0       	brcs	.+4      	; 0x2c04 <Endpoint_ConfigureEndpointTable+0x32>
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	1f c0       	rjmp	.+62     	; 0x2c42 <Endpoint_ConfigureEndpointTable+0x70>
    2c04:	22 30       	cpi	r18, 0x02	; 2
    2c06:	10 f4       	brcc	.+4      	; 0x2c0c <Endpoint_ConfigureEndpointTable+0x3a>
    2c08:	42 e0       	ldi	r20, 0x02	; 2
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <Endpoint_ConfigureEndpointTable+0x3c>
    2c0c:	46 e0       	ldi	r20, 0x06	; 6
    2c0e:	e8 e0       	ldi	r30, 0x08	; 8
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	ea 17       	cp	r30, r26
    2c16:	fb 07       	cpc	r31, r27
    2c18:	20 f4       	brcc	.+8      	; 0x2c22 <Endpoint_ConfigureEndpointTable+0x50>
    2c1a:	2f 5f       	subi	r18, 0xFF	; 255
    2c1c:	ee 0f       	add	r30, r30
    2c1e:	ff 1f       	adc	r31, r31
    2c20:	f9 cf       	rjmp	.-14     	; 0x2c14 <Endpoint_ConfigureEndpointTable+0x42>
    2c22:	22 95       	swap	r18
    2c24:	20 7f       	andi	r18, 0xF0	; 240
    2c26:	42 2b       	or	r20, r18
    2c28:	50 e4       	ldi	r21, 0x40	; 64
    2c2a:	95 9f       	mul	r25, r21
    2c2c:	90 01       	movw	r18, r0
    2c2e:	11 24       	eor	r1, r1
    2c30:	66 1f       	adc	r22, r22
    2c32:	66 27       	eor	r22, r22
    2c34:	66 1f       	adc	r22, r22
    2c36:	62 2b       	or	r22, r18
    2c38:	97 df       	rcall	.-210    	; 0x2b68 <Endpoint_ConfigureEndpoint_Prv>
    2c3a:	81 11       	cpse	r24, r1
    2c3c:	d6 cf       	rjmp	.-84     	; 0x2bea <Endpoint_ConfigureEndpointTable+0x18>
    2c3e:	e0 cf       	rjmp	.-64     	; 0x2c00 <Endpoint_ConfigureEndpointTable+0x2e>
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	08 95       	ret

00002c4c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2c4c:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <USB_ControlRequest>
    2c50:	87 ff       	sbrs	r24, 7
    2c52:	11 c0       	rjmp	.+34     	; 0x2c76 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2c54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    2c58:	82 fd       	sbrc	r24, 2
    2c5a:	05 c0       	rjmp	.+10     	; 0x2c66 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2c5c:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>
    2c60:	81 11       	cpse	r24, r1
    2c62:	f8 cf       	rjmp	.-16     	; 0x2c54 <Endpoint_ClearStatusStage+0x8>
    2c64:	11 c0       	rjmp	.+34     	; 0x2c88 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2c66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c6a:	8b 77       	andi	r24, 0x7B	; 123
    2c6c:	0b c0       	rjmp	.+22     	; 0x2c84 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2c6e:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>
    2c72:	88 23       	and	r24, r24
    2c74:	49 f0       	breq	.+18     	; 0x2c88 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2c76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2c7a:	80 ff       	sbrs	r24, 0
    2c7c:	f8 cf       	rjmp	.-16     	; 0x2c6e <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2c7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c82:	8e 77       	andi	r24, 0x7E	; 126
    2c84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c88:	08 95       	ret

00002c8a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2c8a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2c8e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    2c92:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2c94:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2c98:	84 2f       	mov	r24, r20
    2c9a:	81 70       	andi	r24, 0x01	; 1
    2c9c:	40 ff       	sbrs	r20, 0
    2c9e:	23 c0       	rjmp	.+70     	; 0x2ce6 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2ca0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2ca4:	80 fd       	sbrc	r24, 0
    2ca6:	1d c0       	rjmp	.+58     	; 0x2ce2 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2ca8:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2cac:	88 23       	and	r24, r24
    2cae:	99 f0       	breq	.+38     	; 0x2cd6 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2cb0:	85 30       	cpi	r24, 0x05	; 5
    2cb2:	99 f0       	breq	.+38     	; 0x2cda <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2cb4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2cb8:	85 fd       	sbrc	r24, 5
    2cba:	11 c0       	rjmp	.+34     	; 0x2cde <Endpoint_WaitUntilReady+0x54>
    2cbc:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2cc0:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2cc4:	24 17       	cp	r18, r20
    2cc6:	35 07       	cpc	r19, r21
    2cc8:	29 f3       	breq	.-54     	; 0x2c94 <Endpoint_WaitUntilReady+0xa>
    2cca:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2ccc:	11 f0       	breq	.+4      	; 0x2cd2 <Endpoint_WaitUntilReady+0x48>
    2cce:	9a 01       	movw	r18, r20
    2cd0:	e1 cf       	rjmp	.-62     	; 0x2c94 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    2cd2:	84 e0       	ldi	r24, 0x04	; 4
    2cd4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2cda:	83 e0       	ldi	r24, 0x03	; 3
    2cdc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ce6:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2cea:	42 ff       	sbrs	r20, 2
    2cec:	dd cf       	rjmp	.-70     	; 0x2ca8 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2cee:	08 95       	ret

00002cf0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    2cf6:	df 93       	push	r29
    2cf8:	4b d0       	rcall	.+150    	; 0x2d90 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2cfa:	52 d0       	rcall	.+164    	; 0x2da0 <USB_INT_ClearAllInterrupts>
    2cfc:	c8 ed       	ldi	r28, 0xD8	; 216
    2cfe:	d0 e0       	ldi	r29, 0x00	; 0
    2d00:	88 81       	ld	r24, Y
    2d02:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
    2d04:	88 83       	st	Y, r24
    2d06:	88 81       	ld	r24, Y
    2d08:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2d0a:	88 83       	st	Y, r24
    2d0c:	88 81       	ld	r24, Y
    2d0e:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2d10:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2d12:	19 bc       	out	0x29, r1	; 41
    2d14:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    2d18:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2d1c:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2d20:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2d24:	00 ee       	ldi	r16, 0xE0	; 224
    2d26:	10 e0       	ldi	r17, 0x00	; 0
    2d28:	f8 01       	movw	r30, r16
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2d2e:	80 83       	st	Z, r24
    2d30:	88 81       	ld	r24, Y
    2d32:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2d34:	88 83       	st	Y, r24
    2d36:	42 e0       	ldi	r20, 0x02	; 2
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2d3c:	15 df       	rcall	.-470    	; 0x2b68 <Endpoint_ConfigureEndpoint_Prv>
    2d3e:	e1 ee       	ldi	r30, 0xE1	; 225
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2d46:	80 83       	st	Z, r24
    2d48:	e2 ee       	ldi	r30, 0xE2	; 226
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2d50:	80 83       	st	Z, r24
    2d52:	80 81       	ld	r24, Z
    2d54:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2d56:	80 83       	st	Z, r24
    2d58:	f8 01       	movw	r30, r16
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2d5e:	80 83       	st	Z, r24
    2d60:	88 81       	ld	r24, Y
    2d62:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2d64:	88 83       	st	Y, r24
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2d70:	e8 ed       	ldi	r30, 0xD8	; 216
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	8f 7e       	andi	r24, 0xEF	; 239
    2d78:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2d7a:	e7 ed       	ldi	r30, 0xD7	; 215
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	81 60       	ori	r24, 0x01	; 1
    2d82:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2d84:	84 e0       	ldi	r24, 0x04	; 4
    2d86:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	80 93 76 08 	sts	0x0876, r24	; 0x800876 <USB_IsInitialized>
    2d8e:	b0 cf       	rjmp	.-160    	; 0x2cf0 <USB_ResetInterface>

00002d90 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2d90:	e8 ed       	ldi	r30, 0xD8	; 216
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8e 7f       	andi	r24, 0xFE	; 254
    2d98:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2d9a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d9e:	08 95       	ret

00002da0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2da0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2da4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2da8:	08 95       	ret

00002daa <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	2f 93       	push	r18
    2db6:	3f 93       	push	r19
    2db8:	4f 93       	push	r20
    2dba:	5f 93       	push	r21
    2dbc:	6f 93       	push	r22
    2dbe:	7f 93       	push	r23
    2dc0:	8f 93       	push	r24
    2dc2:	9f 93       	push	r25
    2dc4:	af 93       	push	r26
    2dc6:	bf 93       	push	r27
    2dc8:	ef 93       	push	r30
    2dca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2dcc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2dd0:	82 ff       	sbrs	r24, 2
    2dd2:	0a c0       	rjmp	.+20     	; 0x2de8 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2dd4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2dd8:	82 ff       	sbrs	r24, 2
    2dda:	06 c0       	rjmp	.+12     	; 0x2de8 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2ddc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2de0:	8b 7f       	andi	r24, 0xFB	; 251
    2de2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2de6:	54 d2       	rcall	.+1192   	; 0x3290 <USB_Event_Stub>
    2de8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2dec:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2dee:	1f c0       	rjmp	.+62     	; 0x2e2e <__vector_10+0x84>
    2df0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2df4:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2df6:	1b c0       	rjmp	.+54     	; 0x2e2e <__vector_10+0x84>
    2df8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    2dfc:	8e 7f       	andi	r24, 0xFE	; 254
    2dfe:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2e02:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2e06:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2e08:	0d c0       	rjmp	.+26     	; 0x2e24 <__vector_10+0x7a>
    2e0a:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2e0c:	89 bd       	out	0x29, r24	; 41
    2e0e:	82 e1       	ldi	r24, 0x12	; 18
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2e10:	89 bd       	out	0x29, r24	; 41
    2e12:	09 b4       	in	r0, 0x29	; 41
    2e14:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2e16:	fd cf       	rjmp	.-6      	; 0x2e12 <__vector_10+0x68>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2e1e:	0e 94 c3 08 	call	0x1186	; 0x1186 <EVENT_USB_Device_Connect>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2e22:	05 c0       	rjmp	.+10     	; 0x2e2e <__vector_10+0x84>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2e24:	19 bc       	out	0x29, r1	; 41
    2e26:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    2e2a:	0e 94 c4 08 	call	0x1188	; 0x1188 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2e2e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2e32:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2e34:	18 c0       	rjmp	.+48     	; 0x2e66 <__vector_10+0xbc>
    2e36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e3a:	80 ff       	sbrs	r24, 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2e3c:	14 c0       	rjmp	.+40     	; 0x2e66 <__vector_10+0xbc>
    2e3e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e42:	8e 7f       	andi	r24, 0xFE	; 254
    2e44:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2e48:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e4c:	80 61       	ori	r24, 0x10	; 16
    2e4e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2e52:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2e56:	80 62       	ori	r24, 0x20	; 32
    2e58:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2e5c:	19 bc       	out	0x29, r1	; 41
    2e5e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    2e60:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <USB_DeviceState>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2e64:	15 d2       	rcall	.+1066   	; 0x3290 <USB_Event_Stub>
    2e66:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2e6a:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2e6c:	2f c0       	rjmp	.+94     	; 0x2ecc <__vector_10+0x122>
    2e6e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e72:	84 ff       	sbrs	r24, 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2e74:	2b c0       	rjmp	.+86     	; 0x2ecc <__vector_10+0x122>
    2e76:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2e78:	89 bd       	out	0x29, r24	; 41
    2e7a:	82 e1       	ldi	r24, 0x12	; 18
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2e7c:	89 bd       	out	0x29, r24	; 41
    2e7e:	09 b4       	in	r0, 0x29	; 41
    2e80:	00 fe       	sbrs	r0, 0
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2e82:	fd cf       	rjmp	.-6      	; 0x2e7e <__vector_10+0xd4>
    2e84:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2e88:	8f 7d       	andi	r24, 0xDF	; 223
    2e8a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2e8e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e92:	8f 7e       	andi	r24, 0xEF	; 239
    2e94:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2e98:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e9c:	8f 7e       	andi	r24, 0xEF	; 239
    2e9e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2ea2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ea6:	81 60       	ori	r24, 0x01	; 1
    2ea8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2eac:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <USB_Device_ConfigurationNumber>
    2eb0:	88 23       	and	r24, r24
		  USB_DeviceState = DEVICE_STATE_Configured;
    2eb2:	11 f0       	breq	.+4      	; 0x2eb8 <__vector_10+0x10e>
    2eb4:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2eb6:	07 c0       	rjmp	.+14     	; 0x2ec6 <__vector_10+0x11c>
    2eb8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2ebc:	87 fd       	sbrc	r24, 7
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <__vector_10+0x11a>
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <__vector_10+0x11c>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2ec4:	83 e0       	ldi	r24, 0x03	; 3
    2ec6:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <USB_DeviceState>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2eca:	e2 d1       	rcall	.+964    	; 0x3290 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2ecc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2ed0:	83 ff       	sbrs	r24, 3
    2ed2:	27 c0       	rjmp	.+78     	; 0x2f22 <__vector_10+0x178>
    2ed4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2ed8:	83 ff       	sbrs	r24, 3
    2eda:	23 c0       	rjmp	.+70     	; 0x2f22 <__vector_10+0x178>
    2edc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ee0:	87 7f       	andi	r24, 0xF7	; 247
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2ee2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
		USB_Device_ConfigurationNumber = 0;
    2ee8:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2eec:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <USB_Device_ConfigurationNumber>
    2ef0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ef4:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2ef6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2efa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2efe:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2f00:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2f08:	80 61       	ori	r24, 0x10	; 16
    2f0a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f0e:	42 e0       	ldi	r20, 0x02	; 2
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2f10:	60 e0       	ldi	r22, 0x00	; 0
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	29 de       	rcall	.-942    	; 0x2b68 <Endpoint_ConfigureEndpoint_Prv>
    2f16:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2f1a:	88 60       	ori	r24, 0x08	; 8
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2f1c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f20:	b7 d1       	rcall	.+878    	; 0x3290 <USB_Event_Stub>
    2f22:	ff 91       	pop	r31
    2f24:	ef 91       	pop	r30
    2f26:	bf 91       	pop	r27
    2f28:	af 91       	pop	r26
    2f2a:	9f 91       	pop	r25
    2f2c:	8f 91       	pop	r24
    2f2e:	7f 91       	pop	r23
    2f30:	6f 91       	pop	r22
    2f32:	5f 91       	pop	r21
    2f34:	4f 91       	pop	r20
    2f36:	3f 91       	pop	r19
    2f38:	2f 91       	pop	r18
    2f3a:	0f 90       	pop	r0
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	0f 90       	pop	r0
    2f40:	1f 90       	pop	r1
    2f42:	18 95       	reti

00002f44 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2f44:	1f 92       	push	r1
    2f46:	0f 92       	push	r0
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	0f 92       	push	r0
    2f4c:	11 24       	eor	r1, r1
    2f4e:	2f 93       	push	r18
    2f50:	3f 93       	push	r19
    2f52:	4f 93       	push	r20
    2f54:	5f 93       	push	r21
    2f56:	6f 93       	push	r22
    2f58:	7f 93       	push	r23
    2f5a:	8f 93       	push	r24
    2f5c:	9f 93       	push	r25
    2f5e:	af 93       	push	r26
    2f60:	bf 93       	push	r27
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	ef 93       	push	r30
    2f68:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2f6a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f6e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2f70:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2f74:	d8 2f       	mov	r29, r24
    2f76:	d1 70       	andi	r29, 0x01	; 1
    2f78:	80 fd       	sbrc	r24, 0
    2f7a:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f7c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2f80:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f84:	87 7f       	andi	r24, 0xF7	; 247
    2f86:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
    2f8a:	78 94       	sei
    2f8c:	1e d0       	rcall	.+60     	; 0x2fca <USB_Device_ProcessControlRequest>
    2f8e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f92:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f96:	88 60       	ori	r24, 0x08	; 8
    2f98:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f9c:	cd 2b       	or	r28, r29
    2f9e:	cf 70       	andi	r28, 0x0F	; 15
    2fa0:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2fa4:	ff 91       	pop	r31
    2fa6:	ef 91       	pop	r30
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	bf 91       	pop	r27
    2fae:	af 91       	pop	r26
    2fb0:	9f 91       	pop	r25
    2fb2:	8f 91       	pop	r24
    2fb4:	7f 91       	pop	r23
    2fb6:	6f 91       	pop	r22
    2fb8:	5f 91       	pop	r21
    2fba:	4f 91       	pop	r20
    2fbc:	3f 91       	pop	r19
    2fbe:	2f 91       	pop	r18
    2fc0:	0f 90       	pop	r0
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	0f 90       	pop	r0
    2fc6:	1f 90       	pop	r1
    2fc8:	18 95       	reti

00002fca <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	aa 97       	sbiw	r28, 0x2a	; 42
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	e8 e7       	ldi	r30, 0x78	; 120
    2fe2:	f8 e0       	ldi	r31, 0x08	; 8
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2fe4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2fe8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2fea:	28 e0       	ldi	r18, 0x08	; 8
    2fec:	e0 38       	cpi	r30, 0x80	; 128
    2fee:	f2 07       	cpc	r31, r18
    2ff0:	c9 f7       	brne	.-14     	; 0x2fe4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2ff2:	0e 94 c9 08 	call	0x1192	; 0x1192 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2ff6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    2ffa:	83 ff       	sbrs	r24, 3
    2ffc:	31 c1       	rjmp	.+610    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2ffe:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    3002:	90 91 79 08 	lds	r25, 0x0879	; 0x800879 <USB_ControlRequest+0x1>
    3006:	95 30       	cpi	r25, 0x05	; 5
    3008:	09 f4       	brne	.+2      	; 0x300c <USB_Device_ProcessControlRequest+0x42>
    300a:	83 c0       	rjmp	.+262    	; 0x3112 <USB_Device_ProcessControlRequest+0x148>
    300c:	30 f4       	brcc	.+12     	; 0x301a <USB_Device_ProcessControlRequest+0x50>
    300e:	91 30       	cpi	r25, 0x01	; 1
    3010:	a9 f1       	breq	.+106    	; 0x307c <USB_Device_ProcessControlRequest+0xb2>
    3012:	68 f0       	brcs	.+26     	; 0x302e <USB_Device_ProcessControlRequest+0x64>
    3014:	93 30       	cpi	r25, 0x03	; 3
    3016:	91 f1       	breq	.+100    	; 0x307c <USB_Device_ProcessControlRequest+0xb2>
    3018:	23 c1       	rjmp	.+582    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    301a:	98 30       	cpi	r25, 0x08	; 8
    301c:	09 f4       	brne	.+2      	; 0x3020 <USB_Device_ProcessControlRequest+0x56>
    301e:	ef c0       	rjmp	.+478    	; 0x31fe <USB_Device_ProcessControlRequest+0x234>
    3020:	99 30       	cpi	r25, 0x09	; 9
    3022:	09 f4       	brne	.+2      	; 0x3026 <USB_Device_ProcessControlRequest+0x5c>
    3024:	fb c0       	rjmp	.+502    	; 0x321c <USB_Device_ProcessControlRequest+0x252>
    3026:	96 30       	cpi	r25, 0x06	; 6
    3028:	09 f0       	breq	.+2      	; 0x302c <USB_Device_ProcessControlRequest+0x62>
    302a:	1a c1       	rjmp	.+564    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    302c:	94 c0       	rjmp	.+296    	; 0x3156 <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    302e:	80 38       	cpi	r24, 0x80	; 128
    3030:	21 f0       	breq	.+8      	; 0x303a <USB_Device_ProcessControlRequest+0x70>
    3032:	82 38       	cpi	r24, 0x82	; 130
    3034:	09 f0       	breq	.+2      	; 0x3038 <USB_Device_ProcessControlRequest+0x6e>
    3036:	14 c1       	rjmp	.+552    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    3038:	08 c0       	rjmp	.+16     	; 0x304a <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    303a:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    303e:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <USB_Device_RemoteWakeupEnabled>
    3042:	99 23       	and	r25, r25
    3044:	89 f0       	breq	.+34     	; 0x3068 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3046:	82 60       	ori	r24, 0x02	; 2
    3048:	0f c0       	rjmp	.+30     	; 0x3068 <USB_Device_ProcessControlRequest+0x9e>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    304a:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <USB_ControlRequest+0x4>
    304e:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3050:	87 30       	cpi	r24, 0x07	; 7
    3052:	08 f0       	brcs	.+2      	; 0x3056 <USB_Device_ProcessControlRequest+0x8c>
    3054:	05 c1       	rjmp	.+522    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3056:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    305a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    305e:	85 fb       	bst	r24, 5
    3060:	88 27       	eor	r24, r24
    3062:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3064:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3068:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    306c:	97 7f       	andi	r25, 0xF7	; 247
    306e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3072:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    3076:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    307a:	cc c0       	rjmp	.+408    	; 0x3214 <USB_Device_ProcessControlRequest+0x24a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    307c:	28 2f       	mov	r18, r24
    307e:	2d 7f       	andi	r18, 0xFD	; 253
    3080:	09 f0       	breq	.+2      	; 0x3084 <USB_Device_ProcessControlRequest+0xba>
    3082:	ee c0       	rjmp	.+476    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3084:	88 23       	and	r24, r24
    3086:	19 f0       	breq	.+6      	; 0x308e <USB_Device_ProcessControlRequest+0xc4>
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	61 f0       	breq	.+24     	; 0x30a4 <USB_Device_ProcessControlRequest+0xda>
    308c:	e9 c0       	rjmp	.+466    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    308e:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	09 f0       	breq	.+2      	; 0x3098 <USB_Device_ProcessControlRequest+0xce>
    3096:	e4 c0       	rjmp	.+456    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3098:	93 30       	cpi	r25, 0x03	; 3
    309a:	09 f0       	breq	.+2      	; 0x309e <USB_Device_ProcessControlRequest+0xd4>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <USB_Device_RemoteWakeupEnabled>
    30a2:	2e c0       	rjmp	.+92     	; 0x3100 <USB_Device_ProcessControlRequest+0x136>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    30a4:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
    30a8:	81 11       	cpse	r24, r1
    30aa:	2a c0       	rjmp	.+84     	; 0x3100 <USB_Device_ProcessControlRequest+0x136>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    30ac:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <USB_ControlRequest+0x4>
    30b0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    30b2:	2f ef       	ldi	r18, 0xFF	; 255
    30b4:	28 0f       	add	r18, r24
    30b6:	26 30       	cpi	r18, 0x06	; 6
    30b8:	08 f0       	brcs	.+2      	; 0x30bc <USB_Device_ProcessControlRequest+0xf2>
    30ba:	d2 c0       	rjmp	.+420    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30bc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    30c0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    30c4:	20 ff       	sbrs	r18, 0
    30c6:	1c c0       	rjmp	.+56     	; 0x3100 <USB_Device_ProcessControlRequest+0x136>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    30c8:	93 30       	cpi	r25, 0x03	; 3
    30ca:	21 f4       	brne	.+8      	; 0x30d4 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    30cc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30d0:	80 62       	ori	r24, 0x20	; 32
    30d2:	14 c0       	rjmp	.+40     	; 0x30fc <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    30d4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30d8:	90 61       	ori	r25, 0x10	; 16
    30da:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    30de:	21 e0       	ldi	r18, 0x01	; 1
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	a9 01       	movw	r20, r18
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <USB_Device_ProcessControlRequest+0x120>
    30e6:	44 0f       	add	r20, r20
    30e8:	55 1f       	adc	r21, r21
    30ea:	8a 95       	dec	r24
    30ec:	e2 f7       	brpl	.-8      	; 0x30e6 <USB_Device_ProcessControlRequest+0x11c>
    30ee:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    30f2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    30f6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30fa:	88 60       	ori	r24, 0x08	; 8
    30fc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3100:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3104:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3108:	87 7f       	andi	r24, 0xF7	; 247
    310a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    310e:	9e dd       	rcall	.-1220   	; 0x2c4c <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3110:	a7 c0       	rjmp	.+334    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    3112:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3114:	a5 c0       	rjmp	.+330    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    3116:	10 91 7a 08 	lds	r17, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    311a:	1f 77       	andi	r17, 0x7F	; 127
    311c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3120:	80 78       	andi	r24, 0x80	; 128
    3122:	81 2b       	or	r24, r17
    3124:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3128:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    312c:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    312e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3132:	8c dd       	rcall	.-1256   	; 0x2c4c <Endpoint_ClearStatusStage>
    3134:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    3138:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    313a:	fc cf       	rjmp	.-8      	; 0x3134 <USB_Device_ProcessControlRequest+0x16a>
    313c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3140:	80 68       	ori	r24, 0x80	; 128
    3142:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3146:	11 11       	cpse	r17, r1
    3148:	02 c0       	rjmp	.+4      	; 0x314e <USB_Device_ProcessControlRequest+0x184>
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	01 c0       	rjmp	.+2      	; 0x3150 <USB_Device_ProcessControlRequest+0x186>
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3154:	85 c0       	rjmp	.+266    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    3156:	80 58       	subi	r24, 0x80	; 128
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	08 f0       	brcs	.+2      	; 0x315e <USB_Device_ProcessControlRequest+0x194>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    315c:	81 c0       	rjmp	.+258    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    315e:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
    3162:	90 91 7b 08 	lds	r25, 0x087B	; 0x80087b <USB_ControlRequest+0x3>
    3166:	8c 3d       	cpi	r24, 0xDC	; 220
    3168:	53 e0       	ldi	r21, 0x03	; 3
    316a:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    316c:	71 f5       	brne	.+92     	; 0x31ca <USB_Device_ProcessControlRequest+0x200>
    316e:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3170:	8a 83       	std	Y+2, r24	; 0x02
    3172:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3174:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3176:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3178:	f8 94       	cli
    317a:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    317c:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    317e:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3180:	3e e0       	ldi	r19, 0x0E	; 14
    3182:	51 e2       	ldi	r21, 0x21	; 33
    3184:	e3 2f       	mov	r30, r19
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
    318c:	e4 91       	lpm	r30, Z
    318e:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
    3190:	03 c0       	rjmp	.+6      	; 0x3198 <USB_Device_ProcessControlRequest+0x1ce>
    3192:	e2 95       	swap	r30
						SigReadAddress++;
    3194:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    3196:	3f 5f       	subi	r19, 0xFF	; 255
    3198:	ef 70       	andi	r30, 0x0F	; 15
    319a:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	ea 30       	cpi	r30, 0x0A	; 10
    31a0:	10 f0       	brcs	.+4      	; 0x31a6 <USB_Device_ProcessControlRequest+0x1dc>
    31a2:	c7 96       	adiw	r24, 0x37	; 55
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <USB_Device_ProcessControlRequest+0x1de>
    31a6:	c0 96       	adiw	r24, 0x30	; 48
    31a8:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    31aa:	9d 93       	st	X+, r25
    31ac:	2f 5f       	subi	r18, 0xFF	; 255
    31ae:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    31b0:	49 f7       	brne	.-46     	; 0x3184 <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    31b2:	4f bf       	out	0x3f, r20	; 63
    31b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31b8:	87 7f       	andi	r24, 0xF7	; 247
    31ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    31be:	6a e2       	ldi	r22, 0x2A	; 42
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	ce 01       	movw	r24, r28
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	11 dc       	rcall	.-2014   	; 0x29ea <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    31c8:	14 c0       	rjmp	.+40     	; 0x31f2 <USB_Device_ProcessControlRequest+0x228>
    31ca:	60 91 7c 08 	lds	r22, 0x087C	; 0x80087c <USB_ControlRequest+0x4>
    31ce:	70 91 7d 08 	lds	r23, 0x087D	; 0x80087d <USB_ControlRequest+0x5>
    31d2:	ae 01       	movw	r20, r28
    31d4:	4f 5f       	subi	r20, 0xFF	; 255
    31d6:	5f 4f       	sbci	r21, 0xFF	; 255
    31d8:	8f db       	rcall	.-2274   	; 0x28f8 <CALLBACK_USB_GetDescriptor>
    31da:	bc 01       	movw	r22, r24
    31dc:	89 2b       	or	r24, r25
    31de:	09 f4       	brne	.+2      	; 0x31e2 <USB_Device_ProcessControlRequest+0x218>
    31e0:	3f c0       	rjmp	.+126    	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    31e2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31e6:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    31e8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    31f0:	5a dc       	rcall	.-1868   	; 0x2aa6 <Endpoint_Write_Control_PStream_LE>
    31f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31f6:	8b 77       	andi	r24, 0x7B	; 123
    31f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    31fc:	31 c0       	rjmp	.+98     	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    31fe:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3200:	79 f5       	brne	.+94     	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    3202:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3206:	87 7f       	andi	r24, 0xF7	; 247
    3208:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    320c:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3210:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3214:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3218:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    321a:	77 cf       	rjmp	.-274    	; 0x310a <USB_Device_ProcessControlRequest+0x140>
    321c:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    321e:	20 c0       	rjmp	.+64     	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    3220:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
    3224:	90 91 7b 08 	lds	r25, 0x087B	; 0x80087b <USB_ControlRequest+0x3>
    3228:	99 27       	eor	r25, r25
    322a:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    322c:	cc f4       	brge	.+50     	; 0x3260 <USB_Device_ProcessControlRequest+0x296>
    322e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3232:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3234:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3238:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
    323c:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
    3240:	05 dd       	rcall	.-1526   	; 0x2c4c <Endpoint_ClearStatusStage>
    3242:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <USB_Device_ConfigurationNumber>
    3246:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3248:	06 c0       	rjmp	.+12     	; 0x3256 <USB_Device_ProcessControlRequest+0x28c>
    324a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    324e:	87 fd       	sbrc	r24, 7
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <USB_Device_ProcessControlRequest+0x28c>
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	01 c0       	rjmp	.+2      	; 0x3258 <USB_Device_ProcessControlRequest+0x28e>
    3256:	84 e0       	ldi	r24, 0x04	; 4
    3258:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    325c:	0e 94 c5 08 	call	0x118a	; 0x118a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3260:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3264:	83 ff       	sbrs	r24, 3
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3266:	0a c0       	rjmp	.+20     	; 0x327c <USB_Device_ProcessControlRequest+0x2b2>
    3268:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    326c:	87 7f       	andi	r24, 0xF7	; 247
    326e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3272:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3276:	80 62       	ori	r24, 0x20	; 32
    3278:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    327c:	aa 96       	adiw	r28, 0x2a	; 42
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	08 95       	ret

00003290 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3290:	08 95       	ret

00003292 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3292:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3294:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>
    3298:	88 23       	and	r24, r24
    329a:	99 f0       	breq	.+38     	; 0x32c2 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    329c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    32a0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    32a2:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    32a6:	89 2f       	mov	r24, r25
    32a8:	81 70       	andi	r24, 0x01	; 1
    32aa:	90 fd       	sbrc	r25, 0
    32ac:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    32ae:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    32b0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    32b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    32b8:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    32ba:	87 de       	rcall	.-754    	; 0x2fca <USB_Device_ProcessControlRequest>
    32bc:	cf 70       	andi	r28, 0x0F	; 15
    32be:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    32c2:	cf 91       	pop	r28
    32c4:	08 95       	ret

000032c6 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	ec 01       	movw	r28, r24
    32cc:	fc 01       	movw	r30, r24
    32ce:	70 96       	adiw	r30, 0x10	; 16
    32d0:	8b e0       	ldi	r24, 0x0B	; 11
    32d2:	df 01       	movw	r26, r30
    32d4:	1d 92       	st	X+, r1
    32d6:	8a 95       	dec	r24
    32d8:	e9 f7       	brne	.-6      	; 0x32d4 <CDC_Device_ConfigureEndpoints+0xe>
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	8c 83       	std	Y+4, r24	; 0x04
    32de:	89 87       	std	Y+9, r24	; 0x09
    32e0:	83 e0       	ldi	r24, 0x03	; 3
    32e2:	8e 87       	std	Y+14, r24	; 0x0e
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	ce 01       	movw	r24, r28
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	73 dc       	rcall	.-1818   	; 0x2bd2 <Endpoint_ConfigureEndpointTable>
    32ec:	88 23       	and	r24, r24
    32ee:	61 f0       	breq	.+24     	; 0x3308 <CDC_Device_ConfigureEndpoints+0x42>
    32f0:	61 e0       	ldi	r22, 0x01	; 1
    32f2:	ce 01       	movw	r24, r28
    32f4:	06 96       	adiw	r24, 0x06	; 6
    32f6:	6d dc       	rcall	.-1830   	; 0x2bd2 <Endpoint_ConfigureEndpointTable>
    32f8:	88 23       	and	r24, r24
    32fa:	31 f0       	breq	.+12     	; 0x3308 <CDC_Device_ConfigureEndpoints+0x42>
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	ce 01       	movw	r24, r28
    3300:	0b 96       	adiw	r24, 0x0b	; 11
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	65 cc       	rjmp	.-1846   	; 0x2bd2 <Endpoint_ConfigureEndpointTable>
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	08 95       	ret

00003310 <CDC_Device_SendString>:
    3310:	db 01       	movw	r26, r22
    3312:	20 91 77 08 	lds	r18, 0x0877	; 0x800877 <USB_DeviceState>
    3316:	24 30       	cpi	r18, 0x04	; 4
    3318:	c9 f4       	brne	.+50     	; 0x334c <CDC_Device_SendString+0x3c>
    331a:	fc 01       	movw	r30, r24
    331c:	44 89       	ldd	r20, Z+20	; 0x14
    331e:	55 89       	ldd	r21, Z+21	; 0x15
    3320:	66 89       	ldd	r22, Z+22	; 0x16
    3322:	77 89       	ldd	r23, Z+23	; 0x17
    3324:	45 2b       	or	r20, r21
    3326:	46 2b       	or	r20, r22
    3328:	47 2b       	or	r20, r23
    332a:	81 f0       	breq	.+32     	; 0x334c <CDC_Device_SendString+0x3c>
    332c:	81 81       	ldd	r24, Z+1	; 0x01
    332e:	8f 70       	andi	r24, 0x0F	; 15
    3330:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3334:	fd 01       	movw	r30, r26
    3336:	01 90       	ld	r0, Z+
    3338:	00 20       	and	r0, r0
    333a:	e9 f7       	brne	.-6      	; 0x3336 <CDC_Device_SendString+0x26>
    333c:	31 97       	sbiw	r30, 0x01	; 1
    333e:	bf 01       	movw	r22, r30
    3340:	6a 1b       	sub	r22, r26
    3342:	7b 0b       	sbc	r23, r27
    3344:	40 e0       	ldi	r20, 0x00	; 0
    3346:	50 e0       	ldi	r21, 0x00	; 0
    3348:	cd 01       	movw	r24, r26
    334a:	06 cb       	rjmp	.-2548   	; 0x2958 <Endpoint_Write_Stream_LE>
    334c:	82 e0       	ldi	r24, 0x02	; 2
    334e:	08 95       	ret

00003350 <CDC_Device_SendByte>:
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	20 91 77 08 	lds	r18, 0x0877	; 0x800877 <USB_DeviceState>
    335a:	24 30       	cpi	r18, 0x04	; 4
    335c:	f9 f4       	brne	.+62     	; 0x339c <CDC_Device_SendByte+0x4c>
    335e:	fc 01       	movw	r30, r24
    3360:	04 89       	ldd	r16, Z+20	; 0x14
    3362:	15 89       	ldd	r17, Z+21	; 0x15
    3364:	26 89       	ldd	r18, Z+22	; 0x16
    3366:	37 89       	ldd	r19, Z+23	; 0x17
    3368:	01 2b       	or	r16, r17
    336a:	02 2b       	or	r16, r18
    336c:	03 2b       	or	r16, r19
    336e:	b1 f0       	breq	.+44     	; 0x339c <CDC_Device_SendByte+0x4c>
    3370:	c6 2f       	mov	r28, r22
    3372:	81 81       	ldd	r24, Z+1	; 0x01
    3374:	8f 70       	andi	r24, 0x0F	; 15
    3376:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    337a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    337e:	85 ff       	sbrs	r24, 5
    3380:	04 c0       	rjmp	.+8      	; 0x338a <CDC_Device_SendByte+0x3a>
    3382:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	0a c0       	rjmp	.+20     	; 0x339e <CDC_Device_SendByte+0x4e>
    338a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    338e:	8e 77       	andi	r24, 0x7E	; 126
    3390:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3394:	7a dc       	rcall	.-1804   	; 0x2c8a <Endpoint_WaitUntilReady>
    3396:	88 23       	and	r24, r24
    3398:	a1 f3       	breq	.-24     	; 0x3382 <CDC_Device_SendByte+0x32>
    339a:	01 c0       	rjmp	.+2      	; 0x339e <CDC_Device_SendByte+0x4e>
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	08 95       	ret

000033a6 <CDC_Device_putchar>:
    33a6:	fb 01       	movw	r30, r22
    33a8:	68 2f       	mov	r22, r24
    33aa:	84 85       	ldd	r24, Z+12	; 0x0c
    33ac:	95 85       	ldd	r25, Z+13	; 0x0d
    33ae:	d0 df       	rcall	.-96     	; 0x3350 <CDC_Device_SendByte>
    33b0:	21 e0       	ldi	r18, 0x01	; 1
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	81 11       	cpse	r24, r1
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <CDC_Device_putchar+0x16>
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	88 27       	eor	r24, r24
    33be:	99 27       	eor	r25, r25
    33c0:	82 1b       	sub	r24, r18
    33c2:	93 0b       	sbc	r25, r19
    33c4:	08 95       	ret

000033c6 <CDC_Device_Flush>:
    33c6:	20 91 77 08 	lds	r18, 0x0877	; 0x800877 <USB_DeviceState>
    33ca:	24 30       	cpi	r18, 0x04	; 4
    33cc:	41 f5       	brne	.+80     	; 0x341e <CDC_Device_Flush+0x58>
    33ce:	fc 01       	movw	r30, r24
    33d0:	44 89       	ldd	r20, Z+20	; 0x14
    33d2:	55 89       	ldd	r21, Z+21	; 0x15
    33d4:	66 89       	ldd	r22, Z+22	; 0x16
    33d6:	77 89       	ldd	r23, Z+23	; 0x17
    33d8:	45 2b       	or	r20, r21
    33da:	46 2b       	or	r20, r22
    33dc:	47 2b       	or	r20, r23
    33de:	f9 f0       	breq	.+62     	; 0x341e <CDC_Device_Flush+0x58>
    33e0:	81 81       	ldd	r24, Z+1	; 0x01
    33e2:	8f 70       	andi	r24, 0x0F	; 15
    33e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    33e8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    33ec:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	92 2b       	or	r25, r18
    33f4:	89 2b       	or	r24, r25
    33f6:	89 f0       	breq	.+34     	; 0x341a <CDC_Device_Flush+0x54>
    33f8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3400:	8e 77       	andi	r24, 0x7E	; 126
    3402:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3406:	95 fd       	sbrc	r25, 5
    3408:	08 c0       	rjmp	.+16     	; 0x341a <CDC_Device_Flush+0x54>
    340a:	3f dc       	rcall	.-1922   	; 0x2c8a <Endpoint_WaitUntilReady>
    340c:	81 11       	cpse	r24, r1
    340e:	08 c0       	rjmp	.+16     	; 0x3420 <CDC_Device_Flush+0x5a>
    3410:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3414:	8e 77       	andi	r24, 0x7E	; 126
    3416:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	08 95       	ret
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	08 95       	ret

00003422 <CDC_Device_USBTask>:
    3422:	20 91 77 08 	lds	r18, 0x0877	; 0x800877 <USB_DeviceState>
    3426:	24 30       	cpi	r18, 0x04	; 4
    3428:	89 f4       	brne	.+34     	; 0x344c <CDC_Device_USBTask+0x2a>
    342a:	fc 01       	movw	r30, r24
    342c:	44 89       	ldd	r20, Z+20	; 0x14
    342e:	55 89       	ldd	r21, Z+21	; 0x15
    3430:	66 89       	ldd	r22, Z+22	; 0x16
    3432:	77 89       	ldd	r23, Z+23	; 0x17
    3434:	45 2b       	or	r20, r21
    3436:	46 2b       	or	r20, r22
    3438:	47 2b       	or	r20, r23
    343a:	41 f0       	breq	.+16     	; 0x344c <CDC_Device_USBTask+0x2a>
    343c:	21 81       	ldd	r18, Z+1	; 0x01
    343e:	2f 70       	andi	r18, 0x0F	; 15
    3440:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3444:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3448:	20 fd       	sbrc	r18, 0
    344a:	bd cf       	rjmp	.-134    	; 0x33c6 <CDC_Device_Flush>
    344c:	08 95       	ret

0000344e <CDC_Device_ReceiveByte>:
    344e:	20 91 77 08 	lds	r18, 0x0877	; 0x800877 <USB_DeviceState>
    3452:	24 30       	cpi	r18, 0x04	; 4
    3454:	19 f0       	breq	.+6      	; 0x345c <CDC_Device_ReceiveByte+0xe>
    3456:	8f ef       	ldi	r24, 0xFF	; 255
    3458:	9f ef       	ldi	r25, 0xFF	; 255
    345a:	08 95       	ret
    345c:	fc 01       	movw	r30, r24
    345e:	44 89       	ldd	r20, Z+20	; 0x14
    3460:	55 89       	ldd	r21, Z+21	; 0x15
    3462:	66 89       	ldd	r22, Z+22	; 0x16
    3464:	77 89       	ldd	r23, Z+23	; 0x17
    3466:	45 2b       	or	r20, r21
    3468:	46 2b       	or	r20, r22
    346a:	47 2b       	or	r20, r23
    346c:	a1 f3       	breq	.-24     	; 0x3456 <CDC_Device_ReceiveByte+0x8>
    346e:	86 81       	ldd	r24, Z+6	; 0x06
    3470:	8f 70       	andi	r24, 0x0F	; 15
    3472:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3476:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    347a:	82 ff       	sbrs	r24, 2
    347c:	ec cf       	rjmp	.-40     	; 0x3456 <CDC_Device_ReceiveByte+0x8>
    347e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    3482:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	92 2b       	or	r25, r18
    348a:	89 2b       	or	r24, r25
    348c:	21 f0       	breq	.+8      	; 0x3496 <CDC_Device_ReceiveByte+0x48>
    348e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	02 c0       	rjmp	.+4      	; 0x349a <CDC_Device_ReceiveByte+0x4c>
    3496:	2f ef       	ldi	r18, 0xFF	; 255
    3498:	3f ef       	ldi	r19, 0xFF	; 255
    349a:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    349e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	94 2b       	or	r25, r20
    34a6:	89 2b       	or	r24, r25
    34a8:	29 f4       	brne	.+10     	; 0x34b4 <CDC_Device_ReceiveByte+0x66>
    34aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    34ae:	8b 77       	andi	r24, 0x7B	; 123
    34b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    34b4:	c9 01       	movw	r24, r18
    34b6:	08 95       	ret

000034b8 <CDC_Device_getchar>:
    34b8:	fc 01       	movw	r30, r24
    34ba:	84 85       	ldd	r24, Z+12	; 0x0c
    34bc:	95 85       	ldd	r25, Z+13	; 0x0d
    34be:	c7 df       	rcall	.-114    	; 0x344e <CDC_Device_ReceiveByte>
    34c0:	97 ff       	sbrs	r25, 7
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <CDC_Device_getchar+0x10>
    34c4:	8e ef       	ldi	r24, 0xFE	; 254
    34c6:	9f ef       	ldi	r25, 0xFF	; 255
    34c8:	08 95       	ret

000034ca <CDC_Device_CreateStream>:
    34ca:	fb 01       	movw	r30, r22
    34cc:	2e e0       	ldi	r18, 0x0E	; 14
    34ce:	db 01       	movw	r26, r22
    34d0:	1d 92       	st	X+, r1
    34d2:	2a 95       	dec	r18
    34d4:	e9 f7       	brne	.-6      	; 0x34d0 <CDC_Device_CreateStream+0x6>
    34d6:	23 e0       	ldi	r18, 0x03	; 3
    34d8:	23 83       	std	Z+3, r18	; 0x03
    34da:	23 ed       	ldi	r18, 0xD3	; 211
    34dc:	39 e1       	ldi	r19, 0x19	; 25
    34de:	31 87       	std	Z+9, r19	; 0x09
    34e0:	20 87       	std	Z+8, r18	; 0x08
    34e2:	2c e5       	ldi	r18, 0x5C	; 92
    34e4:	3a e1       	ldi	r19, 0x1A	; 26
    34e6:	33 87       	std	Z+11, r19	; 0x0b
    34e8:	22 87       	std	Z+10, r18	; 0x0a
    34ea:	95 87       	std	Z+13, r25	; 0x0d
    34ec:	84 87       	std	Z+12, r24	; 0x0c
    34ee:	08 95       	ret

000034f0 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    34f0:	08 95       	ret

000034f2 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    34f2:	cf 93       	push	r28
    34f4:	df 93       	push	r29
    34f6:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    34f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    34fc:	83 ff       	sbrs	r24, 3
    34fe:	a7 c0       	rjmp	.+334    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    3500:	88 81       	ld	r24, Y
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <USB_ControlRequest+0x4>
    3508:	30 91 7d 08 	lds	r19, 0x087D	; 0x80087d <USB_ControlRequest+0x5>
    350c:	28 17       	cp	r18, r24
    350e:	39 07       	cpc	r19, r25
    3510:	09 f0       	breq	.+2      	; 0x3514 <CDC_Device_ProcessControlRequest+0x22>
    3512:	9d c0       	rjmp	.+314    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    3514:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <USB_ControlRequest+0x1>
    3518:	81 32       	cpi	r24, 0x21	; 33
    351a:	61 f0       	breq	.+24     	; 0x3534 <CDC_Device_ProcessControlRequest+0x42>
    351c:	20 f4       	brcc	.+8      	; 0x3526 <CDC_Device_ProcessControlRequest+0x34>
    351e:	80 32       	cpi	r24, 0x20	; 32
    3520:	09 f4       	brne	.+2      	; 0x3524 <CDC_Device_ProcessControlRequest+0x32>
    3522:	3e c0       	rjmp	.+124    	; 0x35a0 <CDC_Device_ProcessControlRequest+0xae>
    3524:	94 c0       	rjmp	.+296    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
    3526:	82 32       	cpi	r24, 0x22	; 34
    3528:	09 f4       	brne	.+2      	; 0x352c <CDC_Device_ProcessControlRequest+0x3a>
    352a:	6c c0       	rjmp	.+216    	; 0x3604 <CDC_Device_ProcessControlRequest+0x112>
    352c:	83 32       	cpi	r24, 0x23	; 35
    352e:	09 f4       	brne	.+2      	; 0x3532 <CDC_Device_ProcessControlRequest+0x40>
    3530:	7e c0       	rjmp	.+252    	; 0x362e <CDC_Device_ProcessControlRequest+0x13c>
    3532:	8d c0       	rjmp	.+282    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3534:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <USB_ControlRequest>
    3538:	81 3a       	cpi	r24, 0xA1	; 161
    353a:	09 f0       	breq	.+2      	; 0x353e <CDC_Device_ProcessControlRequest+0x4c>
    353c:	88 c0       	rjmp	.+272    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    353e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3542:	87 7f       	andi	r24, 0xF7	; 247
    3544:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3548:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    354c:	80 ff       	sbrs	r24, 0
    354e:	fc cf       	rjmp	.-8      	; 0x3548 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    3550:	8c 89       	ldd	r24, Y+20	; 0x14
    3552:	9d 89       	ldd	r25, Y+21	; 0x15
    3554:	ae 89       	ldd	r26, Y+22	; 0x16
    3556:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    3558:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    355c:	49 2f       	mov	r20, r25
    355e:	5a 2f       	mov	r21, r26
    3560:	6b 2f       	mov	r22, r27
    3562:	77 27       	eor	r23, r23
    3564:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    3568:	ad 01       	movw	r20, r26
    356a:	66 27       	eor	r22, r22
    356c:	77 27       	eor	r23, r23
    356e:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    3572:	8b 2f       	mov	r24, r27
    3574:	99 27       	eor	r25, r25
    3576:	aa 27       	eor	r26, r26
    3578:	bb 27       	eor	r27, r27
    357a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    357e:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3580:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    3584:	89 8d       	ldd	r24, Y+25	; 0x19
    3586:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    358a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    358c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3594:	8e 77       	andi	r24, 0x7E	; 126
    3596:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    359a:	df 91       	pop	r29
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    359c:	cf 91       	pop	r28
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    359e:	56 cb       	rjmp	.-2388   	; 0x2c4c <Endpoint_ClearStatusStage>
    35a0:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <USB_ControlRequest>
    35a4:	81 32       	cpi	r24, 0x21	; 33
    35a6:	09 f0       	breq	.+2      	; 0x35aa <CDC_Device_ProcessControlRequest+0xb8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35a8:	52 c0       	rjmp	.+164    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
    35aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35ae:	87 7f       	andi	r24, 0xF7	; 247
    35b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    35b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    35b8:	82 fd       	sbrc	r24, 2
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <CDC_Device_ProcessControlRequest+0xd4>
    35bc:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <USB_DeviceState>
    35c0:	81 11       	cpse	r24, r1
    35c2:	f8 cf       	rjmp	.-16     	; 0x35b4 <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    35c4:	44 c0       	rjmp	.+136    	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
    35c6:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
    35ca:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    35ce:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    35d2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    35d6:	3c 8b       	std	Y+20, r19	; 0x14
    35d8:	2d 8b       	std	Y+21, r18	; 0x15
    35da:	9e 8b       	std	Y+22, r25	; 0x16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    35dc:	8f 8b       	std	Y+23, r24	; 0x17
    35de:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    35e2:	88 8f       	std	Y+24, r24	; 0x18
    35e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    35e8:	89 8f       	std	Y+25, r24	; 0x19
    35ea:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35ee:	8a 8f       	std	Y+26, r24	; 0x1a
    35f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35f4:	8b 77       	andi	r24, 0x7B	; 123
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    35f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    35fa:	28 db       	rcall	.-2480   	; 0x2c4c <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    35fc:	ce 01       	movw	r24, r28
    35fe:	df 91       	pop	r29
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3600:	cf 91       	pop	r28
    3602:	76 cf       	rjmp	.-276    	; 0x34f0 <CDC_Device_Event_Stub>
    3604:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <USB_ControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3608:	81 32       	cpi	r24, 0x21	; 33
    360a:	09 f5       	brne	.+66     	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
    360c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3610:	87 7f       	andi	r24, 0xF7	; 247
    3612:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    3616:	1a db       	rcall	.-2508   	; 0x2c4c <Endpoint_ClearStatusStage>
    3618:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
    361c:	90 91 7b 08 	lds	r25, 0x087B	; 0x80087b <USB_ControlRequest+0x3>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    3620:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    3622:	88 8b       	std	Y+16, r24	; 0x10
    3624:	ce 01       	movw	r24, r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    362a:	0c 94 cd 08 	jmp	0x119a	; 0x119a <EVENT_CDC_Device_ControLineStateChanged>
    362e:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <USB_ControlRequest>
    3632:	81 32       	cpi	r24, 0x21	; 33
    3634:	61 f4       	brne	.+24     	; 0x364e <CDC_Device_ProcessControlRequest+0x15c>
    3636:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    363a:	87 7f       	andi	r24, 0xF7	; 247

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    363c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}

			break;
	}
}
    3640:	05 db       	rcall	.-2550   	; 0x2c4c <Endpoint_ClearStatusStage>
    3642:	60 91 7a 08 	lds	r22, 0x087A	; 0x80087a <USB_ControlRequest+0x2>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    3646:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	51 cf       	rjmp	.-350    	; 0x34f0 <CDC_Device_Event_Stub>
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	08 95       	ret

00003654 <__subsf3>:
    3654:	50 58       	subi	r21, 0x80	; 128

00003656 <__addsf3>:
    3656:	bb 27       	eor	r27, r27
    3658:	aa 27       	eor	r26, r26
    365a:	0e d0       	rcall	.+28     	; 0x3678 <__addsf3x>
    365c:	75 c1       	rjmp	.+746    	; 0x3948 <__fp_round>
    365e:	66 d1       	rcall	.+716    	; 0x392c <__fp_pscA>
    3660:	30 f0       	brcs	.+12     	; 0x366e <__addsf3+0x18>
    3662:	6b d1       	rcall	.+726    	; 0x393a <__fp_pscB>
    3664:	20 f0       	brcs	.+8      	; 0x366e <__addsf3+0x18>
    3666:	31 f4       	brne	.+12     	; 0x3674 <__addsf3+0x1e>
    3668:	9f 3f       	cpi	r25, 0xFF	; 255
    366a:	11 f4       	brne	.+4      	; 0x3670 <__addsf3+0x1a>
    366c:	1e f4       	brtc	.+6      	; 0x3674 <__addsf3+0x1e>
    366e:	5b c1       	rjmp	.+694    	; 0x3926 <__fp_nan>
    3670:	0e f4       	brtc	.+2      	; 0x3674 <__addsf3+0x1e>
    3672:	e0 95       	com	r30
    3674:	e7 fb       	bst	r30, 7
    3676:	51 c1       	rjmp	.+674    	; 0x391a <__fp_inf>

00003678 <__addsf3x>:
    3678:	e9 2f       	mov	r30, r25
    367a:	77 d1       	rcall	.+750    	; 0x396a <__fp_split3>
    367c:	80 f3       	brcs	.-32     	; 0x365e <__addsf3+0x8>
    367e:	ba 17       	cp	r27, r26
    3680:	62 07       	cpc	r22, r18
    3682:	73 07       	cpc	r23, r19
    3684:	84 07       	cpc	r24, r20
    3686:	95 07       	cpc	r25, r21
    3688:	18 f0       	brcs	.+6      	; 0x3690 <__addsf3x+0x18>
    368a:	71 f4       	brne	.+28     	; 0x36a8 <__addsf3x+0x30>
    368c:	9e f5       	brtc	.+102    	; 0x36f4 <__addsf3x+0x7c>
    368e:	8f c1       	rjmp	.+798    	; 0x39ae <__fp_zero>
    3690:	0e f4       	brtc	.+2      	; 0x3694 <__addsf3x+0x1c>
    3692:	e0 95       	com	r30
    3694:	0b 2e       	mov	r0, r27
    3696:	ba 2f       	mov	r27, r26
    3698:	a0 2d       	mov	r26, r0
    369a:	0b 01       	movw	r0, r22
    369c:	b9 01       	movw	r22, r18
    369e:	90 01       	movw	r18, r0
    36a0:	0c 01       	movw	r0, r24
    36a2:	ca 01       	movw	r24, r20
    36a4:	a0 01       	movw	r20, r0
    36a6:	11 24       	eor	r1, r1
    36a8:	ff 27       	eor	r31, r31
    36aa:	59 1b       	sub	r21, r25
    36ac:	99 f0       	breq	.+38     	; 0x36d4 <__addsf3x+0x5c>
    36ae:	59 3f       	cpi	r21, 0xF9	; 249
    36b0:	50 f4       	brcc	.+20     	; 0x36c6 <__addsf3x+0x4e>
    36b2:	50 3e       	cpi	r21, 0xE0	; 224
    36b4:	68 f1       	brcs	.+90     	; 0x3710 <__addsf3x+0x98>
    36b6:	1a 16       	cp	r1, r26
    36b8:	f0 40       	sbci	r31, 0x00	; 0
    36ba:	a2 2f       	mov	r26, r18
    36bc:	23 2f       	mov	r18, r19
    36be:	34 2f       	mov	r19, r20
    36c0:	44 27       	eor	r20, r20
    36c2:	58 5f       	subi	r21, 0xF8	; 248
    36c4:	f3 cf       	rjmp	.-26     	; 0x36ac <__addsf3x+0x34>
    36c6:	46 95       	lsr	r20
    36c8:	37 95       	ror	r19
    36ca:	27 95       	ror	r18
    36cc:	a7 95       	ror	r26
    36ce:	f0 40       	sbci	r31, 0x00	; 0
    36d0:	53 95       	inc	r21
    36d2:	c9 f7       	brne	.-14     	; 0x36c6 <__addsf3x+0x4e>
    36d4:	7e f4       	brtc	.+30     	; 0x36f4 <__addsf3x+0x7c>
    36d6:	1f 16       	cp	r1, r31
    36d8:	ba 0b       	sbc	r27, r26
    36da:	62 0b       	sbc	r22, r18
    36dc:	73 0b       	sbc	r23, r19
    36de:	84 0b       	sbc	r24, r20
    36e0:	ba f0       	brmi	.+46     	; 0x3710 <__addsf3x+0x98>
    36e2:	91 50       	subi	r25, 0x01	; 1
    36e4:	a1 f0       	breq	.+40     	; 0x370e <__addsf3x+0x96>
    36e6:	ff 0f       	add	r31, r31
    36e8:	bb 1f       	adc	r27, r27
    36ea:	66 1f       	adc	r22, r22
    36ec:	77 1f       	adc	r23, r23
    36ee:	88 1f       	adc	r24, r24
    36f0:	c2 f7       	brpl	.-16     	; 0x36e2 <__addsf3x+0x6a>
    36f2:	0e c0       	rjmp	.+28     	; 0x3710 <__addsf3x+0x98>
    36f4:	ba 0f       	add	r27, r26
    36f6:	62 1f       	adc	r22, r18
    36f8:	73 1f       	adc	r23, r19
    36fa:	84 1f       	adc	r24, r20
    36fc:	48 f4       	brcc	.+18     	; 0x3710 <__addsf3x+0x98>
    36fe:	87 95       	ror	r24
    3700:	77 95       	ror	r23
    3702:	67 95       	ror	r22
    3704:	b7 95       	ror	r27
    3706:	f7 95       	ror	r31
    3708:	9e 3f       	cpi	r25, 0xFE	; 254
    370a:	08 f0       	brcs	.+2      	; 0x370e <__addsf3x+0x96>
    370c:	b3 cf       	rjmp	.-154    	; 0x3674 <__addsf3+0x1e>
    370e:	93 95       	inc	r25
    3710:	88 0f       	add	r24, r24
    3712:	08 f0       	brcs	.+2      	; 0x3716 <__addsf3x+0x9e>
    3714:	99 27       	eor	r25, r25
    3716:	ee 0f       	add	r30, r30
    3718:	97 95       	ror	r25
    371a:	87 95       	ror	r24
    371c:	08 95       	ret

0000371e <__cmpsf2>:
    371e:	d9 d0       	rcall	.+434    	; 0x38d2 <__fp_cmp>
    3720:	08 f4       	brcc	.+2      	; 0x3724 <__cmpsf2+0x6>
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	08 95       	ret

00003726 <__divsf3>:
    3726:	0c d0       	rcall	.+24     	; 0x3740 <__divsf3x>
    3728:	0f c1       	rjmp	.+542    	; 0x3948 <__fp_round>
    372a:	07 d1       	rcall	.+526    	; 0x393a <__fp_pscB>
    372c:	40 f0       	brcs	.+16     	; 0x373e <__divsf3+0x18>
    372e:	fe d0       	rcall	.+508    	; 0x392c <__fp_pscA>
    3730:	30 f0       	brcs	.+12     	; 0x373e <__divsf3+0x18>
    3732:	21 f4       	brne	.+8      	; 0x373c <__divsf3+0x16>
    3734:	5f 3f       	cpi	r21, 0xFF	; 255
    3736:	19 f0       	breq	.+6      	; 0x373e <__divsf3+0x18>
    3738:	f0 c0       	rjmp	.+480    	; 0x391a <__fp_inf>
    373a:	51 11       	cpse	r21, r1
    373c:	39 c1       	rjmp	.+626    	; 0x39b0 <__fp_szero>
    373e:	f3 c0       	rjmp	.+486    	; 0x3926 <__fp_nan>

00003740 <__divsf3x>:
    3740:	14 d1       	rcall	.+552    	; 0x396a <__fp_split3>
    3742:	98 f3       	brcs	.-26     	; 0x372a <__divsf3+0x4>

00003744 <__divsf3_pse>:
    3744:	99 23       	and	r25, r25
    3746:	c9 f3       	breq	.-14     	; 0x373a <__divsf3+0x14>
    3748:	55 23       	and	r21, r21
    374a:	b1 f3       	breq	.-20     	; 0x3738 <__divsf3+0x12>
    374c:	95 1b       	sub	r25, r21
    374e:	55 0b       	sbc	r21, r21
    3750:	bb 27       	eor	r27, r27
    3752:	aa 27       	eor	r26, r26
    3754:	62 17       	cp	r22, r18
    3756:	73 07       	cpc	r23, r19
    3758:	84 07       	cpc	r24, r20
    375a:	38 f0       	brcs	.+14     	; 0x376a <__divsf3_pse+0x26>
    375c:	9f 5f       	subi	r25, 0xFF	; 255
    375e:	5f 4f       	sbci	r21, 0xFF	; 255
    3760:	22 0f       	add	r18, r18
    3762:	33 1f       	adc	r19, r19
    3764:	44 1f       	adc	r20, r20
    3766:	aa 1f       	adc	r26, r26
    3768:	a9 f3       	breq	.-22     	; 0x3754 <__divsf3_pse+0x10>
    376a:	33 d0       	rcall	.+102    	; 0x37d2 <__divsf3_pse+0x8e>
    376c:	0e 2e       	mov	r0, r30
    376e:	3a f0       	brmi	.+14     	; 0x377e <__divsf3_pse+0x3a>
    3770:	e0 e8       	ldi	r30, 0x80	; 128
    3772:	30 d0       	rcall	.+96     	; 0x37d4 <__divsf3_pse+0x90>
    3774:	91 50       	subi	r25, 0x01	; 1
    3776:	50 40       	sbci	r21, 0x00	; 0
    3778:	e6 95       	lsr	r30
    377a:	00 1c       	adc	r0, r0
    377c:	ca f7       	brpl	.-14     	; 0x3770 <__divsf3_pse+0x2c>
    377e:	29 d0       	rcall	.+82     	; 0x37d2 <__divsf3_pse+0x8e>
    3780:	fe 2f       	mov	r31, r30
    3782:	27 d0       	rcall	.+78     	; 0x37d2 <__divsf3_pse+0x8e>
    3784:	66 0f       	add	r22, r22
    3786:	77 1f       	adc	r23, r23
    3788:	88 1f       	adc	r24, r24
    378a:	bb 1f       	adc	r27, r27
    378c:	26 17       	cp	r18, r22
    378e:	37 07       	cpc	r19, r23
    3790:	48 07       	cpc	r20, r24
    3792:	ab 07       	cpc	r26, r27
    3794:	b0 e8       	ldi	r27, 0x80	; 128
    3796:	09 f0       	breq	.+2      	; 0x379a <__divsf3_pse+0x56>
    3798:	bb 0b       	sbc	r27, r27
    379a:	80 2d       	mov	r24, r0
    379c:	bf 01       	movw	r22, r30
    379e:	ff 27       	eor	r31, r31
    37a0:	93 58       	subi	r25, 0x83	; 131
    37a2:	5f 4f       	sbci	r21, 0xFF	; 255
    37a4:	2a f0       	brmi	.+10     	; 0x37b0 <__divsf3_pse+0x6c>
    37a6:	9e 3f       	cpi	r25, 0xFE	; 254
    37a8:	51 05       	cpc	r21, r1
    37aa:	68 f0       	brcs	.+26     	; 0x37c6 <__divsf3_pse+0x82>
    37ac:	b6 c0       	rjmp	.+364    	; 0x391a <__fp_inf>
    37ae:	00 c1       	rjmp	.+512    	; 0x39b0 <__fp_szero>
    37b0:	5f 3f       	cpi	r21, 0xFF	; 255
    37b2:	ec f3       	brlt	.-6      	; 0x37ae <__divsf3_pse+0x6a>
    37b4:	98 3e       	cpi	r25, 0xE8	; 232
    37b6:	dc f3       	brlt	.-10     	; 0x37ae <__divsf3_pse+0x6a>
    37b8:	86 95       	lsr	r24
    37ba:	77 95       	ror	r23
    37bc:	67 95       	ror	r22
    37be:	b7 95       	ror	r27
    37c0:	f7 95       	ror	r31
    37c2:	9f 5f       	subi	r25, 0xFF	; 255
    37c4:	c9 f7       	brne	.-14     	; 0x37b8 <__divsf3_pse+0x74>
    37c6:	88 0f       	add	r24, r24
    37c8:	91 1d       	adc	r25, r1
    37ca:	96 95       	lsr	r25
    37cc:	87 95       	ror	r24
    37ce:	97 f9       	bld	r25, 7
    37d0:	08 95       	ret
    37d2:	e1 e0       	ldi	r30, 0x01	; 1
    37d4:	66 0f       	add	r22, r22
    37d6:	77 1f       	adc	r23, r23
    37d8:	88 1f       	adc	r24, r24
    37da:	bb 1f       	adc	r27, r27
    37dc:	62 17       	cp	r22, r18
    37de:	73 07       	cpc	r23, r19
    37e0:	84 07       	cpc	r24, r20
    37e2:	ba 07       	cpc	r27, r26
    37e4:	20 f0       	brcs	.+8      	; 0x37ee <__divsf3_pse+0xaa>
    37e6:	62 1b       	sub	r22, r18
    37e8:	73 0b       	sbc	r23, r19
    37ea:	84 0b       	sbc	r24, r20
    37ec:	ba 0b       	sbc	r27, r26
    37ee:	ee 1f       	adc	r30, r30
    37f0:	88 f7       	brcc	.-30     	; 0x37d4 <__divsf3_pse+0x90>
    37f2:	e0 95       	com	r30
    37f4:	08 95       	ret

000037f6 <__fixsfsi>:
    37f6:	04 d0       	rcall	.+8      	; 0x3800 <__fixunssfsi>
    37f8:	68 94       	set
    37fa:	b1 11       	cpse	r27, r1
    37fc:	d9 c0       	rjmp	.+434    	; 0x39b0 <__fp_szero>
    37fe:	08 95       	ret

00003800 <__fixunssfsi>:
    3800:	bc d0       	rcall	.+376    	; 0x397a <__fp_splitA>
    3802:	88 f0       	brcs	.+34     	; 0x3826 <__fixunssfsi+0x26>
    3804:	9f 57       	subi	r25, 0x7F	; 127
    3806:	90 f0       	brcs	.+36     	; 0x382c <__fixunssfsi+0x2c>
    3808:	b9 2f       	mov	r27, r25
    380a:	99 27       	eor	r25, r25
    380c:	b7 51       	subi	r27, 0x17	; 23
    380e:	a0 f0       	brcs	.+40     	; 0x3838 <__fixunssfsi+0x38>
    3810:	d1 f0       	breq	.+52     	; 0x3846 <__fixunssfsi+0x46>
    3812:	66 0f       	add	r22, r22
    3814:	77 1f       	adc	r23, r23
    3816:	88 1f       	adc	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	1a f0       	brmi	.+6      	; 0x3822 <__fixunssfsi+0x22>
    381c:	ba 95       	dec	r27
    381e:	c9 f7       	brne	.-14     	; 0x3812 <__fixunssfsi+0x12>
    3820:	12 c0       	rjmp	.+36     	; 0x3846 <__fixunssfsi+0x46>
    3822:	b1 30       	cpi	r27, 0x01	; 1
    3824:	81 f0       	breq	.+32     	; 0x3846 <__fixunssfsi+0x46>
    3826:	c3 d0       	rcall	.+390    	; 0x39ae <__fp_zero>
    3828:	b1 e0       	ldi	r27, 0x01	; 1
    382a:	08 95       	ret
    382c:	c0 c0       	rjmp	.+384    	; 0x39ae <__fp_zero>
    382e:	67 2f       	mov	r22, r23
    3830:	78 2f       	mov	r23, r24
    3832:	88 27       	eor	r24, r24
    3834:	b8 5f       	subi	r27, 0xF8	; 248
    3836:	39 f0       	breq	.+14     	; 0x3846 <__fixunssfsi+0x46>
    3838:	b9 3f       	cpi	r27, 0xF9	; 249
    383a:	cc f3       	brlt	.-14     	; 0x382e <__fixunssfsi+0x2e>
    383c:	86 95       	lsr	r24
    383e:	77 95       	ror	r23
    3840:	67 95       	ror	r22
    3842:	b3 95       	inc	r27
    3844:	d9 f7       	brne	.-10     	; 0x383c <__fixunssfsi+0x3c>
    3846:	3e f4       	brtc	.+14     	; 0x3856 <__fixunssfsi+0x56>
    3848:	90 95       	com	r25
    384a:	80 95       	com	r24
    384c:	70 95       	com	r23
    384e:	61 95       	neg	r22
    3850:	7f 4f       	sbci	r23, 0xFF	; 255
    3852:	8f 4f       	sbci	r24, 0xFF	; 255
    3854:	9f 4f       	sbci	r25, 0xFF	; 255
    3856:	08 95       	ret

00003858 <__floatunsisf>:
    3858:	e8 94       	clt
    385a:	09 c0       	rjmp	.+18     	; 0x386e <__floatsisf+0x12>

0000385c <__floatsisf>:
    385c:	97 fb       	bst	r25, 7
    385e:	3e f4       	brtc	.+14     	; 0x386e <__floatsisf+0x12>
    3860:	90 95       	com	r25
    3862:	80 95       	com	r24
    3864:	70 95       	com	r23
    3866:	61 95       	neg	r22
    3868:	7f 4f       	sbci	r23, 0xFF	; 255
    386a:	8f 4f       	sbci	r24, 0xFF	; 255
    386c:	9f 4f       	sbci	r25, 0xFF	; 255
    386e:	99 23       	and	r25, r25
    3870:	a9 f0       	breq	.+42     	; 0x389c <__floatsisf+0x40>
    3872:	f9 2f       	mov	r31, r25
    3874:	96 e9       	ldi	r25, 0x96	; 150
    3876:	bb 27       	eor	r27, r27
    3878:	93 95       	inc	r25
    387a:	f6 95       	lsr	r31
    387c:	87 95       	ror	r24
    387e:	77 95       	ror	r23
    3880:	67 95       	ror	r22
    3882:	b7 95       	ror	r27
    3884:	f1 11       	cpse	r31, r1
    3886:	f8 cf       	rjmp	.-16     	; 0x3878 <__floatsisf+0x1c>
    3888:	fa f4       	brpl	.+62     	; 0x38c8 <__floatsisf+0x6c>
    388a:	bb 0f       	add	r27, r27
    388c:	11 f4       	brne	.+4      	; 0x3892 <__floatsisf+0x36>
    388e:	60 ff       	sbrs	r22, 0
    3890:	1b c0       	rjmp	.+54     	; 0x38c8 <__floatsisf+0x6c>
    3892:	6f 5f       	subi	r22, 0xFF	; 255
    3894:	7f 4f       	sbci	r23, 0xFF	; 255
    3896:	8f 4f       	sbci	r24, 0xFF	; 255
    3898:	9f 4f       	sbci	r25, 0xFF	; 255
    389a:	16 c0       	rjmp	.+44     	; 0x38c8 <__floatsisf+0x6c>
    389c:	88 23       	and	r24, r24
    389e:	11 f0       	breq	.+4      	; 0x38a4 <__floatsisf+0x48>
    38a0:	96 e9       	ldi	r25, 0x96	; 150
    38a2:	11 c0       	rjmp	.+34     	; 0x38c6 <__floatsisf+0x6a>
    38a4:	77 23       	and	r23, r23
    38a6:	21 f0       	breq	.+8      	; 0x38b0 <__floatsisf+0x54>
    38a8:	9e e8       	ldi	r25, 0x8E	; 142
    38aa:	87 2f       	mov	r24, r23
    38ac:	76 2f       	mov	r23, r22
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <__floatsisf+0x5e>
    38b0:	66 23       	and	r22, r22
    38b2:	71 f0       	breq	.+28     	; 0x38d0 <__floatsisf+0x74>
    38b4:	96 e8       	ldi	r25, 0x86	; 134
    38b6:	86 2f       	mov	r24, r22
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	2a f0       	brmi	.+10     	; 0x38c8 <__floatsisf+0x6c>
    38be:	9a 95       	dec	r25
    38c0:	66 0f       	add	r22, r22
    38c2:	77 1f       	adc	r23, r23
    38c4:	88 1f       	adc	r24, r24
    38c6:	da f7       	brpl	.-10     	; 0x38be <__floatsisf+0x62>
    38c8:	88 0f       	add	r24, r24
    38ca:	96 95       	lsr	r25
    38cc:	87 95       	ror	r24
    38ce:	97 f9       	bld	r25, 7
    38d0:	08 95       	ret

000038d2 <__fp_cmp>:
    38d2:	99 0f       	add	r25, r25
    38d4:	00 08       	sbc	r0, r0
    38d6:	55 0f       	add	r21, r21
    38d8:	aa 0b       	sbc	r26, r26
    38da:	e0 e8       	ldi	r30, 0x80	; 128
    38dc:	fe ef       	ldi	r31, 0xFE	; 254
    38de:	16 16       	cp	r1, r22
    38e0:	17 06       	cpc	r1, r23
    38e2:	e8 07       	cpc	r30, r24
    38e4:	f9 07       	cpc	r31, r25
    38e6:	c0 f0       	brcs	.+48     	; 0x3918 <__fp_cmp+0x46>
    38e8:	12 16       	cp	r1, r18
    38ea:	13 06       	cpc	r1, r19
    38ec:	e4 07       	cpc	r30, r20
    38ee:	f5 07       	cpc	r31, r21
    38f0:	98 f0       	brcs	.+38     	; 0x3918 <__fp_cmp+0x46>
    38f2:	62 1b       	sub	r22, r18
    38f4:	73 0b       	sbc	r23, r19
    38f6:	84 0b       	sbc	r24, r20
    38f8:	95 0b       	sbc	r25, r21
    38fa:	39 f4       	brne	.+14     	; 0x390a <__fp_cmp+0x38>
    38fc:	0a 26       	eor	r0, r26
    38fe:	61 f0       	breq	.+24     	; 0x3918 <__fp_cmp+0x46>
    3900:	23 2b       	or	r18, r19
    3902:	24 2b       	or	r18, r20
    3904:	25 2b       	or	r18, r21
    3906:	21 f4       	brne	.+8      	; 0x3910 <__fp_cmp+0x3e>
    3908:	08 95       	ret
    390a:	0a 26       	eor	r0, r26
    390c:	09 f4       	brne	.+2      	; 0x3910 <__fp_cmp+0x3e>
    390e:	a1 40       	sbci	r26, 0x01	; 1
    3910:	a6 95       	lsr	r26
    3912:	8f ef       	ldi	r24, 0xFF	; 255
    3914:	81 1d       	adc	r24, r1
    3916:	81 1d       	adc	r24, r1
    3918:	08 95       	ret

0000391a <__fp_inf>:
    391a:	97 f9       	bld	r25, 7
    391c:	9f 67       	ori	r25, 0x7F	; 127
    391e:	80 e8       	ldi	r24, 0x80	; 128
    3920:	70 e0       	ldi	r23, 0x00	; 0
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	08 95       	ret

00003926 <__fp_nan>:
    3926:	9f ef       	ldi	r25, 0xFF	; 255
    3928:	80 ec       	ldi	r24, 0xC0	; 192
    392a:	08 95       	ret

0000392c <__fp_pscA>:
    392c:	00 24       	eor	r0, r0
    392e:	0a 94       	dec	r0
    3930:	16 16       	cp	r1, r22
    3932:	17 06       	cpc	r1, r23
    3934:	18 06       	cpc	r1, r24
    3936:	09 06       	cpc	r0, r25
    3938:	08 95       	ret

0000393a <__fp_pscB>:
    393a:	00 24       	eor	r0, r0
    393c:	0a 94       	dec	r0
    393e:	12 16       	cp	r1, r18
    3940:	13 06       	cpc	r1, r19
    3942:	14 06       	cpc	r1, r20
    3944:	05 06       	cpc	r0, r21
    3946:	08 95       	ret

00003948 <__fp_round>:
    3948:	09 2e       	mov	r0, r25
    394a:	03 94       	inc	r0
    394c:	00 0c       	add	r0, r0
    394e:	11 f4       	brne	.+4      	; 0x3954 <__fp_round+0xc>
    3950:	88 23       	and	r24, r24
    3952:	52 f0       	brmi	.+20     	; 0x3968 <__fp_round+0x20>
    3954:	bb 0f       	add	r27, r27
    3956:	40 f4       	brcc	.+16     	; 0x3968 <__fp_round+0x20>
    3958:	bf 2b       	or	r27, r31
    395a:	11 f4       	brne	.+4      	; 0x3960 <__fp_round+0x18>
    395c:	60 ff       	sbrs	r22, 0
    395e:	04 c0       	rjmp	.+8      	; 0x3968 <__fp_round+0x20>
    3960:	6f 5f       	subi	r22, 0xFF	; 255
    3962:	7f 4f       	sbci	r23, 0xFF	; 255
    3964:	8f 4f       	sbci	r24, 0xFF	; 255
    3966:	9f 4f       	sbci	r25, 0xFF	; 255
    3968:	08 95       	ret

0000396a <__fp_split3>:
    396a:	57 fd       	sbrc	r21, 7
    396c:	90 58       	subi	r25, 0x80	; 128
    396e:	44 0f       	add	r20, r20
    3970:	55 1f       	adc	r21, r21
    3972:	59 f0       	breq	.+22     	; 0x398a <__fp_splitA+0x10>
    3974:	5f 3f       	cpi	r21, 0xFF	; 255
    3976:	71 f0       	breq	.+28     	; 0x3994 <__fp_splitA+0x1a>
    3978:	47 95       	ror	r20

0000397a <__fp_splitA>:
    397a:	88 0f       	add	r24, r24
    397c:	97 fb       	bst	r25, 7
    397e:	99 1f       	adc	r25, r25
    3980:	61 f0       	breq	.+24     	; 0x399a <__fp_splitA+0x20>
    3982:	9f 3f       	cpi	r25, 0xFF	; 255
    3984:	79 f0       	breq	.+30     	; 0x39a4 <__fp_splitA+0x2a>
    3986:	87 95       	ror	r24
    3988:	08 95       	ret
    398a:	12 16       	cp	r1, r18
    398c:	13 06       	cpc	r1, r19
    398e:	14 06       	cpc	r1, r20
    3990:	55 1f       	adc	r21, r21
    3992:	f2 cf       	rjmp	.-28     	; 0x3978 <__fp_split3+0xe>
    3994:	46 95       	lsr	r20
    3996:	f1 df       	rcall	.-30     	; 0x397a <__fp_splitA>
    3998:	08 c0       	rjmp	.+16     	; 0x39aa <__fp_splitA+0x30>
    399a:	16 16       	cp	r1, r22
    399c:	17 06       	cpc	r1, r23
    399e:	18 06       	cpc	r1, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	f1 cf       	rjmp	.-30     	; 0x3986 <__fp_splitA+0xc>
    39a4:	86 95       	lsr	r24
    39a6:	71 05       	cpc	r23, r1
    39a8:	61 05       	cpc	r22, r1
    39aa:	08 94       	sec
    39ac:	08 95       	ret

000039ae <__fp_zero>:
    39ae:	e8 94       	clt

000039b0 <__fp_szero>:
    39b0:	bb 27       	eor	r27, r27
    39b2:	66 27       	eor	r22, r22
    39b4:	77 27       	eor	r23, r23
    39b6:	cb 01       	movw	r24, r22
    39b8:	97 f9       	bld	r25, 7
    39ba:	08 95       	ret

000039bc <__gesf2>:
    39bc:	8a df       	rcall	.-236    	; 0x38d2 <__fp_cmp>
    39be:	08 f4       	brcc	.+2      	; 0x39c2 <__gesf2+0x6>
    39c0:	8f ef       	ldi	r24, 0xFF	; 255
    39c2:	08 95       	ret
    39c4:	0e f0       	brts	.+2      	; 0x39c8 <__gesf2+0xc>
    39c6:	a6 c0       	rjmp	.+332    	; 0x3b14 <__fp_mpack>
    39c8:	ae cf       	rjmp	.-164    	; 0x3926 <__fp_nan>
    39ca:	68 94       	set
    39cc:	a6 cf       	rjmp	.-180    	; 0x391a <__fp_inf>

000039ce <log>:
    39ce:	d5 df       	rcall	.-86     	; 0x397a <__fp_splitA>
    39d0:	c8 f3       	brcs	.-14     	; 0x39c4 <__gesf2+0x8>
    39d2:	99 23       	and	r25, r25
    39d4:	d1 f3       	breq	.-12     	; 0x39ca <__gesf2+0xe>
    39d6:	c6 f3       	brts	.-16     	; 0x39c8 <__gesf2+0xc>
    39d8:	df 93       	push	r29
    39da:	cf 93       	push	r28
    39dc:	1f 93       	push	r17
    39de:	0f 93       	push	r16
    39e0:	ff 92       	push	r15
    39e2:	c9 2f       	mov	r28, r25
    39e4:	dd 27       	eor	r29, r29
    39e6:	88 23       	and	r24, r24
    39e8:	2a f0       	brmi	.+10     	; 0x39f4 <log+0x26>
    39ea:	21 97       	sbiw	r28, 0x01	; 1
    39ec:	66 0f       	add	r22, r22
    39ee:	77 1f       	adc	r23, r23
    39f0:	88 1f       	adc	r24, r24
    39f2:	da f7       	brpl	.-10     	; 0x39ea <log+0x1c>
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f eb       	ldi	r21, 0xBF	; 191
    39fc:	9f e3       	ldi	r25, 0x3F	; 63
    39fe:	88 39       	cpi	r24, 0x98	; 152
    3a00:	20 f0       	brcs	.+8      	; 0x3a0a <log+0x3c>
    3a02:	80 3e       	cpi	r24, 0xE0	; 224
    3a04:	30 f0       	brcs	.+12     	; 0x3a12 <log+0x44>
    3a06:	21 96       	adiw	r28, 0x01	; 1
    3a08:	8f 77       	andi	r24, 0x7F	; 127
    3a0a:	25 de       	rcall	.-950    	; 0x3656 <__addsf3>
    3a0c:	ec ea       	ldi	r30, 0xAC	; 172
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	03 c0       	rjmp	.+6      	; 0x3a18 <log+0x4a>
    3a12:	21 de       	rcall	.-958    	; 0x3656 <__addsf3>
    3a14:	e9 ed       	ldi	r30, 0xD9	; 217
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	8b d0       	rcall	.+278    	; 0x3b30 <__fp_powser>
    3a1a:	8b 01       	movw	r16, r22
    3a1c:	be 01       	movw	r22, r28
    3a1e:	ec 01       	movw	r28, r24
    3a20:	fb 2e       	mov	r15, r27
    3a22:	6f 57       	subi	r22, 0x7F	; 127
    3a24:	71 09       	sbc	r23, r1
    3a26:	75 95       	asr	r23
    3a28:	77 1f       	adc	r23, r23
    3a2a:	88 0b       	sbc	r24, r24
    3a2c:	99 0b       	sbc	r25, r25
    3a2e:	16 df       	rcall	.-468    	; 0x385c <__floatsisf>
    3a30:	28 e1       	ldi	r18, 0x18	; 24
    3a32:	32 e7       	ldi	r19, 0x72	; 114
    3a34:	41 e3       	ldi	r20, 0x31	; 49
    3a36:	5f e3       	ldi	r21, 0x3F	; 63
    3a38:	16 d0       	rcall	.+44     	; 0x3a66 <__mulsf3x>
    3a3a:	af 2d       	mov	r26, r15
    3a3c:	98 01       	movw	r18, r16
    3a3e:	ae 01       	movw	r20, r28
    3a40:	ff 90       	pop	r15
    3a42:	0f 91       	pop	r16
    3a44:	1f 91       	pop	r17
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	16 de       	rcall	.-980    	; 0x3678 <__addsf3x>
    3a4c:	7d cf       	rjmp	.-262    	; 0x3948 <__fp_round>

00003a4e <__mulsf3>:
    3a4e:	0b d0       	rcall	.+22     	; 0x3a66 <__mulsf3x>
    3a50:	7b cf       	rjmp	.-266    	; 0x3948 <__fp_round>
    3a52:	6c df       	rcall	.-296    	; 0x392c <__fp_pscA>
    3a54:	28 f0       	brcs	.+10     	; 0x3a60 <__mulsf3+0x12>
    3a56:	71 df       	rcall	.-286    	; 0x393a <__fp_pscB>
    3a58:	18 f0       	brcs	.+6      	; 0x3a60 <__mulsf3+0x12>
    3a5a:	95 23       	and	r25, r21
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <__mulsf3+0x12>
    3a5e:	5d cf       	rjmp	.-326    	; 0x391a <__fp_inf>
    3a60:	62 cf       	rjmp	.-316    	; 0x3926 <__fp_nan>
    3a62:	11 24       	eor	r1, r1
    3a64:	a5 cf       	rjmp	.-182    	; 0x39b0 <__fp_szero>

00003a66 <__mulsf3x>:
    3a66:	81 df       	rcall	.-254    	; 0x396a <__fp_split3>
    3a68:	a0 f3       	brcs	.-24     	; 0x3a52 <__mulsf3+0x4>

00003a6a <__mulsf3_pse>:
    3a6a:	95 9f       	mul	r25, r21
    3a6c:	d1 f3       	breq	.-12     	; 0x3a62 <__mulsf3+0x14>
    3a6e:	95 0f       	add	r25, r21
    3a70:	50 e0       	ldi	r21, 0x00	; 0
    3a72:	55 1f       	adc	r21, r21
    3a74:	62 9f       	mul	r22, r18
    3a76:	f0 01       	movw	r30, r0
    3a78:	72 9f       	mul	r23, r18
    3a7a:	bb 27       	eor	r27, r27
    3a7c:	f0 0d       	add	r31, r0
    3a7e:	b1 1d       	adc	r27, r1
    3a80:	63 9f       	mul	r22, r19
    3a82:	aa 27       	eor	r26, r26
    3a84:	f0 0d       	add	r31, r0
    3a86:	b1 1d       	adc	r27, r1
    3a88:	aa 1f       	adc	r26, r26
    3a8a:	64 9f       	mul	r22, r20
    3a8c:	66 27       	eor	r22, r22
    3a8e:	b0 0d       	add	r27, r0
    3a90:	a1 1d       	adc	r26, r1
    3a92:	66 1f       	adc	r22, r22
    3a94:	82 9f       	mul	r24, r18
    3a96:	22 27       	eor	r18, r18
    3a98:	b0 0d       	add	r27, r0
    3a9a:	a1 1d       	adc	r26, r1
    3a9c:	62 1f       	adc	r22, r18
    3a9e:	73 9f       	mul	r23, r19
    3aa0:	b0 0d       	add	r27, r0
    3aa2:	a1 1d       	adc	r26, r1
    3aa4:	62 1f       	adc	r22, r18
    3aa6:	83 9f       	mul	r24, r19
    3aa8:	a0 0d       	add	r26, r0
    3aaa:	61 1d       	adc	r22, r1
    3aac:	22 1f       	adc	r18, r18
    3aae:	74 9f       	mul	r23, r20
    3ab0:	33 27       	eor	r19, r19
    3ab2:	a0 0d       	add	r26, r0
    3ab4:	61 1d       	adc	r22, r1
    3ab6:	23 1f       	adc	r18, r19
    3ab8:	84 9f       	mul	r24, r20
    3aba:	60 0d       	add	r22, r0
    3abc:	21 1d       	adc	r18, r1
    3abe:	82 2f       	mov	r24, r18
    3ac0:	76 2f       	mov	r23, r22
    3ac2:	6a 2f       	mov	r22, r26
    3ac4:	11 24       	eor	r1, r1
    3ac6:	9f 57       	subi	r25, 0x7F	; 127
    3ac8:	50 40       	sbci	r21, 0x00	; 0
    3aca:	8a f0       	brmi	.+34     	; 0x3aee <__mulsf3_pse+0x84>
    3acc:	e1 f0       	breq	.+56     	; 0x3b06 <__mulsf3_pse+0x9c>
    3ace:	88 23       	and	r24, r24
    3ad0:	4a f0       	brmi	.+18     	; 0x3ae4 <__mulsf3_pse+0x7a>
    3ad2:	ee 0f       	add	r30, r30
    3ad4:	ff 1f       	adc	r31, r31
    3ad6:	bb 1f       	adc	r27, r27
    3ad8:	66 1f       	adc	r22, r22
    3ada:	77 1f       	adc	r23, r23
    3adc:	88 1f       	adc	r24, r24
    3ade:	91 50       	subi	r25, 0x01	; 1
    3ae0:	50 40       	sbci	r21, 0x00	; 0
    3ae2:	a9 f7       	brne	.-22     	; 0x3ace <__mulsf3_pse+0x64>
    3ae4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ae6:	51 05       	cpc	r21, r1
    3ae8:	70 f0       	brcs	.+28     	; 0x3b06 <__mulsf3_pse+0x9c>
    3aea:	17 cf       	rjmp	.-466    	; 0x391a <__fp_inf>
    3aec:	61 cf       	rjmp	.-318    	; 0x39b0 <__fp_szero>
    3aee:	5f 3f       	cpi	r21, 0xFF	; 255
    3af0:	ec f3       	brlt	.-6      	; 0x3aec <__mulsf3_pse+0x82>
    3af2:	98 3e       	cpi	r25, 0xE8	; 232
    3af4:	dc f3       	brlt	.-10     	; 0x3aec <__mulsf3_pse+0x82>
    3af6:	86 95       	lsr	r24
    3af8:	77 95       	ror	r23
    3afa:	67 95       	ror	r22
    3afc:	b7 95       	ror	r27
    3afe:	f7 95       	ror	r31
    3b00:	e7 95       	ror	r30
    3b02:	9f 5f       	subi	r25, 0xFF	; 255
    3b04:	c1 f7       	brne	.-16     	; 0x3af6 <__mulsf3_pse+0x8c>
    3b06:	fe 2b       	or	r31, r30
    3b08:	88 0f       	add	r24, r24
    3b0a:	91 1d       	adc	r25, r1
    3b0c:	96 95       	lsr	r25
    3b0e:	87 95       	ror	r24
    3b10:	97 f9       	bld	r25, 7
    3b12:	08 95       	ret

00003b14 <__fp_mpack>:
    3b14:	9f 3f       	cpi	r25, 0xFF	; 255
    3b16:	31 f0       	breq	.+12     	; 0x3b24 <__fp_mpack_finite+0xc>

00003b18 <__fp_mpack_finite>:
    3b18:	91 50       	subi	r25, 0x01	; 1
    3b1a:	20 f4       	brcc	.+8      	; 0x3b24 <__fp_mpack_finite+0xc>
    3b1c:	87 95       	ror	r24
    3b1e:	77 95       	ror	r23
    3b20:	67 95       	ror	r22
    3b22:	b7 95       	ror	r27
    3b24:	88 0f       	add	r24, r24
    3b26:	91 1d       	adc	r25, r1
    3b28:	96 95       	lsr	r25
    3b2a:	87 95       	ror	r24
    3b2c:	97 f9       	bld	r25, 7
    3b2e:	08 95       	ret

00003b30 <__fp_powser>:
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	1f 93       	push	r17
    3b36:	0f 93       	push	r16
    3b38:	ff 92       	push	r15
    3b3a:	ef 92       	push	r14
    3b3c:	df 92       	push	r13
    3b3e:	7b 01       	movw	r14, r22
    3b40:	8c 01       	movw	r16, r24
    3b42:	68 94       	set
    3b44:	05 c0       	rjmp	.+10     	; 0x3b50 <__fp_powser+0x20>
    3b46:	da 2e       	mov	r13, r26
    3b48:	ef 01       	movw	r28, r30
    3b4a:	8d df       	rcall	.-230    	; 0x3a66 <__mulsf3x>
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	e8 94       	clt
    3b50:	a5 91       	lpm	r26, Z+
    3b52:	25 91       	lpm	r18, Z+
    3b54:	35 91       	lpm	r19, Z+
    3b56:	45 91       	lpm	r20, Z+
    3b58:	55 91       	lpm	r21, Z+
    3b5a:	ae f3       	brts	.-22     	; 0x3b46 <__fp_powser+0x16>
    3b5c:	ef 01       	movw	r28, r30
    3b5e:	8c dd       	rcall	.-1256   	; 0x3678 <__addsf3x>
    3b60:	fe 01       	movw	r30, r28
    3b62:	97 01       	movw	r18, r14
    3b64:	a8 01       	movw	r20, r16
    3b66:	da 94       	dec	r13
    3b68:	79 f7       	brne	.-34     	; 0x3b48 <__fp_powser+0x18>
    3b6a:	df 90       	pop	r13
    3b6c:	ef 90       	pop	r14
    3b6e:	ff 90       	pop	r15
    3b70:	0f 91       	pop	r16
    3b72:	1f 91       	pop	r17
    3b74:	cf 91       	pop	r28
    3b76:	df 91       	pop	r29
    3b78:	08 95       	ret

00003b7a <vfprintf>:
    3b7a:	a0 e1       	ldi	r26, 0x10	; 16
    3b7c:	b0 e0       	ldi	r27, 0x00	; 0
    3b7e:	e2 ec       	ldi	r30, 0xC2	; 194
    3b80:	fd e1       	ldi	r31, 0x1D	; 29
    3b82:	37 c7       	rjmp	.+3694   	; 0x49f2 <__prologue_saves__>
    3b84:	7c 01       	movw	r14, r24
    3b86:	1b 01       	movw	r2, r22
    3b88:	6a 01       	movw	r12, r20
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	17 82       	std	Z+7, r1	; 0x07
    3b8e:	16 82       	std	Z+6, r1	; 0x06
    3b90:	83 81       	ldd	r24, Z+3	; 0x03
    3b92:	81 ff       	sbrs	r24, 1
    3b94:	2b c3       	rjmp	.+1622   	; 0x41ec <vfprintf+0x672>
    3b96:	9e 01       	movw	r18, r28
    3b98:	2f 5f       	subi	r18, 0xFF	; 255
    3b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9c:	39 01       	movw	r6, r18
    3b9e:	f7 01       	movw	r30, r14
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	f1 01       	movw	r30, r2
    3ba4:	93 fd       	sbrc	r25, 3
    3ba6:	85 91       	lpm	r24, Z+
    3ba8:	93 ff       	sbrs	r25, 3
    3baa:	81 91       	ld	r24, Z+
    3bac:	1f 01       	movw	r2, r30
    3bae:	88 23       	and	r24, r24
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <vfprintf+0x3a>
    3bb2:	18 c3       	rjmp	.+1584   	; 0x41e4 <vfprintf+0x66a>
    3bb4:	85 32       	cpi	r24, 0x25	; 37
    3bb6:	39 f4       	brne	.+14     	; 0x3bc6 <vfprintf+0x4c>
    3bb8:	93 fd       	sbrc	r25, 3
    3bba:	85 91       	lpm	r24, Z+
    3bbc:	93 ff       	sbrs	r25, 3
    3bbe:	81 91       	ld	r24, Z+
    3bc0:	1f 01       	movw	r2, r30
    3bc2:	85 32       	cpi	r24, 0x25	; 37
    3bc4:	39 f4       	brne	.+14     	; 0x3bd4 <vfprintf+0x5a>
    3bc6:	b7 01       	movw	r22, r14
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <fputc>
    3bce:	56 01       	movw	r10, r12
    3bd0:	65 01       	movw	r12, r10
    3bd2:	e5 cf       	rjmp	.-54     	; 0x3b9e <vfprintf+0x24>
    3bd4:	10 e0       	ldi	r17, 0x00	; 0
    3bd6:	51 2c       	mov	r5, r1
    3bd8:	91 2c       	mov	r9, r1
    3bda:	ff e1       	ldi	r31, 0x1F	; 31
    3bdc:	f9 15       	cp	r31, r9
    3bde:	d8 f0       	brcs	.+54     	; 0x3c16 <vfprintf+0x9c>
    3be0:	8b 32       	cpi	r24, 0x2B	; 43
    3be2:	79 f0       	breq	.+30     	; 0x3c02 <vfprintf+0x88>
    3be4:	38 f4       	brcc	.+14     	; 0x3bf4 <vfprintf+0x7a>
    3be6:	80 32       	cpi	r24, 0x20	; 32
    3be8:	79 f0       	breq	.+30     	; 0x3c08 <vfprintf+0x8e>
    3bea:	83 32       	cpi	r24, 0x23	; 35
    3bec:	a1 f4       	brne	.+40     	; 0x3c16 <vfprintf+0x9c>
    3bee:	f9 2d       	mov	r31, r9
    3bf0:	f0 61       	ori	r31, 0x10	; 16
    3bf2:	2e c0       	rjmp	.+92     	; 0x3c50 <vfprintf+0xd6>
    3bf4:	8d 32       	cpi	r24, 0x2D	; 45
    3bf6:	61 f0       	breq	.+24     	; 0x3c10 <vfprintf+0x96>
    3bf8:	80 33       	cpi	r24, 0x30	; 48
    3bfa:	69 f4       	brne	.+26     	; 0x3c16 <vfprintf+0x9c>
    3bfc:	29 2d       	mov	r18, r9
    3bfe:	21 60       	ori	r18, 0x01	; 1
    3c00:	2d c0       	rjmp	.+90     	; 0x3c5c <vfprintf+0xe2>
    3c02:	39 2d       	mov	r19, r9
    3c04:	32 60       	ori	r19, 0x02	; 2
    3c06:	93 2e       	mov	r9, r19
    3c08:	89 2d       	mov	r24, r9
    3c0a:	84 60       	ori	r24, 0x04	; 4
    3c0c:	98 2e       	mov	r9, r24
    3c0e:	2a c0       	rjmp	.+84     	; 0x3c64 <vfprintf+0xea>
    3c10:	e9 2d       	mov	r30, r9
    3c12:	e8 60       	ori	r30, 0x08	; 8
    3c14:	15 c0       	rjmp	.+42     	; 0x3c40 <vfprintf+0xc6>
    3c16:	97 fc       	sbrc	r9, 7
    3c18:	2d c0       	rjmp	.+90     	; 0x3c74 <vfprintf+0xfa>
    3c1a:	20 ed       	ldi	r18, 0xD0	; 208
    3c1c:	28 0f       	add	r18, r24
    3c1e:	2a 30       	cpi	r18, 0x0A	; 10
    3c20:	88 f4       	brcc	.+34     	; 0x3c44 <vfprintf+0xca>
    3c22:	96 fe       	sbrs	r9, 6
    3c24:	06 c0       	rjmp	.+12     	; 0x3c32 <vfprintf+0xb8>
    3c26:	3a e0       	ldi	r19, 0x0A	; 10
    3c28:	13 9f       	mul	r17, r19
    3c2a:	20 0d       	add	r18, r0
    3c2c:	11 24       	eor	r1, r1
    3c2e:	12 2f       	mov	r17, r18
    3c30:	19 c0       	rjmp	.+50     	; 0x3c64 <vfprintf+0xea>
    3c32:	8a e0       	ldi	r24, 0x0A	; 10
    3c34:	58 9e       	mul	r5, r24
    3c36:	20 0d       	add	r18, r0
    3c38:	11 24       	eor	r1, r1
    3c3a:	52 2e       	mov	r5, r18
    3c3c:	e9 2d       	mov	r30, r9
    3c3e:	e0 62       	ori	r30, 0x20	; 32
    3c40:	9e 2e       	mov	r9, r30
    3c42:	10 c0       	rjmp	.+32     	; 0x3c64 <vfprintf+0xea>
    3c44:	8e 32       	cpi	r24, 0x2E	; 46
    3c46:	31 f4       	brne	.+12     	; 0x3c54 <vfprintf+0xda>
    3c48:	96 fc       	sbrc	r9, 6
    3c4a:	cc c2       	rjmp	.+1432   	; 0x41e4 <vfprintf+0x66a>
    3c4c:	f9 2d       	mov	r31, r9
    3c4e:	f0 64       	ori	r31, 0x40	; 64
    3c50:	9f 2e       	mov	r9, r31
    3c52:	08 c0       	rjmp	.+16     	; 0x3c64 <vfprintf+0xea>
    3c54:	8c 36       	cpi	r24, 0x6C	; 108
    3c56:	21 f4       	brne	.+8      	; 0x3c60 <vfprintf+0xe6>
    3c58:	29 2d       	mov	r18, r9
    3c5a:	20 68       	ori	r18, 0x80	; 128
    3c5c:	92 2e       	mov	r9, r18
    3c5e:	02 c0       	rjmp	.+4      	; 0x3c64 <vfprintf+0xea>
    3c60:	88 36       	cpi	r24, 0x68	; 104
    3c62:	41 f4       	brne	.+16     	; 0x3c74 <vfprintf+0xfa>
    3c64:	f1 01       	movw	r30, r2
    3c66:	93 fd       	sbrc	r25, 3
    3c68:	85 91       	lpm	r24, Z+
    3c6a:	93 ff       	sbrs	r25, 3
    3c6c:	81 91       	ld	r24, Z+
    3c6e:	1f 01       	movw	r2, r30
    3c70:	81 11       	cpse	r24, r1
    3c72:	b3 cf       	rjmp	.-154    	; 0x3bda <vfprintf+0x60>
    3c74:	9b eb       	ldi	r25, 0xBB	; 187
    3c76:	98 0f       	add	r25, r24
    3c78:	93 30       	cpi	r25, 0x03	; 3
    3c7a:	20 f4       	brcc	.+8      	; 0x3c84 <vfprintf+0x10a>
    3c7c:	99 2d       	mov	r25, r9
    3c7e:	90 61       	ori	r25, 0x10	; 16
    3c80:	80 5e       	subi	r24, 0xE0	; 224
    3c82:	07 c0       	rjmp	.+14     	; 0x3c92 <vfprintf+0x118>
    3c84:	9b e9       	ldi	r25, 0x9B	; 155
    3c86:	98 0f       	add	r25, r24
    3c88:	93 30       	cpi	r25, 0x03	; 3
    3c8a:	08 f0       	brcs	.+2      	; 0x3c8e <vfprintf+0x114>
    3c8c:	59 c1       	rjmp	.+690    	; 0x3f40 <vfprintf+0x3c6>
    3c8e:	99 2d       	mov	r25, r9
    3c90:	9f 7e       	andi	r25, 0xEF	; 239
    3c92:	96 ff       	sbrs	r25, 6
    3c94:	16 e0       	ldi	r17, 0x06	; 6
    3c96:	9f 73       	andi	r25, 0x3F	; 63
    3c98:	99 2e       	mov	r9, r25
    3c9a:	85 36       	cpi	r24, 0x65	; 101
    3c9c:	19 f4       	brne	.+6      	; 0x3ca4 <vfprintf+0x12a>
    3c9e:	90 64       	ori	r25, 0x40	; 64
    3ca0:	99 2e       	mov	r9, r25
    3ca2:	08 c0       	rjmp	.+16     	; 0x3cb4 <vfprintf+0x13a>
    3ca4:	86 36       	cpi	r24, 0x66	; 102
    3ca6:	21 f4       	brne	.+8      	; 0x3cb0 <vfprintf+0x136>
    3ca8:	39 2f       	mov	r19, r25
    3caa:	30 68       	ori	r19, 0x80	; 128
    3cac:	93 2e       	mov	r9, r19
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <vfprintf+0x13a>
    3cb0:	11 11       	cpse	r17, r1
    3cb2:	11 50       	subi	r17, 0x01	; 1
    3cb4:	97 fe       	sbrs	r9, 7
    3cb6:	07 c0       	rjmp	.+14     	; 0x3cc6 <vfprintf+0x14c>
    3cb8:	1c 33       	cpi	r17, 0x3C	; 60
    3cba:	50 f4       	brcc	.+20     	; 0x3cd0 <vfprintf+0x156>
    3cbc:	44 24       	eor	r4, r4
    3cbe:	43 94       	inc	r4
    3cc0:	41 0e       	add	r4, r17
    3cc2:	27 e0       	ldi	r18, 0x07	; 7
    3cc4:	0b c0       	rjmp	.+22     	; 0x3cdc <vfprintf+0x162>
    3cc6:	18 30       	cpi	r17, 0x08	; 8
    3cc8:	38 f0       	brcs	.+14     	; 0x3cd8 <vfprintf+0x15e>
    3cca:	27 e0       	ldi	r18, 0x07	; 7
    3ccc:	17 e0       	ldi	r17, 0x07	; 7
    3cce:	05 c0       	rjmp	.+10     	; 0x3cda <vfprintf+0x160>
    3cd0:	27 e0       	ldi	r18, 0x07	; 7
    3cd2:	9c e3       	ldi	r25, 0x3C	; 60
    3cd4:	49 2e       	mov	r4, r25
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <vfprintf+0x162>
    3cd8:	21 2f       	mov	r18, r17
    3cda:	41 2c       	mov	r4, r1
    3cdc:	56 01       	movw	r10, r12
    3cde:	84 e0       	ldi	r24, 0x04	; 4
    3ce0:	a8 0e       	add	r10, r24
    3ce2:	b1 1c       	adc	r11, r1
    3ce4:	f6 01       	movw	r30, r12
    3ce6:	60 81       	ld	r22, Z
    3ce8:	71 81       	ldd	r23, Z+1	; 0x01
    3cea:	82 81       	ldd	r24, Z+2	; 0x02
    3cec:	93 81       	ldd	r25, Z+3	; 0x03
    3cee:	04 2d       	mov	r16, r4
    3cf0:	a3 01       	movw	r20, r6
    3cf2:	b6 d6       	rcall	.+3436   	; 0x4a60 <__ftoa_engine>
    3cf4:	6c 01       	movw	r12, r24
    3cf6:	f9 81       	ldd	r31, Y+1	; 0x01
    3cf8:	fc 87       	std	Y+12, r31	; 0x0c
    3cfa:	f0 ff       	sbrs	r31, 0
    3cfc:	02 c0       	rjmp	.+4      	; 0x3d02 <vfprintf+0x188>
    3cfe:	f3 ff       	sbrs	r31, 3
    3d00:	06 c0       	rjmp	.+12     	; 0x3d0e <vfprintf+0x194>
    3d02:	91 fc       	sbrc	r9, 1
    3d04:	06 c0       	rjmp	.+12     	; 0x3d12 <vfprintf+0x198>
    3d06:	92 fe       	sbrs	r9, 2
    3d08:	06 c0       	rjmp	.+12     	; 0x3d16 <vfprintf+0x19c>
    3d0a:	00 e2       	ldi	r16, 0x20	; 32
    3d0c:	05 c0       	rjmp	.+10     	; 0x3d18 <vfprintf+0x19e>
    3d0e:	0d e2       	ldi	r16, 0x2D	; 45
    3d10:	03 c0       	rjmp	.+6      	; 0x3d18 <vfprintf+0x19e>
    3d12:	0b e2       	ldi	r16, 0x2B	; 43
    3d14:	01 c0       	rjmp	.+2      	; 0x3d18 <vfprintf+0x19e>
    3d16:	00 e0       	ldi	r16, 0x00	; 0
    3d18:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d1a:	8c 70       	andi	r24, 0x0C	; 12
    3d1c:	19 f0       	breq	.+6      	; 0x3d24 <vfprintf+0x1aa>
    3d1e:	01 11       	cpse	r16, r1
    3d20:	43 c2       	rjmp	.+1158   	; 0x41a8 <vfprintf+0x62e>
    3d22:	80 c2       	rjmp	.+1280   	; 0x4224 <vfprintf+0x6aa>
    3d24:	97 fe       	sbrs	r9, 7
    3d26:	10 c0       	rjmp	.+32     	; 0x3d48 <vfprintf+0x1ce>
    3d28:	4c 0c       	add	r4, r12
    3d2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d2c:	f4 ff       	sbrs	r31, 4
    3d2e:	04 c0       	rjmp	.+8      	; 0x3d38 <vfprintf+0x1be>
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	81 33       	cpi	r24, 0x31	; 49
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <vfprintf+0x1be>
    3d36:	4a 94       	dec	r4
    3d38:	14 14       	cp	r1, r4
    3d3a:	74 f5       	brge	.+92     	; 0x3d98 <vfprintf+0x21e>
    3d3c:	28 e0       	ldi	r18, 0x08	; 8
    3d3e:	24 15       	cp	r18, r4
    3d40:	78 f5       	brcc	.+94     	; 0x3da0 <vfprintf+0x226>
    3d42:	88 e0       	ldi	r24, 0x08	; 8
    3d44:	48 2e       	mov	r4, r24
    3d46:	2c c0       	rjmp	.+88     	; 0x3da0 <vfprintf+0x226>
    3d48:	96 fc       	sbrc	r9, 6
    3d4a:	2a c0       	rjmp	.+84     	; 0x3da0 <vfprintf+0x226>
    3d4c:	81 2f       	mov	r24, r17
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	8c 15       	cp	r24, r12
    3d52:	9d 05       	cpc	r25, r13
    3d54:	9c f0       	brlt	.+38     	; 0x3d7c <vfprintf+0x202>
    3d56:	3c ef       	ldi	r19, 0xFC	; 252
    3d58:	c3 16       	cp	r12, r19
    3d5a:	3f ef       	ldi	r19, 0xFF	; 255
    3d5c:	d3 06       	cpc	r13, r19
    3d5e:	74 f0       	brlt	.+28     	; 0x3d7c <vfprintf+0x202>
    3d60:	89 2d       	mov	r24, r9
    3d62:	80 68       	ori	r24, 0x80	; 128
    3d64:	98 2e       	mov	r9, r24
    3d66:	0a c0       	rjmp	.+20     	; 0x3d7c <vfprintf+0x202>
    3d68:	e2 e0       	ldi	r30, 0x02	; 2
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	ec 0f       	add	r30, r28
    3d6e:	fd 1f       	adc	r31, r29
    3d70:	e1 0f       	add	r30, r17
    3d72:	f1 1d       	adc	r31, r1
    3d74:	80 81       	ld	r24, Z
    3d76:	80 33       	cpi	r24, 0x30	; 48
    3d78:	19 f4       	brne	.+6      	; 0x3d80 <vfprintf+0x206>
    3d7a:	11 50       	subi	r17, 0x01	; 1
    3d7c:	11 11       	cpse	r17, r1
    3d7e:	f4 cf       	rjmp	.-24     	; 0x3d68 <vfprintf+0x1ee>
    3d80:	97 fe       	sbrs	r9, 7
    3d82:	0e c0       	rjmp	.+28     	; 0x3da0 <vfprintf+0x226>
    3d84:	44 24       	eor	r4, r4
    3d86:	43 94       	inc	r4
    3d88:	41 0e       	add	r4, r17
    3d8a:	81 2f       	mov	r24, r17
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	c8 16       	cp	r12, r24
    3d90:	d9 06       	cpc	r13, r25
    3d92:	2c f4       	brge	.+10     	; 0x3d9e <vfprintf+0x224>
    3d94:	1c 19       	sub	r17, r12
    3d96:	04 c0       	rjmp	.+8      	; 0x3da0 <vfprintf+0x226>
    3d98:	44 24       	eor	r4, r4
    3d9a:	43 94       	inc	r4
    3d9c:	01 c0       	rjmp	.+2      	; 0x3da0 <vfprintf+0x226>
    3d9e:	10 e0       	ldi	r17, 0x00	; 0
    3da0:	97 fe       	sbrs	r9, 7
    3da2:	06 c0       	rjmp	.+12     	; 0x3db0 <vfprintf+0x236>
    3da4:	1c 14       	cp	r1, r12
    3da6:	1d 04       	cpc	r1, r13
    3da8:	34 f4       	brge	.+12     	; 0x3db6 <vfprintf+0x23c>
    3daa:	c6 01       	movw	r24, r12
    3dac:	01 96       	adiw	r24, 0x01	; 1
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <vfprintf+0x240>
    3db0:	85 e0       	ldi	r24, 0x05	; 5
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <vfprintf+0x240>
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	01 11       	cpse	r16, r1
    3dbc:	01 96       	adiw	r24, 0x01	; 1
    3dbe:	11 23       	and	r17, r17
    3dc0:	31 f0       	breq	.+12     	; 0x3dce <vfprintf+0x254>
    3dc2:	21 2f       	mov	r18, r17
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	2f 5f       	subi	r18, 0xFF	; 255
    3dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dca:	82 0f       	add	r24, r18
    3dcc:	93 1f       	adc	r25, r19
    3dce:	25 2d       	mov	r18, r5
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	82 17       	cp	r24, r18
    3dd4:	93 07       	cpc	r25, r19
    3dd6:	14 f4       	brge	.+4      	; 0x3ddc <vfprintf+0x262>
    3dd8:	58 1a       	sub	r5, r24
    3dda:	01 c0       	rjmp	.+2      	; 0x3dde <vfprintf+0x264>
    3ddc:	51 2c       	mov	r5, r1
    3dde:	89 2d       	mov	r24, r9
    3de0:	89 70       	andi	r24, 0x09	; 9
    3de2:	41 f4       	brne	.+16     	; 0x3df4 <vfprintf+0x27a>
    3de4:	55 20       	and	r5, r5
    3de6:	31 f0       	breq	.+12     	; 0x3df4 <vfprintf+0x27a>
    3de8:	b7 01       	movw	r22, r14
    3dea:	80 e2       	ldi	r24, 0x20	; 32
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	8d d7       	rcall	.+3866   	; 0x4d0a <fputc>
    3df0:	5a 94       	dec	r5
    3df2:	f8 cf       	rjmp	.-16     	; 0x3de4 <vfprintf+0x26a>
    3df4:	00 23       	and	r16, r16
    3df6:	21 f0       	breq	.+8      	; 0x3e00 <vfprintf+0x286>
    3df8:	b7 01       	movw	r22, r14
    3dfa:	80 2f       	mov	r24, r16
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	85 d7       	rcall	.+3850   	; 0x4d0a <fputc>
    3e00:	93 fc       	sbrc	r9, 3
    3e02:	08 c0       	rjmp	.+16     	; 0x3e14 <vfprintf+0x29a>
    3e04:	55 20       	and	r5, r5
    3e06:	31 f0       	breq	.+12     	; 0x3e14 <vfprintf+0x29a>
    3e08:	b7 01       	movw	r22, r14
    3e0a:	80 e3       	ldi	r24, 0x30	; 48
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	7d d7       	rcall	.+3834   	; 0x4d0a <fputc>
    3e10:	5a 94       	dec	r5
    3e12:	f8 cf       	rjmp	.-16     	; 0x3e04 <vfprintf+0x28a>
    3e14:	97 fe       	sbrs	r9, 7
    3e16:	4a c0       	rjmp	.+148    	; 0x3eac <vfprintf+0x332>
    3e18:	46 01       	movw	r8, r12
    3e1a:	d7 fe       	sbrs	r13, 7
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <vfprintf+0x2a8>
    3e1e:	81 2c       	mov	r8, r1
    3e20:	91 2c       	mov	r9, r1
    3e22:	c6 01       	movw	r24, r12
    3e24:	88 19       	sub	r24, r8
    3e26:	99 09       	sbc	r25, r9
    3e28:	f3 01       	movw	r30, r6
    3e2a:	e8 0f       	add	r30, r24
    3e2c:	f9 1f       	adc	r31, r25
    3e2e:	fe 87       	std	Y+14, r31	; 0x0e
    3e30:	ed 87       	std	Y+13, r30	; 0x0d
    3e32:	96 01       	movw	r18, r12
    3e34:	24 19       	sub	r18, r4
    3e36:	31 09       	sbc	r19, r1
    3e38:	38 8b       	std	Y+16, r19	; 0x10
    3e3a:	2f 87       	std	Y+15, r18	; 0x0f
    3e3c:	01 2f       	mov	r16, r17
    3e3e:	10 e0       	ldi	r17, 0x00	; 0
    3e40:	11 95       	neg	r17
    3e42:	01 95       	neg	r16
    3e44:	11 09       	sbc	r17, r1
    3e46:	3f ef       	ldi	r19, 0xFF	; 255
    3e48:	83 16       	cp	r8, r19
    3e4a:	93 06       	cpc	r9, r19
    3e4c:	21 f4       	brne	.+8      	; 0x3e56 <vfprintf+0x2dc>
    3e4e:	b7 01       	movw	r22, r14
    3e50:	8e e2       	ldi	r24, 0x2E	; 46
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	5a d7       	rcall	.+3764   	; 0x4d0a <fputc>
    3e56:	c8 14       	cp	r12, r8
    3e58:	d9 04       	cpc	r13, r9
    3e5a:	4c f0       	brlt	.+18     	; 0x3e6e <vfprintf+0x2f4>
    3e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e5e:	98 89       	ldd	r25, Y+16	; 0x10
    3e60:	88 15       	cp	r24, r8
    3e62:	99 05       	cpc	r25, r9
    3e64:	24 f4       	brge	.+8      	; 0x3e6e <vfprintf+0x2f4>
    3e66:	ed 85       	ldd	r30, Y+13	; 0x0d
    3e68:	fe 85       	ldd	r31, Y+14	; 0x0e
    3e6a:	81 81       	ldd	r24, Z+1	; 0x01
    3e6c:	01 c0       	rjmp	.+2      	; 0x3e70 <vfprintf+0x2f6>
    3e6e:	80 e3       	ldi	r24, 0x30	; 48
    3e70:	f1 e0       	ldi	r31, 0x01	; 1
    3e72:	8f 1a       	sub	r8, r31
    3e74:	91 08       	sbc	r9, r1
    3e76:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e78:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e7a:	2f 5f       	subi	r18, 0xFF	; 255
    3e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7e:	3e 87       	std	Y+14, r19	; 0x0e
    3e80:	2d 87       	std	Y+13, r18	; 0x0d
    3e82:	80 16       	cp	r8, r16
    3e84:	91 06       	cpc	r9, r17
    3e86:	24 f0       	brlt	.+8      	; 0x3e90 <vfprintf+0x316>
    3e88:	b7 01       	movw	r22, r14
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	3e d7       	rcall	.+3708   	; 0x4d0a <fputc>
    3e8e:	db cf       	rjmp	.-74     	; 0x3e46 <vfprintf+0x2cc>
    3e90:	c8 14       	cp	r12, r8
    3e92:	d9 04       	cpc	r13, r9
    3e94:	41 f4       	brne	.+16     	; 0x3ea6 <vfprintf+0x32c>
    3e96:	9a 81       	ldd	r25, Y+2	; 0x02
    3e98:	96 33       	cpi	r25, 0x36	; 54
    3e9a:	20 f4       	brcc	.+8      	; 0x3ea4 <vfprintf+0x32a>
    3e9c:	95 33       	cpi	r25, 0x35	; 53
    3e9e:	19 f4       	brne	.+6      	; 0x3ea6 <vfprintf+0x32c>
    3ea0:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ea2:	34 ff       	sbrs	r19, 4
    3ea4:	81 e3       	ldi	r24, 0x31	; 49
    3ea6:	b7 01       	movw	r22, r14
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	48 c0       	rjmp	.+144    	; 0x3f3c <vfprintf+0x3c2>
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	81 33       	cpi	r24, 0x31	; 49
    3eb0:	19 f0       	breq	.+6      	; 0x3eb8 <vfprintf+0x33e>
    3eb2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3eb4:	9f 7e       	andi	r25, 0xEF	; 239
    3eb6:	9c 87       	std	Y+12, r25	; 0x0c
    3eb8:	b7 01       	movw	r22, r14
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	26 d7       	rcall	.+3660   	; 0x4d0a <fputc>
    3ebe:	11 11       	cpse	r17, r1
    3ec0:	05 c0       	rjmp	.+10     	; 0x3ecc <vfprintf+0x352>
    3ec2:	94 fc       	sbrc	r9, 4
    3ec4:	16 c0       	rjmp	.+44     	; 0x3ef2 <vfprintf+0x378>
    3ec6:	85 e6       	ldi	r24, 0x65	; 101
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	15 c0       	rjmp	.+42     	; 0x3ef6 <vfprintf+0x37c>
    3ecc:	b7 01       	movw	r22, r14
    3ece:	8e e2       	ldi	r24, 0x2E	; 46
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	1b d7       	rcall	.+3638   	; 0x4d0a <fputc>
    3ed4:	1e 5f       	subi	r17, 0xFE	; 254
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	01 e0       	ldi	r16, 0x01	; 1
    3eda:	08 0f       	add	r16, r24
    3edc:	f3 01       	movw	r30, r6
    3ede:	e8 0f       	add	r30, r24
    3ee0:	f1 1d       	adc	r31, r1
    3ee2:	80 81       	ld	r24, Z
    3ee4:	b7 01       	movw	r22, r14
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	10 d7       	rcall	.+3616   	; 0x4d0a <fputc>
    3eea:	80 2f       	mov	r24, r16
    3eec:	01 13       	cpse	r16, r17
    3eee:	f4 cf       	rjmp	.-24     	; 0x3ed8 <vfprintf+0x35e>
    3ef0:	e8 cf       	rjmp	.-48     	; 0x3ec2 <vfprintf+0x348>
    3ef2:	85 e4       	ldi	r24, 0x45	; 69
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	b7 01       	movw	r22, r14
    3ef8:	08 d7       	rcall	.+3600   	; 0x4d0a <fputc>
    3efa:	d7 fc       	sbrc	r13, 7
    3efc:	06 c0       	rjmp	.+12     	; 0x3f0a <vfprintf+0x390>
    3efe:	c1 14       	cp	r12, r1
    3f00:	d1 04       	cpc	r13, r1
    3f02:	41 f4       	brne	.+16     	; 0x3f14 <vfprintf+0x39a>
    3f04:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f06:	e4 ff       	sbrs	r30, 4
    3f08:	05 c0       	rjmp	.+10     	; 0x3f14 <vfprintf+0x39a>
    3f0a:	d1 94       	neg	r13
    3f0c:	c1 94       	neg	r12
    3f0e:	d1 08       	sbc	r13, r1
    3f10:	8d e2       	ldi	r24, 0x2D	; 45
    3f12:	01 c0       	rjmp	.+2      	; 0x3f16 <vfprintf+0x39c>
    3f14:	8b e2       	ldi	r24, 0x2B	; 43
    3f16:	b7 01       	movw	r22, r14
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	f7 d6       	rcall	.+3566   	; 0x4d0a <fputc>
    3f1c:	80 e3       	ldi	r24, 0x30	; 48
    3f1e:	2a e0       	ldi	r18, 0x0A	; 10
    3f20:	c2 16       	cp	r12, r18
    3f22:	d1 04       	cpc	r13, r1
    3f24:	2c f0       	brlt	.+10     	; 0x3f30 <vfprintf+0x3b6>
    3f26:	8f 5f       	subi	r24, 0xFF	; 255
    3f28:	fa e0       	ldi	r31, 0x0A	; 10
    3f2a:	cf 1a       	sub	r12, r31
    3f2c:	d1 08       	sbc	r13, r1
    3f2e:	f7 cf       	rjmp	.-18     	; 0x3f1e <vfprintf+0x3a4>
    3f30:	b7 01       	movw	r22, r14
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	ea d6       	rcall	.+3540   	; 0x4d0a <fputc>
    3f36:	b7 01       	movw	r22, r14
    3f38:	c6 01       	movw	r24, r12
    3f3a:	c0 96       	adiw	r24, 0x30	; 48
    3f3c:	e6 d6       	rcall	.+3532   	; 0x4d0a <fputc>
    3f3e:	49 c1       	rjmp	.+658    	; 0x41d2 <vfprintf+0x658>
    3f40:	83 36       	cpi	r24, 0x63	; 99
    3f42:	31 f0       	breq	.+12     	; 0x3f50 <vfprintf+0x3d6>
    3f44:	83 37       	cpi	r24, 0x73	; 115
    3f46:	79 f0       	breq	.+30     	; 0x3f66 <vfprintf+0x3ec>
    3f48:	83 35       	cpi	r24, 0x53	; 83
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <vfprintf+0x3d4>
    3f4c:	52 c0       	rjmp	.+164    	; 0x3ff2 <vfprintf+0x478>
    3f4e:	1f c0       	rjmp	.+62     	; 0x3f8e <vfprintf+0x414>
    3f50:	56 01       	movw	r10, r12
    3f52:	32 e0       	ldi	r19, 0x02	; 2
    3f54:	a3 0e       	add	r10, r19
    3f56:	b1 1c       	adc	r11, r1
    3f58:	f6 01       	movw	r30, r12
    3f5a:	80 81       	ld	r24, Z
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	01 e0       	ldi	r16, 0x01	; 1
    3f60:	10 e0       	ldi	r17, 0x00	; 0
    3f62:	63 01       	movw	r12, r6
    3f64:	11 c0       	rjmp	.+34     	; 0x3f88 <vfprintf+0x40e>
    3f66:	56 01       	movw	r10, r12
    3f68:	f2 e0       	ldi	r31, 0x02	; 2
    3f6a:	af 0e       	add	r10, r31
    3f6c:	b1 1c       	adc	r11, r1
    3f6e:	f6 01       	movw	r30, r12
    3f70:	c0 80       	ld	r12, Z
    3f72:	d1 80       	ldd	r13, Z+1	; 0x01
    3f74:	96 fe       	sbrs	r9, 6
    3f76:	03 c0       	rjmp	.+6      	; 0x3f7e <vfprintf+0x404>
    3f78:	61 2f       	mov	r22, r17
    3f7a:	70 e0       	ldi	r23, 0x00	; 0
    3f7c:	02 c0       	rjmp	.+4      	; 0x3f82 <vfprintf+0x408>
    3f7e:	6f ef       	ldi	r22, 0xFF	; 255
    3f80:	7f ef       	ldi	r23, 0xFF	; 255
    3f82:	c6 01       	movw	r24, r12
    3f84:	79 d6       	rcall	.+3314   	; 0x4c78 <strnlen>
    3f86:	8c 01       	movw	r16, r24
    3f88:	f9 2d       	mov	r31, r9
    3f8a:	ff 77       	andi	r31, 0x7F	; 127
    3f8c:	13 c0       	rjmp	.+38     	; 0x3fb4 <vfprintf+0x43a>
    3f8e:	56 01       	movw	r10, r12
    3f90:	22 e0       	ldi	r18, 0x02	; 2
    3f92:	a2 0e       	add	r10, r18
    3f94:	b1 1c       	adc	r11, r1
    3f96:	f6 01       	movw	r30, r12
    3f98:	c0 80       	ld	r12, Z
    3f9a:	d1 80       	ldd	r13, Z+1	; 0x01
    3f9c:	96 fe       	sbrs	r9, 6
    3f9e:	03 c0       	rjmp	.+6      	; 0x3fa6 <vfprintf+0x42c>
    3fa0:	61 2f       	mov	r22, r17
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	02 c0       	rjmp	.+4      	; 0x3faa <vfprintf+0x430>
    3fa6:	6f ef       	ldi	r22, 0xFF	; 255
    3fa8:	7f ef       	ldi	r23, 0xFF	; 255
    3faa:	c6 01       	movw	r24, r12
    3fac:	4c d6       	rcall	.+3224   	; 0x4c46 <strnlen_P>
    3fae:	8c 01       	movw	r16, r24
    3fb0:	f9 2d       	mov	r31, r9
    3fb2:	f0 68       	ori	r31, 0x80	; 128
    3fb4:	9f 2e       	mov	r9, r31
    3fb6:	f3 fd       	sbrc	r31, 3
    3fb8:	18 c0       	rjmp	.+48     	; 0x3fea <vfprintf+0x470>
    3fba:	85 2d       	mov	r24, r5
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	08 17       	cp	r16, r24
    3fc0:	19 07       	cpc	r17, r25
    3fc2:	98 f4       	brcc	.+38     	; 0x3fea <vfprintf+0x470>
    3fc4:	b7 01       	movw	r22, r14
    3fc6:	80 e2       	ldi	r24, 0x20	; 32
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	9f d6       	rcall	.+3390   	; 0x4d0a <fputc>
    3fcc:	5a 94       	dec	r5
    3fce:	f5 cf       	rjmp	.-22     	; 0x3fba <vfprintf+0x440>
    3fd0:	f6 01       	movw	r30, r12
    3fd2:	97 fc       	sbrc	r9, 7
    3fd4:	85 91       	lpm	r24, Z+
    3fd6:	97 fe       	sbrs	r9, 7
    3fd8:	81 91       	ld	r24, Z+
    3fda:	6f 01       	movw	r12, r30
    3fdc:	b7 01       	movw	r22, r14
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	94 d6       	rcall	.+3368   	; 0x4d0a <fputc>
    3fe2:	51 10       	cpse	r5, r1
    3fe4:	5a 94       	dec	r5
    3fe6:	01 50       	subi	r16, 0x01	; 1
    3fe8:	11 09       	sbc	r17, r1
    3fea:	01 15       	cp	r16, r1
    3fec:	11 05       	cpc	r17, r1
    3fee:	81 f7       	brne	.-32     	; 0x3fd0 <vfprintf+0x456>
    3ff0:	f0 c0       	rjmp	.+480    	; 0x41d2 <vfprintf+0x658>
    3ff2:	84 36       	cpi	r24, 0x64	; 100
    3ff4:	11 f0       	breq	.+4      	; 0x3ffa <vfprintf+0x480>
    3ff6:	89 36       	cpi	r24, 0x69	; 105
    3ff8:	59 f5       	brne	.+86     	; 0x4050 <vfprintf+0x4d6>
    3ffa:	56 01       	movw	r10, r12
    3ffc:	97 fe       	sbrs	r9, 7
    3ffe:	09 c0       	rjmp	.+18     	; 0x4012 <vfprintf+0x498>
    4000:	24 e0       	ldi	r18, 0x04	; 4
    4002:	a2 0e       	add	r10, r18
    4004:	b1 1c       	adc	r11, r1
    4006:	f6 01       	movw	r30, r12
    4008:	60 81       	ld	r22, Z
    400a:	71 81       	ldd	r23, Z+1	; 0x01
    400c:	82 81       	ldd	r24, Z+2	; 0x02
    400e:	93 81       	ldd	r25, Z+3	; 0x03
    4010:	0a c0       	rjmp	.+20     	; 0x4026 <vfprintf+0x4ac>
    4012:	f2 e0       	ldi	r31, 0x02	; 2
    4014:	af 0e       	add	r10, r31
    4016:	b1 1c       	adc	r11, r1
    4018:	f6 01       	movw	r30, r12
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	07 2e       	mov	r0, r23
    4020:	00 0c       	add	r0, r0
    4022:	88 0b       	sbc	r24, r24
    4024:	99 0b       	sbc	r25, r25
    4026:	f9 2d       	mov	r31, r9
    4028:	ff 76       	andi	r31, 0x6F	; 111
    402a:	9f 2e       	mov	r9, r31
    402c:	97 ff       	sbrs	r25, 7
    402e:	09 c0       	rjmp	.+18     	; 0x4042 <vfprintf+0x4c8>
    4030:	90 95       	com	r25
    4032:	80 95       	com	r24
    4034:	70 95       	com	r23
    4036:	61 95       	neg	r22
    4038:	7f 4f       	sbci	r23, 0xFF	; 255
    403a:	8f 4f       	sbci	r24, 0xFF	; 255
    403c:	9f 4f       	sbci	r25, 0xFF	; 255
    403e:	f0 68       	ori	r31, 0x80	; 128
    4040:	9f 2e       	mov	r9, r31
    4042:	2a e0       	ldi	r18, 0x0A	; 10
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	a3 01       	movw	r20, r6
    4048:	d5 d6       	rcall	.+3498   	; 0x4df4 <__ultoa_invert>
    404a:	c8 2e       	mov	r12, r24
    404c:	c6 18       	sub	r12, r6
    404e:	3e c0       	rjmp	.+124    	; 0x40cc <vfprintf+0x552>
    4050:	09 2d       	mov	r16, r9
    4052:	85 37       	cpi	r24, 0x75	; 117
    4054:	21 f4       	brne	.+8      	; 0x405e <vfprintf+0x4e4>
    4056:	0f 7e       	andi	r16, 0xEF	; 239
    4058:	2a e0       	ldi	r18, 0x0A	; 10
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	1d c0       	rjmp	.+58     	; 0x4098 <vfprintf+0x51e>
    405e:	09 7f       	andi	r16, 0xF9	; 249
    4060:	8f 36       	cpi	r24, 0x6F	; 111
    4062:	91 f0       	breq	.+36     	; 0x4088 <vfprintf+0x50e>
    4064:	18 f4       	brcc	.+6      	; 0x406c <vfprintf+0x4f2>
    4066:	88 35       	cpi	r24, 0x58	; 88
    4068:	59 f0       	breq	.+22     	; 0x4080 <vfprintf+0x506>
    406a:	bc c0       	rjmp	.+376    	; 0x41e4 <vfprintf+0x66a>
    406c:	80 37       	cpi	r24, 0x70	; 112
    406e:	19 f0       	breq	.+6      	; 0x4076 <vfprintf+0x4fc>
    4070:	88 37       	cpi	r24, 0x78	; 120
    4072:	11 f0       	breq	.+4      	; 0x4078 <vfprintf+0x4fe>
    4074:	b7 c0       	rjmp	.+366    	; 0x41e4 <vfprintf+0x66a>
    4076:	00 61       	ori	r16, 0x10	; 16
    4078:	04 ff       	sbrs	r16, 4
    407a:	09 c0       	rjmp	.+18     	; 0x408e <vfprintf+0x514>
    407c:	04 60       	ori	r16, 0x04	; 4
    407e:	07 c0       	rjmp	.+14     	; 0x408e <vfprintf+0x514>
    4080:	94 fe       	sbrs	r9, 4
    4082:	08 c0       	rjmp	.+16     	; 0x4094 <vfprintf+0x51a>
    4084:	06 60       	ori	r16, 0x06	; 6
    4086:	06 c0       	rjmp	.+12     	; 0x4094 <vfprintf+0x51a>
    4088:	28 e0       	ldi	r18, 0x08	; 8
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	05 c0       	rjmp	.+10     	; 0x4098 <vfprintf+0x51e>
    408e:	20 e1       	ldi	r18, 0x10	; 16
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <vfprintf+0x51e>
    4094:	20 e1       	ldi	r18, 0x10	; 16
    4096:	32 e0       	ldi	r19, 0x02	; 2
    4098:	56 01       	movw	r10, r12
    409a:	07 ff       	sbrs	r16, 7
    409c:	09 c0       	rjmp	.+18     	; 0x40b0 <vfprintf+0x536>
    409e:	84 e0       	ldi	r24, 0x04	; 4
    40a0:	a8 0e       	add	r10, r24
    40a2:	b1 1c       	adc	r11, r1
    40a4:	f6 01       	movw	r30, r12
    40a6:	60 81       	ld	r22, Z
    40a8:	71 81       	ldd	r23, Z+1	; 0x01
    40aa:	82 81       	ldd	r24, Z+2	; 0x02
    40ac:	93 81       	ldd	r25, Z+3	; 0x03
    40ae:	08 c0       	rjmp	.+16     	; 0x40c0 <vfprintf+0x546>
    40b0:	f2 e0       	ldi	r31, 0x02	; 2
    40b2:	af 0e       	add	r10, r31
    40b4:	b1 1c       	adc	r11, r1
    40b6:	f6 01       	movw	r30, r12
    40b8:	60 81       	ld	r22, Z
    40ba:	71 81       	ldd	r23, Z+1	; 0x01
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	a3 01       	movw	r20, r6
    40c2:	98 d6       	rcall	.+3376   	; 0x4df4 <__ultoa_invert>
    40c4:	c8 2e       	mov	r12, r24
    40c6:	c6 18       	sub	r12, r6
    40c8:	0f 77       	andi	r16, 0x7F	; 127
    40ca:	90 2e       	mov	r9, r16
    40cc:	96 fe       	sbrs	r9, 6
    40ce:	0b c0       	rjmp	.+22     	; 0x40e6 <vfprintf+0x56c>
    40d0:	09 2d       	mov	r16, r9
    40d2:	0e 7f       	andi	r16, 0xFE	; 254
    40d4:	c1 16       	cp	r12, r17
    40d6:	50 f4       	brcc	.+20     	; 0x40ec <vfprintf+0x572>
    40d8:	94 fe       	sbrs	r9, 4
    40da:	0a c0       	rjmp	.+20     	; 0x40f0 <vfprintf+0x576>
    40dc:	92 fc       	sbrc	r9, 2
    40de:	08 c0       	rjmp	.+16     	; 0x40f0 <vfprintf+0x576>
    40e0:	09 2d       	mov	r16, r9
    40e2:	0e 7e       	andi	r16, 0xEE	; 238
    40e4:	05 c0       	rjmp	.+10     	; 0x40f0 <vfprintf+0x576>
    40e6:	dc 2c       	mov	r13, r12
    40e8:	09 2d       	mov	r16, r9
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <vfprintf+0x578>
    40ec:	dc 2c       	mov	r13, r12
    40ee:	01 c0       	rjmp	.+2      	; 0x40f2 <vfprintf+0x578>
    40f0:	d1 2e       	mov	r13, r17
    40f2:	04 ff       	sbrs	r16, 4
    40f4:	0d c0       	rjmp	.+26     	; 0x4110 <vfprintf+0x596>
    40f6:	fe 01       	movw	r30, r28
    40f8:	ec 0d       	add	r30, r12
    40fa:	f1 1d       	adc	r31, r1
    40fc:	80 81       	ld	r24, Z
    40fe:	80 33       	cpi	r24, 0x30	; 48
    4100:	11 f4       	brne	.+4      	; 0x4106 <vfprintf+0x58c>
    4102:	09 7e       	andi	r16, 0xE9	; 233
    4104:	09 c0       	rjmp	.+18     	; 0x4118 <vfprintf+0x59e>
    4106:	02 ff       	sbrs	r16, 2
    4108:	06 c0       	rjmp	.+12     	; 0x4116 <vfprintf+0x59c>
    410a:	d3 94       	inc	r13
    410c:	d3 94       	inc	r13
    410e:	04 c0       	rjmp	.+8      	; 0x4118 <vfprintf+0x59e>
    4110:	80 2f       	mov	r24, r16
    4112:	86 78       	andi	r24, 0x86	; 134
    4114:	09 f0       	breq	.+2      	; 0x4118 <vfprintf+0x59e>
    4116:	d3 94       	inc	r13
    4118:	03 fd       	sbrc	r16, 3
    411a:	10 c0       	rjmp	.+32     	; 0x413c <vfprintf+0x5c2>
    411c:	00 ff       	sbrs	r16, 0
    411e:	06 c0       	rjmp	.+12     	; 0x412c <vfprintf+0x5b2>
    4120:	1c 2d       	mov	r17, r12
    4122:	d5 14       	cp	r13, r5
    4124:	78 f4       	brcc	.+30     	; 0x4144 <vfprintf+0x5ca>
    4126:	15 0d       	add	r17, r5
    4128:	1d 19       	sub	r17, r13
    412a:	0c c0       	rjmp	.+24     	; 0x4144 <vfprintf+0x5ca>
    412c:	d5 14       	cp	r13, r5
    412e:	50 f4       	brcc	.+20     	; 0x4144 <vfprintf+0x5ca>
    4130:	b7 01       	movw	r22, r14
    4132:	80 e2       	ldi	r24, 0x20	; 32
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	e9 d5       	rcall	.+3026   	; 0x4d0a <fputc>
    4138:	d3 94       	inc	r13
    413a:	f8 cf       	rjmp	.-16     	; 0x412c <vfprintf+0x5b2>
    413c:	d5 14       	cp	r13, r5
    413e:	10 f4       	brcc	.+4      	; 0x4144 <vfprintf+0x5ca>
    4140:	5d 18       	sub	r5, r13
    4142:	01 c0       	rjmp	.+2      	; 0x4146 <vfprintf+0x5cc>
    4144:	51 2c       	mov	r5, r1
    4146:	04 ff       	sbrs	r16, 4
    4148:	0f c0       	rjmp	.+30     	; 0x4168 <vfprintf+0x5ee>
    414a:	b7 01       	movw	r22, r14
    414c:	80 e3       	ldi	r24, 0x30	; 48
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	dc d5       	rcall	.+3000   	; 0x4d0a <fputc>
    4152:	02 ff       	sbrs	r16, 2
    4154:	16 c0       	rjmp	.+44     	; 0x4182 <vfprintf+0x608>
    4156:	01 fd       	sbrc	r16, 1
    4158:	03 c0       	rjmp	.+6      	; 0x4160 <vfprintf+0x5e6>
    415a:	88 e7       	ldi	r24, 0x78	; 120
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	02 c0       	rjmp	.+4      	; 0x4164 <vfprintf+0x5ea>
    4160:	88 e5       	ldi	r24, 0x58	; 88
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	b7 01       	movw	r22, r14
    4166:	0c c0       	rjmp	.+24     	; 0x4180 <vfprintf+0x606>
    4168:	80 2f       	mov	r24, r16
    416a:	86 78       	andi	r24, 0x86	; 134
    416c:	51 f0       	breq	.+20     	; 0x4182 <vfprintf+0x608>
    416e:	01 ff       	sbrs	r16, 1
    4170:	02 c0       	rjmp	.+4      	; 0x4176 <vfprintf+0x5fc>
    4172:	8b e2       	ldi	r24, 0x2B	; 43
    4174:	01 c0       	rjmp	.+2      	; 0x4178 <vfprintf+0x5fe>
    4176:	80 e2       	ldi	r24, 0x20	; 32
    4178:	07 fd       	sbrc	r16, 7
    417a:	8d e2       	ldi	r24, 0x2D	; 45
    417c:	b7 01       	movw	r22, r14
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	c4 d5       	rcall	.+2952   	; 0x4d0a <fputc>
    4182:	c1 16       	cp	r12, r17
    4184:	30 f4       	brcc	.+12     	; 0x4192 <vfprintf+0x618>
    4186:	b7 01       	movw	r22, r14
    4188:	80 e3       	ldi	r24, 0x30	; 48
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	be d5       	rcall	.+2940   	; 0x4d0a <fputc>
    418e:	11 50       	subi	r17, 0x01	; 1
    4190:	f8 cf       	rjmp	.-16     	; 0x4182 <vfprintf+0x608>
    4192:	ca 94       	dec	r12
    4194:	f3 01       	movw	r30, r6
    4196:	ec 0d       	add	r30, r12
    4198:	f1 1d       	adc	r31, r1
    419a:	80 81       	ld	r24, Z
    419c:	b7 01       	movw	r22, r14
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	b4 d5       	rcall	.+2920   	; 0x4d0a <fputc>
    41a2:	c1 10       	cpse	r12, r1
    41a4:	f6 cf       	rjmp	.-20     	; 0x4192 <vfprintf+0x618>
    41a6:	15 c0       	rjmp	.+42     	; 0x41d2 <vfprintf+0x658>
    41a8:	f4 e0       	ldi	r31, 0x04	; 4
    41aa:	f5 15       	cp	r31, r5
    41ac:	50 f5       	brcc	.+84     	; 0x4202 <vfprintf+0x688>
    41ae:	84 e0       	ldi	r24, 0x04	; 4
    41b0:	58 1a       	sub	r5, r24
    41b2:	93 fe       	sbrs	r9, 3
    41b4:	1e c0       	rjmp	.+60     	; 0x41f2 <vfprintf+0x678>
    41b6:	01 11       	cpse	r16, r1
    41b8:	25 c0       	rjmp	.+74     	; 0x4204 <vfprintf+0x68a>
    41ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    41bc:	23 ff       	sbrs	r18, 3
    41be:	27 c0       	rjmp	.+78     	; 0x420e <vfprintf+0x694>
    41c0:	06 e0       	ldi	r16, 0x06	; 6
    41c2:	11 e0       	ldi	r17, 0x01	; 1
    41c4:	39 2d       	mov	r19, r9
    41c6:	30 71       	andi	r19, 0x10	; 16
    41c8:	93 2e       	mov	r9, r19
    41ca:	f8 01       	movw	r30, r16
    41cc:	84 91       	lpm	r24, Z
    41ce:	81 11       	cpse	r24, r1
    41d0:	21 c0       	rjmp	.+66     	; 0x4214 <vfprintf+0x69a>
    41d2:	55 20       	and	r5, r5
    41d4:	09 f4       	brne	.+2      	; 0x41d8 <vfprintf+0x65e>
    41d6:	fc cc       	rjmp	.-1544   	; 0x3bd0 <vfprintf+0x56>
    41d8:	b7 01       	movw	r22, r14
    41da:	80 e2       	ldi	r24, 0x20	; 32
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	95 d5       	rcall	.+2858   	; 0x4d0a <fputc>
    41e0:	5a 94       	dec	r5
    41e2:	f7 cf       	rjmp	.-18     	; 0x41d2 <vfprintf+0x658>
    41e4:	f7 01       	movw	r30, r14
    41e6:	86 81       	ldd	r24, Z+6	; 0x06
    41e8:	97 81       	ldd	r25, Z+7	; 0x07
    41ea:	23 c0       	rjmp	.+70     	; 0x4232 <vfprintf+0x6b8>
    41ec:	8f ef       	ldi	r24, 0xFF	; 255
    41ee:	9f ef       	ldi	r25, 0xFF	; 255
    41f0:	20 c0       	rjmp	.+64     	; 0x4232 <vfprintf+0x6b8>
    41f2:	b7 01       	movw	r22, r14
    41f4:	80 e2       	ldi	r24, 0x20	; 32
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	88 d5       	rcall	.+2832   	; 0x4d0a <fputc>
    41fa:	5a 94       	dec	r5
    41fc:	51 10       	cpse	r5, r1
    41fe:	f9 cf       	rjmp	.-14     	; 0x41f2 <vfprintf+0x678>
    4200:	da cf       	rjmp	.-76     	; 0x41b6 <vfprintf+0x63c>
    4202:	51 2c       	mov	r5, r1
    4204:	b7 01       	movw	r22, r14
    4206:	80 2f       	mov	r24, r16
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	7f d5       	rcall	.+2814   	; 0x4d0a <fputc>
    420c:	d6 cf       	rjmp	.-84     	; 0x41ba <vfprintf+0x640>
    420e:	0a e0       	ldi	r16, 0x0A	; 10
    4210:	11 e0       	ldi	r17, 0x01	; 1
    4212:	d8 cf       	rjmp	.-80     	; 0x41c4 <vfprintf+0x64a>
    4214:	91 10       	cpse	r9, r1
    4216:	80 52       	subi	r24, 0x20	; 32
    4218:	b7 01       	movw	r22, r14
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	76 d5       	rcall	.+2796   	; 0x4d0a <fputc>
    421e:	0f 5f       	subi	r16, 0xFF	; 255
    4220:	1f 4f       	sbci	r17, 0xFF	; 255
    4222:	d3 cf       	rjmp	.-90     	; 0x41ca <vfprintf+0x650>
    4224:	23 e0       	ldi	r18, 0x03	; 3
    4226:	25 15       	cp	r18, r5
    4228:	10 f4       	brcc	.+4      	; 0x422e <vfprintf+0x6b4>
    422a:	83 e0       	ldi	r24, 0x03	; 3
    422c:	c1 cf       	rjmp	.-126    	; 0x41b0 <vfprintf+0x636>
    422e:	51 2c       	mov	r5, r1
    4230:	c4 cf       	rjmp	.-120    	; 0x41ba <vfprintf+0x640>
    4232:	60 96       	adiw	r28, 0x10	; 16
    4234:	e2 e1       	ldi	r30, 0x12	; 18
    4236:	f9 c3       	rjmp	.+2034   	; 0x4a2a <__epilogue_restores__>

00004238 <putval>:
    4238:	20 fd       	sbrc	r18, 0
    423a:	09 c0       	rjmp	.+18     	; 0x424e <putval+0x16>
    423c:	fc 01       	movw	r30, r24
    423e:	23 fd       	sbrc	r18, 3
    4240:	05 c0       	rjmp	.+10     	; 0x424c <putval+0x14>
    4242:	22 ff       	sbrs	r18, 2
    4244:	02 c0       	rjmp	.+4      	; 0x424a <putval+0x12>
    4246:	73 83       	std	Z+3, r23	; 0x03
    4248:	62 83       	std	Z+2, r22	; 0x02
    424a:	51 83       	std	Z+1, r21	; 0x01
    424c:	40 83       	st	Z, r20
    424e:	08 95       	ret

00004250 <mulacc>:
    4250:	44 fd       	sbrc	r20, 4
    4252:	17 c0       	rjmp	.+46     	; 0x4282 <mulacc+0x32>
    4254:	46 fd       	sbrc	r20, 6
    4256:	17 c0       	rjmp	.+46     	; 0x4286 <mulacc+0x36>
    4258:	ab 01       	movw	r20, r22
    425a:	bc 01       	movw	r22, r24
    425c:	da 01       	movw	r26, r20
    425e:	fb 01       	movw	r30, r22
    4260:	aa 0f       	add	r26, r26
    4262:	bb 1f       	adc	r27, r27
    4264:	ee 1f       	adc	r30, r30
    4266:	ff 1f       	adc	r31, r31
    4268:	10 94       	com	r1
    426a:	d1 f7       	brne	.-12     	; 0x4260 <mulacc+0x10>
    426c:	4a 0f       	add	r20, r26
    426e:	5b 1f       	adc	r21, r27
    4270:	6e 1f       	adc	r22, r30
    4272:	7f 1f       	adc	r23, r31
    4274:	cb 01       	movw	r24, r22
    4276:	ba 01       	movw	r22, r20
    4278:	66 0f       	add	r22, r22
    427a:	77 1f       	adc	r23, r23
    427c:	88 1f       	adc	r24, r24
    427e:	99 1f       	adc	r25, r25
    4280:	09 c0       	rjmp	.+18     	; 0x4294 <mulacc+0x44>
    4282:	33 e0       	ldi	r19, 0x03	; 3
    4284:	01 c0       	rjmp	.+2      	; 0x4288 <mulacc+0x38>
    4286:	34 e0       	ldi	r19, 0x04	; 4
    4288:	66 0f       	add	r22, r22
    428a:	77 1f       	adc	r23, r23
    428c:	88 1f       	adc	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	31 50       	subi	r19, 0x01	; 1
    4292:	d1 f7       	brne	.-12     	; 0x4288 <mulacc+0x38>
    4294:	62 0f       	add	r22, r18
    4296:	71 1d       	adc	r23, r1
    4298:	81 1d       	adc	r24, r1
    429a:	91 1d       	adc	r25, r1
    429c:	08 95       	ret

0000429e <skip_spaces>:
    429e:	0f 93       	push	r16
    42a0:	1f 93       	push	r17
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	8c 01       	movw	r16, r24
    42a8:	c8 01       	movw	r24, r16
    42aa:	f1 d4       	rcall	.+2530   	; 0x4c8e <fgetc>
    42ac:	ec 01       	movw	r28, r24
    42ae:	97 fd       	sbrc	r25, 7
    42b0:	06 c0       	rjmp	.+12     	; 0x42be <skip_spaces+0x20>
    42b2:	ae d4       	rcall	.+2396   	; 0x4c10 <isspace>
    42b4:	89 2b       	or	r24, r25
    42b6:	c1 f7       	brne	.-16     	; 0x42a8 <skip_spaces+0xa>
    42b8:	b8 01       	movw	r22, r16
    42ba:	ce 01       	movw	r24, r28
    42bc:	82 d5       	rcall	.+2820   	; 0x4dc2 <ungetc>
    42be:	ce 01       	movw	r24, r28
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	08 95       	ret

000042ca <conv_int>:
    42ca:	a0 e0       	ldi	r26, 0x00	; 0
    42cc:	b0 e0       	ldi	r27, 0x00	; 0
    42ce:	ea e6       	ldi	r30, 0x6A	; 106
    42d0:	f1 e2       	ldi	r31, 0x21	; 33
    42d2:	95 c3       	rjmp	.+1834   	; 0x49fe <__prologue_saves__+0xc>
    42d4:	7c 01       	movw	r14, r24
    42d6:	8b 01       	movw	r16, r22
    42d8:	6a 01       	movw	r12, r20
    42da:	d2 2f       	mov	r29, r18
    42dc:	d8 d4       	rcall	.+2480   	; 0x4c8e <fgetc>
    42de:	9c 01       	movw	r18, r24
    42e0:	33 27       	eor	r19, r19
    42e2:	2b 32       	cpi	r18, 0x2B	; 43
    42e4:	31 05       	cpc	r19, r1
    42e6:	21 f0       	breq	.+8      	; 0x42f0 <conv_int+0x26>
    42e8:	2d 32       	cpi	r18, 0x2D	; 45
    42ea:	31 05       	cpc	r19, r1
    42ec:	51 f4       	brne	.+20     	; 0x4302 <conv_int+0x38>
    42ee:	d0 68       	ori	r29, 0x80	; 128
    42f0:	01 50       	subi	r16, 0x01	; 1
    42f2:	11 09       	sbc	r17, r1
    42f4:	11 f4       	brne	.+4      	; 0x42fa <conv_int+0x30>
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	64 c0       	rjmp	.+200    	; 0x43c2 <conv_int+0xf8>
    42fa:	c7 01       	movw	r24, r14
    42fc:	c8 d4       	rcall	.+2448   	; 0x4c8e <fgetc>
    42fe:	97 fd       	sbrc	r25, 7
    4300:	fa cf       	rjmp	.-12     	; 0x42f6 <conv_int+0x2c>
    4302:	cd 2f       	mov	r28, r29
    4304:	cd 7f       	andi	r28, 0xFD	; 253
    4306:	2d 2f       	mov	r18, r29
    4308:	20 73       	andi	r18, 0x30	; 48
    430a:	09 f5       	brne	.+66     	; 0x434e <conv_int+0x84>
    430c:	80 33       	cpi	r24, 0x30	; 48
    430e:	f9 f4       	brne	.+62     	; 0x434e <conv_int+0x84>
    4310:	58 01       	movw	r10, r16
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	a8 1a       	sub	r10, r24
    4316:	b1 08       	sbc	r11, r1
    4318:	09 f4       	brne	.+2      	; 0x431c <conv_int+0x52>
    431a:	40 c0       	rjmp	.+128    	; 0x439c <conv_int+0xd2>
    431c:	c7 01       	movw	r24, r14
    431e:	b7 d4       	rcall	.+2414   	; 0x4c8e <fgetc>
    4320:	97 fd       	sbrc	r25, 7
    4322:	3c c0       	rjmp	.+120    	; 0x439c <conv_int+0xd2>
    4324:	9c 01       	movw	r18, r24
    4326:	2f 7d       	andi	r18, 0xDF	; 223
    4328:	33 27       	eor	r19, r19
    432a:	28 35       	cpi	r18, 0x58	; 88
    432c:	31 05       	cpc	r19, r1
    432e:	49 f4       	brne	.+18     	; 0x4342 <conv_int+0x78>
    4330:	c2 64       	ori	r28, 0x42	; 66
    4332:	02 50       	subi	r16, 0x02	; 2
    4334:	11 09       	sbc	r17, r1
    4336:	91 f1       	breq	.+100    	; 0x439c <conv_int+0xd2>
    4338:	c7 01       	movw	r24, r14
    433a:	a9 d4       	rcall	.+2386   	; 0x4c8e <fgetc>
    433c:	97 ff       	sbrs	r25, 7
    433e:	07 c0       	rjmp	.+14     	; 0x434e <conv_int+0x84>
    4340:	2d c0       	rjmp	.+90     	; 0x439c <conv_int+0xd2>
    4342:	d6 ff       	sbrs	r29, 6
    4344:	02 c0       	rjmp	.+4      	; 0x434a <conv_int+0x80>
    4346:	c2 60       	ori	r28, 0x02	; 2
    4348:	01 c0       	rjmp	.+2      	; 0x434c <conv_int+0x82>
    434a:	c2 61       	ori	r28, 0x12	; 18
    434c:	85 01       	movw	r16, r10
    434e:	81 2c       	mov	r8, r1
    4350:	91 2c       	mov	r9, r1
    4352:	54 01       	movw	r10, r8
    4354:	20 ed       	ldi	r18, 0xD0	; 208
    4356:	28 0f       	add	r18, r24
    4358:	28 30       	cpi	r18, 0x08	; 8
    435a:	78 f0       	brcs	.+30     	; 0x437a <conv_int+0xb0>
    435c:	c4 ff       	sbrs	r28, 4
    435e:	03 c0       	rjmp	.+6      	; 0x4366 <conv_int+0x9c>
    4360:	b7 01       	movw	r22, r14
    4362:	2f d5       	rcall	.+2654   	; 0x4dc2 <ungetc>
    4364:	18 c0       	rjmp	.+48     	; 0x4396 <conv_int+0xcc>
    4366:	2a 30       	cpi	r18, 0x0A	; 10
    4368:	40 f0       	brcs	.+16     	; 0x437a <conv_int+0xb0>
    436a:	c6 ff       	sbrs	r28, 6
    436c:	f9 cf       	rjmp	.-14     	; 0x4360 <conv_int+0x96>
    436e:	2f 7d       	andi	r18, 0xDF	; 223
    4370:	3f ee       	ldi	r19, 0xEF	; 239
    4372:	32 0f       	add	r19, r18
    4374:	36 30       	cpi	r19, 0x06	; 6
    4376:	a0 f7       	brcc	.-24     	; 0x4360 <conv_int+0x96>
    4378:	27 50       	subi	r18, 0x07	; 7
    437a:	4c 2f       	mov	r20, r28
    437c:	c5 01       	movw	r24, r10
    437e:	b4 01       	movw	r22, r8
    4380:	67 df       	rcall	.-306    	; 0x4250 <mulacc>
    4382:	4b 01       	movw	r8, r22
    4384:	5c 01       	movw	r10, r24
    4386:	c2 60       	ori	r28, 0x02	; 2
    4388:	01 50       	subi	r16, 0x01	; 1
    438a:	11 09       	sbc	r17, r1
    438c:	51 f0       	breq	.+20     	; 0x43a2 <conv_int+0xd8>
    438e:	c7 01       	movw	r24, r14
    4390:	7e d4       	rcall	.+2300   	; 0x4c8e <fgetc>
    4392:	97 ff       	sbrs	r25, 7
    4394:	df cf       	rjmp	.-66     	; 0x4354 <conv_int+0x8a>
    4396:	c1 fd       	sbrc	r28, 1
    4398:	04 c0       	rjmp	.+8      	; 0x43a2 <conv_int+0xd8>
    439a:	ad cf       	rjmp	.-166    	; 0x42f6 <conv_int+0x2c>
    439c:	81 2c       	mov	r8, r1
    439e:	91 2c       	mov	r9, r1
    43a0:	54 01       	movw	r10, r8
    43a2:	c7 ff       	sbrs	r28, 7
    43a4:	08 c0       	rjmp	.+16     	; 0x43b6 <conv_int+0xec>
    43a6:	b0 94       	com	r11
    43a8:	a0 94       	com	r10
    43aa:	90 94       	com	r9
    43ac:	80 94       	com	r8
    43ae:	81 1c       	adc	r8, r1
    43b0:	91 1c       	adc	r9, r1
    43b2:	a1 1c       	adc	r10, r1
    43b4:	b1 1c       	adc	r11, r1
    43b6:	2c 2f       	mov	r18, r28
    43b8:	b5 01       	movw	r22, r10
    43ba:	a4 01       	movw	r20, r8
    43bc:	c6 01       	movw	r24, r12
    43be:	3c df       	rcall	.-392    	; 0x4238 <putval>
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
    43c6:	ec e0       	ldi	r30, 0x0C	; 12
    43c8:	36 c3       	rjmp	.+1644   	; 0x4a36 <__epilogue_restores__+0xc>

000043ca <conv_brk>:
    43ca:	a0 e2       	ldi	r26, 0x20	; 32
    43cc:	b0 e0       	ldi	r27, 0x00	; 0
    43ce:	ea ee       	ldi	r30, 0xEA	; 234
    43d0:	f1 e2       	ldi	r31, 0x21	; 33
    43d2:	11 c3       	rjmp	.+1570   	; 0x49f6 <__prologue_saves__+0x4>
    43d4:	5c 01       	movw	r10, r24
    43d6:	4b 01       	movw	r8, r22
    43d8:	7a 01       	movw	r14, r20
    43da:	8e 01       	movw	r16, r28
    43dc:	0f 5f       	subi	r16, 0xFF	; 255
    43de:	1f 4f       	sbci	r17, 0xFF	; 255
    43e0:	68 01       	movw	r12, r16
    43e2:	80 e2       	ldi	r24, 0x20	; 32
    43e4:	f8 01       	movw	r30, r16
    43e6:	11 92       	st	Z+, r1
    43e8:	8a 95       	dec	r24
    43ea:	e9 f7       	brne	.-6      	; 0x43e6 <conv_brk+0x1c>
    43ec:	f5 01       	movw	r30, r10
    43ee:	53 80       	ldd	r5, Z+3	; 0x03
    43f0:	40 e0       	ldi	r20, 0x00	; 0
    43f2:	50 e0       	ldi	r21, 0x00	; 0
    43f4:	61 2c       	mov	r6, r1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	71 2c       	mov	r7, r1
    43fa:	a1 e0       	ldi	r26, 0x01	; 1
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	f9 01       	movw	r30, r18
    4400:	53 fc       	sbrc	r5, 3
    4402:	85 91       	lpm	r24, Z+
    4404:	53 fe       	sbrs	r5, 3
    4406:	81 91       	ld	r24, Z+
    4408:	8f 01       	movw	r16, r30
    440a:	48 2e       	mov	r4, r24
    440c:	9f 01       	movw	r18, r30
    440e:	81 11       	cpse	r24, r1
    4410:	03 c0       	rjmp	.+6      	; 0x4418 <conv_brk+0x4e>
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	94 c0       	rjmp	.+296    	; 0x4540 <conv_brk+0x176>
    4418:	8e 35       	cpi	r24, 0x5E	; 94
    441a:	19 f4       	brne	.+6      	; 0x4422 <conv_brk+0x58>
    441c:	41 15       	cp	r20, r1
    441e:	51 05       	cpc	r21, r1
    4420:	51 f1       	breq	.+84     	; 0x4476 <conv_brk+0xac>
    4422:	67 2d       	mov	r22, r7
    4424:	70 e0       	ldi	r23, 0x00	; 0
    4426:	64 17       	cp	r22, r20
    4428:	75 07       	cpc	r23, r21
    442a:	3c f4       	brge	.+14     	; 0x443a <conv_brk+0x70>
    442c:	8d 35       	cpi	r24, 0x5D	; 93
    442e:	61 f1       	breq	.+88     	; 0x4488 <conv_brk+0xbe>
    4430:	8d 32       	cpi	r24, 0x2D	; 45
    4432:	19 f4       	brne	.+6      	; 0x443a <conv_brk+0x70>
    4434:	99 23       	and	r25, r25
    4436:	11 f1       	breq	.+68     	; 0x447c <conv_brk+0xb2>
    4438:	03 c0       	rjmp	.+6      	; 0x4440 <conv_brk+0x76>
    443a:	99 23       	and	r25, r25
    443c:	09 f4       	brne	.+2      	; 0x4440 <conv_brk+0x76>
    443e:	6b c0       	rjmp	.+214    	; 0x4516 <conv_brk+0x14c>
    4440:	84 2d       	mov	r24, r4
    4442:	86 95       	lsr	r24
    4444:	86 95       	lsr	r24
    4446:	86 95       	lsr	r24
    4448:	f6 01       	movw	r30, r12
    444a:	e8 0f       	add	r30, r24
    444c:	f1 1d       	adc	r31, r1
    444e:	84 2d       	mov	r24, r4
    4450:	87 70       	andi	r24, 0x07	; 7
    4452:	8d 01       	movw	r16, r26
    4454:	02 c0       	rjmp	.+4      	; 0x445a <conv_brk+0x90>
    4456:	00 0f       	add	r16, r16
    4458:	11 1f       	adc	r17, r17
    445a:	8a 95       	dec	r24
    445c:	e2 f7       	brpl	.-8      	; 0x4456 <conv_brk+0x8c>
    445e:	c8 01       	movw	r24, r16
    4460:	90 81       	ld	r25, Z
    4462:	89 2b       	or	r24, r25
    4464:	80 83       	st	Z, r24
    4466:	64 14       	cp	r6, r4
    4468:	59 f0       	breq	.+22     	; 0x4480 <conv_brk+0xb6>
    446a:	46 14       	cp	r4, r6
    446c:	10 f4       	brcc	.+4      	; 0x4472 <conv_brk+0xa8>
    446e:	43 94       	inc	r4
    4470:	e7 cf       	rjmp	.-50     	; 0x4440 <conv_brk+0x76>
    4472:	4a 94       	dec	r4
    4474:	e5 cf       	rjmp	.-54     	; 0x4440 <conv_brk+0x76>
    4476:	77 24       	eor	r7, r7
    4478:	73 94       	inc	r7
    447a:	03 c0       	rjmp	.+6      	; 0x4482 <conv_brk+0xb8>
    447c:	91 e0       	ldi	r25, 0x01	; 1
    447e:	01 c0       	rjmp	.+2      	; 0x4482 <conv_brk+0xb8>
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	4f 5f       	subi	r20, 0xFF	; 255
    4484:	5f 4f       	sbci	r21, 0xFF	; 255
    4486:	bb cf       	rjmp	.-138    	; 0x43fe <conv_brk+0x34>
    4488:	99 23       	and	r25, r25
    448a:	19 f0       	breq	.+6      	; 0x4492 <conv_brk+0xc8>
    448c:	8e 81       	ldd	r24, Y+6	; 0x06
    448e:	80 62       	ori	r24, 0x20	; 32
    4490:	8e 83       	std	Y+6, r24	; 0x06
    4492:	71 10       	cpse	r7, r1
    4494:	03 c0       	rjmp	.+6      	; 0x449c <conv_brk+0xd2>
    4496:	77 24       	eor	r7, r7
    4498:	73 94       	inc	r7
    449a:	19 c0       	rjmp	.+50     	; 0x44ce <conv_brk+0x104>
    449c:	f6 01       	movw	r30, r12
    449e:	9e 01       	movw	r18, r28
    44a0:	2f 5d       	subi	r18, 0xDF	; 223
    44a2:	3f 4f       	sbci	r19, 0xFF	; 255
    44a4:	80 81       	ld	r24, Z
    44a6:	80 95       	com	r24
    44a8:	81 93       	st	Z+, r24
    44aa:	2e 17       	cp	r18, r30
    44ac:	3f 07       	cpc	r19, r31
    44ae:	d1 f7       	brne	.-12     	; 0x44a4 <conv_brk+0xda>
    44b0:	f2 cf       	rjmp	.-28     	; 0x4496 <conv_brk+0xcc>
    44b2:	e1 14       	cp	r14, r1
    44b4:	f1 04       	cpc	r15, r1
    44b6:	31 f0       	breq	.+12     	; 0x44c4 <conv_brk+0xfa>
    44b8:	f7 01       	movw	r30, r14
    44ba:	80 83       	st	Z, r24
    44bc:	b7 01       	movw	r22, r14
    44be:	6f 5f       	subi	r22, 0xFF	; 255
    44c0:	7f 4f       	sbci	r23, 0xFF	; 255
    44c2:	7b 01       	movw	r14, r22
    44c4:	71 e0       	ldi	r23, 0x01	; 1
    44c6:	87 1a       	sub	r8, r23
    44c8:	91 08       	sbc	r9, r1
    44ca:	71 2c       	mov	r7, r1
    44cc:	e9 f0       	breq	.+58     	; 0x4508 <conv_brk+0x13e>
    44ce:	c5 01       	movw	r24, r10
    44d0:	de d3       	rcall	.+1980   	; 0x4c8e <fgetc>
    44d2:	97 fd       	sbrc	r25, 7
    44d4:	17 c0       	rjmp	.+46     	; 0x4504 <conv_brk+0x13a>
    44d6:	fc 01       	movw	r30, r24
    44d8:	ff 27       	eor	r31, r31
    44da:	23 e0       	ldi	r18, 0x03	; 3
    44dc:	f5 95       	asr	r31
    44de:	e7 95       	ror	r30
    44e0:	2a 95       	dec	r18
    44e2:	e1 f7       	brne	.-8      	; 0x44dc <conv_brk+0x112>
    44e4:	ec 0d       	add	r30, r12
    44e6:	fd 1d       	adc	r31, r13
    44e8:	20 81       	ld	r18, Z
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	ac 01       	movw	r20, r24
    44ee:	47 70       	andi	r20, 0x07	; 7
    44f0:	55 27       	eor	r21, r21
    44f2:	02 c0       	rjmp	.+4      	; 0x44f8 <conv_brk+0x12e>
    44f4:	35 95       	asr	r19
    44f6:	27 95       	ror	r18
    44f8:	4a 95       	dec	r20
    44fa:	e2 f7       	brpl	.-8      	; 0x44f4 <conv_brk+0x12a>
    44fc:	20 fd       	sbrc	r18, 0
    44fe:	d9 cf       	rjmp	.-78     	; 0x44b2 <conv_brk+0xe8>
    4500:	b5 01       	movw	r22, r10
    4502:	5f d4       	rcall	.+2238   	; 0x4dc2 <ungetc>
    4504:	71 10       	cpse	r7, r1
    4506:	85 cf       	rjmp	.-246    	; 0x4412 <conv_brk+0x48>
    4508:	e1 14       	cp	r14, r1
    450a:	f1 04       	cpc	r15, r1
    450c:	11 f0       	breq	.+4      	; 0x4512 <conv_brk+0x148>
    450e:	f7 01       	movw	r30, r14
    4510:	10 82       	st	Z, r1
    4512:	c8 01       	movw	r24, r16
    4514:	15 c0       	rjmp	.+42     	; 0x4540 <conv_brk+0x176>
    4516:	68 2f       	mov	r22, r24
    4518:	66 95       	lsr	r22
    451a:	66 95       	lsr	r22
    451c:	66 95       	lsr	r22
    451e:	f6 01       	movw	r30, r12
    4520:	e6 0f       	add	r30, r22
    4522:	f1 1d       	adc	r31, r1
    4524:	68 2f       	mov	r22, r24
    4526:	67 70       	andi	r22, 0x07	; 7
    4528:	8d 01       	movw	r16, r26
    452a:	02 c0       	rjmp	.+4      	; 0x4530 <conv_brk+0x166>
    452c:	00 0f       	add	r16, r16
    452e:	11 1f       	adc	r17, r17
    4530:	6a 95       	dec	r22
    4532:	e2 f7       	brpl	.-8      	; 0x452c <conv_brk+0x162>
    4534:	b8 01       	movw	r22, r16
    4536:	70 81       	ld	r23, Z
    4538:	67 2b       	or	r22, r23
    453a:	60 83       	st	Z, r22
    453c:	68 2e       	mov	r6, r24
    453e:	a1 cf       	rjmp	.-190    	; 0x4482 <conv_brk+0xb8>
    4540:	a0 96       	adiw	r28, 0x20	; 32
    4542:	e0 e1       	ldi	r30, 0x10	; 16
    4544:	74 c2       	rjmp	.+1256   	; 0x4a2e <__epilogue_restores__+0x4>

00004546 <conv_flt>:
    4546:	2f 92       	push	r2
    4548:	3f 92       	push	r3
    454a:	4f 92       	push	r4
    454c:	5f 92       	push	r5
    454e:	6f 92       	push	r6
    4550:	7f 92       	push	r7
    4552:	9f 92       	push	r9
    4554:	af 92       	push	r10
    4556:	bf 92       	push	r11
    4558:	cf 92       	push	r12
    455a:	df 92       	push	r13
    455c:	ef 92       	push	r14
    455e:	ff 92       	push	r15
    4560:	0f 93       	push	r16
    4562:	1f 93       	push	r17
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	6c 01       	movw	r12, r24
    456a:	8b 01       	movw	r16, r22
    456c:	1a 01       	movw	r2, r20
    456e:	8f d3       	rcall	.+1822   	; 0x4c8e <fgetc>
    4570:	ec 01       	movw	r28, r24
    4572:	99 27       	eor	r25, r25
    4574:	8b 32       	cpi	r24, 0x2B	; 43
    4576:	91 05       	cpc	r25, r1
    4578:	29 f0       	breq	.+10     	; 0x4584 <conv_flt+0x3e>
    457a:	8d 97       	sbiw	r24, 0x2d	; 45
    457c:	79 f4       	brne	.+30     	; 0x459c <conv_flt+0x56>
    457e:	30 e8       	ldi	r19, 0x80	; 128
    4580:	93 2e       	mov	r9, r19
    4582:	01 c0       	rjmp	.+2      	; 0x4586 <conv_flt+0x40>
    4584:	91 2c       	mov	r9, r1
    4586:	01 50       	subi	r16, 0x01	; 1
    4588:	11 09       	sbc	r17, r1
    458a:	11 f4       	brne	.+4      	; 0x4590 <conv_flt+0x4a>
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	fe c0       	rjmp	.+508    	; 0x478c <conv_flt+0x246>
    4590:	c6 01       	movw	r24, r12
    4592:	7d d3       	rcall	.+1786   	; 0x4c8e <fgetc>
    4594:	ec 01       	movw	r28, r24
    4596:	97 ff       	sbrs	r25, 7
    4598:	02 c0       	rjmp	.+4      	; 0x459e <conv_flt+0x58>
    459a:	f8 cf       	rjmp	.-16     	; 0x458c <conv_flt+0x46>
    459c:	91 2c       	mov	r9, r1
    459e:	ce 01       	movw	r24, r28
    45a0:	3f d3       	rcall	.+1662   	; 0x4c20 <tolower>
    45a2:	89 36       	cpi	r24, 0x69	; 105
    45a4:	91 05       	cpc	r25, r1
    45a6:	31 f0       	breq	.+12     	; 0x45b4 <conv_flt+0x6e>
    45a8:	8e 36       	cpi	r24, 0x6E	; 110
    45aa:	91 05       	cpc	r25, r1
    45ac:	81 f5       	brne	.+96     	; 0x460e <conv_flt+0xc8>
    45ae:	c6 e5       	ldi	r28, 0x56	; 86
    45b0:	df e0       	ldi	r29, 0x0F	; 15
    45b2:	02 c0       	rjmp	.+4      	; 0x45b8 <conv_flt+0x72>
    45b4:	c9 e5       	ldi	r28, 0x59	; 89
    45b6:	df e0       	ldi	r29, 0x0F	; 15
    45b8:	21 96       	adiw	r28, 0x01	; 1
    45ba:	fe 01       	movw	r30, r28
    45bc:	31 97       	sbiw	r30, 0x01	; 1
    45be:	b4 90       	lpm	r11, Z
    45c0:	bb 20       	and	r11, r11
    45c2:	b1 f0       	breq	.+44     	; 0x45f0 <conv_flt+0xaa>
    45c4:	01 50       	subi	r16, 0x01	; 1
    45c6:	11 09       	sbc	r17, r1
    45c8:	79 f0       	breq	.+30     	; 0x45e8 <conv_flt+0xa2>
    45ca:	c6 01       	movw	r24, r12
    45cc:	60 d3       	rcall	.+1728   	; 0x4c8e <fgetc>
    45ce:	7c 01       	movw	r14, r24
    45d0:	97 fd       	sbrc	r25, 7
    45d2:	0a c0       	rjmp	.+20     	; 0x45e8 <conv_flt+0xa2>
    45d4:	25 d3       	rcall	.+1610   	; 0x4c20 <tolower>
    45d6:	99 27       	eor	r25, r25
    45d8:	eb 2d       	mov	r30, r11
    45da:	f0 e0       	ldi	r31, 0x00	; 0
    45dc:	8e 17       	cp	r24, r30
    45de:	9f 07       	cpc	r25, r31
    45e0:	59 f3       	breq	.-42     	; 0x45b8 <conv_flt+0x72>
    45e2:	b6 01       	movw	r22, r12
    45e4:	c7 01       	movw	r24, r14
    45e6:	ed d3       	rcall	.+2010   	; 0x4dc2 <ungetc>
    45e8:	cc 55       	subi	r28, 0x5C	; 92
    45ea:	df 40       	sbci	r29, 0x0F	; 15
    45ec:	79 f6       	brne	.-98     	; 0x458c <conv_flt+0x46>
    45ee:	03 c0       	rjmp	.+6      	; 0x45f6 <conv_flt+0xb0>
    45f0:	c9 55       	subi	r28, 0x59	; 89
    45f2:	df 40       	sbci	r29, 0x0F	; 15
    45f4:	29 f0       	breq	.+10     	; 0x4600 <conv_flt+0xba>
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	a0 e8       	ldi	r26, 0x80	; 128
    45fc:	bf e7       	ldi	r27, 0x7F	; 127
    45fe:	04 c0       	rjmp	.+8      	; 0x4608 <conv_flt+0xc2>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	a0 ec       	ldi	r26, 0xC0	; 192
    4606:	bf e7       	ldi	r27, 0x7F	; 127
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	af c0       	rjmp	.+350    	; 0x476c <conv_flt+0x226>
    460e:	41 2c       	mov	r4, r1
    4610:	51 2c       	mov	r5, r1
    4612:	32 01       	movw	r6, r4
    4614:	e1 2c       	mov	r14, r1
    4616:	f1 2c       	mov	r15, r1
    4618:	2c 2f       	mov	r18, r28
    461a:	20 53       	subi	r18, 0x30	; 48
    461c:	2a 30       	cpi	r18, 0x0A	; 10
    461e:	08 f5       	brcc	.+66     	; 0x4662 <conv_flt+0x11c>
    4620:	e9 2d       	mov	r30, r9
    4622:	e2 60       	ori	r30, 0x02	; 2
    4624:	be 2e       	mov	r11, r30
    4626:	89 2d       	mov	r24, r9
    4628:	88 70       	andi	r24, 0x08	; 8
    462a:	92 fe       	sbrs	r9, 2
    462c:	06 c0       	rjmp	.+12     	; 0x463a <conv_flt+0xf4>
    462e:	81 11       	cpse	r24, r1
    4630:	1f c0       	rjmp	.+62     	; 0x4670 <conv_flt+0x12a>
    4632:	ff ef       	ldi	r31, 0xFF	; 255
    4634:	ef 1a       	sub	r14, r31
    4636:	ff 0a       	sbc	r15, r31
    4638:	1b c0       	rjmp	.+54     	; 0x4670 <conv_flt+0x12a>
    463a:	88 23       	and	r24, r24
    463c:	19 f0       	breq	.+6      	; 0x4644 <conv_flt+0xfe>
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	e8 1a       	sub	r14, r24
    4642:	f1 08       	sbc	r15, r1
    4644:	40 e2       	ldi	r20, 0x20	; 32
    4646:	c3 01       	movw	r24, r6
    4648:	b2 01       	movw	r22, r4
    464a:	02 de       	rcall	.-1020   	; 0x4250 <mulacc>
    464c:	2b 01       	movw	r4, r22
    464e:	3c 01       	movw	r6, r24
    4650:	68 39       	cpi	r22, 0x98	; 152
    4652:	79 49       	sbci	r23, 0x99	; 153
    4654:	89 49       	sbci	r24, 0x99	; 153
    4656:	99 41       	sbci	r25, 0x19	; 25
    4658:	58 f0       	brcs	.+22     	; 0x4670 <conv_flt+0x12a>
    465a:	f9 2d       	mov	r31, r9
    465c:	f6 60       	ori	r31, 0x06	; 6
    465e:	bf 2e       	mov	r11, r31
    4660:	07 c0       	rjmp	.+14     	; 0x4670 <conv_flt+0x12a>
    4662:	2e 3f       	cpi	r18, 0xFE	; 254
    4664:	81 f4       	brne	.+32     	; 0x4686 <conv_flt+0x140>
    4666:	93 fc       	sbrc	r9, 3
    4668:	0e c0       	rjmp	.+28     	; 0x4686 <conv_flt+0x140>
    466a:	29 2d       	mov	r18, r9
    466c:	28 60       	ori	r18, 0x08	; 8
    466e:	b2 2e       	mov	r11, r18
    4670:	01 50       	subi	r16, 0x01	; 1
    4672:	11 09       	sbc	r17, r1
    4674:	39 f0       	breq	.+14     	; 0x4684 <conv_flt+0x13e>
    4676:	c6 01       	movw	r24, r12
    4678:	0a d3       	rcall	.+1556   	; 0x4c8e <fgetc>
    467a:	ec 01       	movw	r28, r24
    467c:	9b 2c       	mov	r9, r11
    467e:	97 ff       	sbrs	r25, 7
    4680:	cb cf       	rjmp	.-106    	; 0x4618 <conv_flt+0xd2>
    4682:	01 c0       	rjmp	.+2      	; 0x4686 <conv_flt+0x140>
    4684:	9b 2c       	mov	r9, r11
    4686:	91 fe       	sbrs	r9, 1
    4688:	81 cf       	rjmp	.-254    	; 0x458c <conv_flt+0x46>
    468a:	ce 01       	movw	r24, r28
    468c:	8f 7d       	andi	r24, 0xDF	; 223
    468e:	99 27       	eor	r25, r25
    4690:	85 34       	cpi	r24, 0x45	; 69
    4692:	91 05       	cpc	r25, r1
    4694:	09 f0       	breq	.+2      	; 0x4698 <conv_flt+0x152>
    4696:	3e c0       	rjmp	.+124    	; 0x4714 <conv_flt+0x1ce>
    4698:	58 01       	movw	r10, r16
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	a8 1a       	sub	r10, r24
    469e:	b1 08       	sbc	r11, r1
    46a0:	09 f4       	brne	.+2      	; 0x46a4 <conv_flt+0x15e>
    46a2:	74 cf       	rjmp	.-280    	; 0x458c <conv_flt+0x46>
    46a4:	c6 01       	movw	r24, r12
    46a6:	f3 d2       	rcall	.+1510   	; 0x4c8e <fgetc>
    46a8:	ec 01       	movw	r28, r24
    46aa:	97 fd       	sbrc	r25, 7
    46ac:	6f cf       	rjmp	.-290    	; 0x458c <conv_flt+0x46>
    46ae:	99 27       	eor	r25, r25
    46b0:	8b 32       	cpi	r24, 0x2B	; 43
    46b2:	91 05       	cpc	r25, r1
    46b4:	29 f0       	breq	.+10     	; 0x46c0 <conv_flt+0x17a>
    46b6:	8d 97       	sbiw	r24, 0x2d	; 45
    46b8:	61 f4       	brne	.+24     	; 0x46d2 <conv_flt+0x18c>
    46ba:	e9 2d       	mov	r30, r9
    46bc:	e0 61       	ori	r30, 0x10	; 16
    46be:	9e 2e       	mov	r9, r30
    46c0:	58 01       	movw	r10, r16
    46c2:	f2 e0       	ldi	r31, 0x02	; 2
    46c4:	af 1a       	sub	r10, r31
    46c6:	b1 08       	sbc	r11, r1
    46c8:	09 f4       	brne	.+2      	; 0x46cc <conv_flt+0x186>
    46ca:	60 cf       	rjmp	.-320    	; 0x458c <conv_flt+0x46>
    46cc:	c6 01       	movw	r24, r12
    46ce:	df d2       	rcall	.+1470   	; 0x4c8e <fgetc>
    46d0:	ec 01       	movw	r28, r24
    46d2:	ce 01       	movw	r24, r28
    46d4:	c0 97       	sbiw	r24, 0x30	; 48
    46d6:	0a 97       	sbiw	r24, 0x0a	; 10
    46d8:	08 f0       	brcs	.+2      	; 0x46dc <conv_flt+0x196>
    46da:	58 cf       	rjmp	.-336    	; 0x458c <conv_flt+0x46>
    46dc:	85 01       	movw	r16, r10
    46de:	a1 2c       	mov	r10, r1
    46e0:	b1 2c       	mov	r11, r1
    46e2:	b5 01       	movw	r22, r10
    46e4:	bb 0c       	add	r11, r11
    46e6:	88 0b       	sbc	r24, r24
    46e8:	99 0b       	sbc	r25, r25
    46ea:	2c 2f       	mov	r18, r28
    46ec:	20 53       	subi	r18, 0x30	; 48
    46ee:	40 e2       	ldi	r20, 0x20	; 32
    46f0:	af dd       	rcall	.-1186   	; 0x4250 <mulacc>
    46f2:	5b 01       	movw	r10, r22
    46f4:	01 50       	subi	r16, 0x01	; 1
    46f6:	11 09       	sbc	r17, r1
    46f8:	31 f0       	breq	.+12     	; 0x4706 <conv_flt+0x1c0>
    46fa:	c6 01       	movw	r24, r12
    46fc:	c8 d2       	rcall	.+1424   	; 0x4c8e <fgetc>
    46fe:	ec 01       	movw	r28, r24
    4700:	c0 97       	sbiw	r24, 0x30	; 48
    4702:	0a 97       	sbiw	r24, 0x0a	; 10
    4704:	70 f3       	brcs	.-36     	; 0x46e2 <conv_flt+0x19c>
    4706:	94 fe       	sbrs	r9, 4
    4708:	03 c0       	rjmp	.+6      	; 0x4710 <conv_flt+0x1ca>
    470a:	b1 94       	neg	r11
    470c:	a1 94       	neg	r10
    470e:	b1 08       	sbc	r11, r1
    4710:	ea 0c       	add	r14, r10
    4712:	fb 1c       	adc	r15, r11
    4714:	01 2b       	or	r16, r17
    4716:	29 f0       	breq	.+10     	; 0x4722 <conv_flt+0x1dc>
    4718:	d7 fd       	sbrc	r29, 7
    471a:	03 c0       	rjmp	.+6      	; 0x4722 <conv_flt+0x1dc>
    471c:	b6 01       	movw	r22, r12
    471e:	ce 01       	movw	r24, r28
    4720:	50 d3       	rcall	.+1696   	; 0x4dc2 <ungetc>
    4722:	c3 01       	movw	r24, r6
    4724:	b2 01       	movw	r22, r4
    4726:	98 d8       	rcall	.-3792   	; 0x3858 <__floatunsisf>
    4728:	f7 fe       	sbrs	r15, 7
    472a:	06 c0       	rjmp	.+12     	; 0x4738 <conv_flt+0x1f2>
    472c:	f1 94       	neg	r15
    472e:	e1 94       	neg	r14
    4730:	f1 08       	sbc	r15, r1
    4732:	c5 e7       	ldi	r28, 0x75	; 117
    4734:	df e0       	ldi	r29, 0x0F	; 15
    4736:	02 c0       	rjmp	.+4      	; 0x473c <conv_flt+0x1f6>
    4738:	cd e8       	ldi	r28, 0x8D	; 141
    473a:	df e0       	ldi	r29, 0x0F	; 15
    473c:	6e 01       	movw	r12, r28
    473e:	28 e1       	ldi	r18, 0x18	; 24
    4740:	c2 1a       	sub	r12, r18
    4742:	d1 08       	sbc	r13, r1
    4744:	00 e2       	ldi	r16, 0x20	; 32
    4746:	10 e0       	ldi	r17, 0x00	; 0
    4748:	e0 16       	cp	r14, r16
    474a:	f1 06       	cpc	r15, r17
    474c:	48 f0       	brcs	.+18     	; 0x4760 <conv_flt+0x21a>
    474e:	fe 01       	movw	r30, r28
    4750:	25 91       	lpm	r18, Z+
    4752:	35 91       	lpm	r19, Z+
    4754:	45 91       	lpm	r20, Z+
    4756:	54 91       	lpm	r21, Z
    4758:	7a d9       	rcall	.-3340   	; 0x3a4e <__mulsf3>
    475a:	e0 1a       	sub	r14, r16
    475c:	f1 0a       	sbc	r15, r17
    475e:	f4 cf       	rjmp	.-24     	; 0x4748 <conv_flt+0x202>
    4760:	24 97       	sbiw	r28, 0x04	; 4
    4762:	16 95       	lsr	r17
    4764:	07 95       	ror	r16
    4766:	cc 16       	cp	r12, r28
    4768:	dd 06       	cpc	r13, r29
    476a:	71 f7       	brne	.-36     	; 0x4748 <conv_flt+0x202>
    476c:	97 fe       	sbrs	r9, 7
    476e:	05 c0       	rjmp	.+10     	; 0x477a <conv_flt+0x234>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	b0 58       	subi	r27, 0x80	; 128
    4776:	bc 01       	movw	r22, r24
    4778:	cd 01       	movw	r24, r26
    477a:	21 14       	cp	r2, r1
    477c:	31 04       	cpc	r3, r1
    477e:	29 f0       	breq	.+10     	; 0x478a <conv_flt+0x244>
    4780:	f1 01       	movw	r30, r2
    4782:	60 83       	st	Z, r22
    4784:	71 83       	std	Z+1, r23	; 0x01
    4786:	82 83       	std	Z+2, r24	; 0x02
    4788:	93 83       	std	Z+3, r25	; 0x03
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	df 91       	pop	r29
    478e:	cf 91       	pop	r28
    4790:	1f 91       	pop	r17
    4792:	0f 91       	pop	r16
    4794:	ff 90       	pop	r15
    4796:	ef 90       	pop	r14
    4798:	df 90       	pop	r13
    479a:	cf 90       	pop	r12
    479c:	bf 90       	pop	r11
    479e:	af 90       	pop	r10
    47a0:	9f 90       	pop	r9
    47a2:	7f 90       	pop	r7
    47a4:	6f 90       	pop	r6
    47a6:	5f 90       	pop	r5
    47a8:	4f 90       	pop	r4
    47aa:	3f 90       	pop	r3
    47ac:	2f 90       	pop	r2
    47ae:	08 95       	ret

000047b0 <vfscanf>:
    47b0:	a0 e0       	ldi	r26, 0x00	; 0
    47b2:	b0 e0       	ldi	r27, 0x00	; 0
    47b4:	ed ed       	ldi	r30, 0xDD	; 221
    47b6:	f3 e2       	ldi	r31, 0x23	; 35
    47b8:	20 c1       	rjmp	.+576    	; 0x49fa <__prologue_saves__+0x8>
    47ba:	5c 01       	movw	r10, r24
    47bc:	eb 01       	movw	r28, r22
    47be:	4a 01       	movw	r8, r20
    47c0:	fc 01       	movw	r30, r24
    47c2:	17 82       	std	Z+7, r1	; 0x07
    47c4:	16 82       	std	Z+6, r1	; 0x06
    47c6:	61 2c       	mov	r6, r1
    47c8:	f5 01       	movw	r30, r10
    47ca:	03 81       	ldd	r16, Z+3	; 0x03
    47cc:	fe 01       	movw	r30, r28
    47ce:	03 fd       	sbrc	r16, 3
    47d0:	85 91       	lpm	r24, Z+
    47d2:	03 ff       	sbrs	r16, 3
    47d4:	81 91       	ld	r24, Z+
    47d6:	18 2f       	mov	r17, r24
    47d8:	ef 01       	movw	r28, r30
    47da:	88 23       	and	r24, r24
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <vfscanf+0x30>
    47de:	00 c1       	rjmp	.+512    	; 0x49e0 <vfscanf+0x230>
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	16 d2       	rcall	.+1068   	; 0x4c10 <isspace>
    47e4:	89 2b       	or	r24, r25
    47e6:	19 f0       	breq	.+6      	; 0x47ee <vfscanf+0x3e>
    47e8:	c5 01       	movw	r24, r10
    47ea:	59 dd       	rcall	.-1358   	; 0x429e <skip_spaces>
    47ec:	ed cf       	rjmp	.-38     	; 0x47c8 <vfscanf+0x18>
    47ee:	15 32       	cpi	r17, 0x25	; 37
    47f0:	41 f4       	brne	.+16     	; 0x4802 <vfscanf+0x52>
    47f2:	fe 01       	movw	r30, r28
    47f4:	03 fd       	sbrc	r16, 3
    47f6:	15 91       	lpm	r17, Z+
    47f8:	03 ff       	sbrs	r16, 3
    47fa:	11 91       	ld	r17, Z+
    47fc:	ef 01       	movw	r28, r30
    47fe:	15 32       	cpi	r17, 0x25	; 37
    4800:	71 f4       	brne	.+28     	; 0x481e <vfscanf+0x6e>
    4802:	c5 01       	movw	r24, r10
    4804:	44 d2       	rcall	.+1160   	; 0x4c8e <fgetc>
    4806:	97 fd       	sbrc	r25, 7
    4808:	e9 c0       	rjmp	.+466    	; 0x49dc <vfscanf+0x22c>
    480a:	41 2f       	mov	r20, r17
    480c:	50 e0       	ldi	r21, 0x00	; 0
    480e:	9c 01       	movw	r18, r24
    4810:	33 27       	eor	r19, r19
    4812:	24 17       	cp	r18, r20
    4814:	35 07       	cpc	r19, r21
    4816:	c1 f2       	breq	.-80     	; 0x47c8 <vfscanf+0x18>
    4818:	b5 01       	movw	r22, r10
    481a:	d3 d2       	rcall	.+1446   	; 0x4dc2 <ungetc>
    481c:	e1 c0       	rjmp	.+450    	; 0x49e0 <vfscanf+0x230>
    481e:	1a 32       	cpi	r17, 0x2A	; 42
    4820:	41 f4       	brne	.+16     	; 0x4832 <vfscanf+0x82>
    4822:	03 fd       	sbrc	r16, 3
    4824:	15 91       	lpm	r17, Z+
    4826:	03 ff       	sbrs	r16, 3
    4828:	11 91       	ld	r17, Z+
    482a:	ef 01       	movw	r28, r30
    482c:	77 24       	eor	r7, r7
    482e:	73 94       	inc	r7
    4830:	01 c0       	rjmp	.+2      	; 0x4834 <vfscanf+0x84>
    4832:	71 2c       	mov	r7, r1
    4834:	e1 2c       	mov	r14, r1
    4836:	f1 2c       	mov	r15, r1
    4838:	20 ed       	ldi	r18, 0xD0	; 208
    483a:	21 0f       	add	r18, r17
    483c:	2a 30       	cpi	r18, 0x0A	; 10
    483e:	80 f4       	brcc	.+32     	; 0x4860 <vfscanf+0xb0>
    4840:	f7 2d       	mov	r31, r7
    4842:	f2 60       	ori	r31, 0x02	; 2
    4844:	7f 2e       	mov	r7, r31
    4846:	b7 01       	movw	r22, r14
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	40 e2       	ldi	r20, 0x20	; 32
    484e:	00 dd       	rcall	.-1536   	; 0x4250 <mulacc>
    4850:	7b 01       	movw	r14, r22
    4852:	fe 01       	movw	r30, r28
    4854:	03 fd       	sbrc	r16, 3
    4856:	15 91       	lpm	r17, Z+
    4858:	03 ff       	sbrs	r16, 3
    485a:	11 91       	ld	r17, Z+
    485c:	ef 01       	movw	r28, r30
    485e:	ec cf       	rjmp	.-40     	; 0x4838 <vfscanf+0x88>
    4860:	71 fe       	sbrs	r7, 1
    4862:	04 c0       	rjmp	.+8      	; 0x486c <vfscanf+0xbc>
    4864:	e1 14       	cp	r14, r1
    4866:	f1 04       	cpc	r15, r1
    4868:	21 f4       	brne	.+8      	; 0x4872 <vfscanf+0xc2>
    486a:	ba c0       	rjmp	.+372    	; 0x49e0 <vfscanf+0x230>
    486c:	ee 24       	eor	r14, r14
    486e:	ea 94       	dec	r14
    4870:	fe 2c       	mov	r15, r14
    4872:	18 36       	cpi	r17, 0x68	; 104
    4874:	19 f0       	breq	.+6      	; 0x487c <vfscanf+0xcc>
    4876:	1c 36       	cpi	r17, 0x6C	; 108
    4878:	61 f0       	breq	.+24     	; 0x4892 <vfscanf+0xe2>
    487a:	14 c0       	rjmp	.+40     	; 0x48a4 <vfscanf+0xf4>
    487c:	fe 01       	movw	r30, r28
    487e:	03 fd       	sbrc	r16, 3
    4880:	15 91       	lpm	r17, Z+
    4882:	03 ff       	sbrs	r16, 3
    4884:	11 91       	ld	r17, Z+
    4886:	ef 01       	movw	r28, r30
    4888:	18 36       	cpi	r17, 0x68	; 104
    488a:	61 f4       	brne	.+24     	; 0x48a4 <vfscanf+0xf4>
    488c:	87 2d       	mov	r24, r7
    488e:	88 60       	ori	r24, 0x08	; 8
    4890:	78 2e       	mov	r7, r24
    4892:	97 2d       	mov	r25, r7
    4894:	94 60       	ori	r25, 0x04	; 4
    4896:	79 2e       	mov	r7, r25
    4898:	fe 01       	movw	r30, r28
    489a:	03 fd       	sbrc	r16, 3
    489c:	15 91       	lpm	r17, Z+
    489e:	03 ff       	sbrs	r16, 3
    48a0:	11 91       	ld	r17, Z+
    48a2:	ef 01       	movw	r28, r30
    48a4:	11 23       	and	r17, r17
    48a6:	09 f4       	brne	.+2      	; 0x48aa <vfscanf+0xfa>
    48a8:	9b c0       	rjmp	.+310    	; 0x49e0 <vfscanf+0x230>
    48aa:	61 2f       	mov	r22, r17
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	84 e4       	ldi	r24, 0x44	; 68
    48b0:	9f e0       	ldi	r25, 0x0F	; 15
    48b2:	be d1       	rcall	.+892    	; 0x4c30 <strchr_P>
    48b4:	89 2b       	or	r24, r25
    48b6:	09 f4       	brne	.+2      	; 0x48ba <vfscanf+0x10a>
    48b8:	93 c0       	rjmp	.+294    	; 0x49e0 <vfscanf+0x230>
    48ba:	70 fc       	sbrc	r7, 0
    48bc:	07 c0       	rjmp	.+14     	; 0x48cc <vfscanf+0x11c>
    48be:	f4 01       	movw	r30, r8
    48c0:	c0 80       	ld	r12, Z
    48c2:	d1 80       	ldd	r13, Z+1	; 0x01
    48c4:	c4 01       	movw	r24, r8
    48c6:	02 96       	adiw	r24, 0x02	; 2
    48c8:	4c 01       	movw	r8, r24
    48ca:	02 c0       	rjmp	.+4      	; 0x48d0 <vfscanf+0x120>
    48cc:	c1 2c       	mov	r12, r1
    48ce:	d1 2c       	mov	r13, r1
    48d0:	1e 36       	cpi	r17, 0x6E	; 110
    48d2:	49 f4       	brne	.+18     	; 0x48e6 <vfscanf+0x136>
    48d4:	f5 01       	movw	r30, r10
    48d6:	46 81       	ldd	r20, Z+6	; 0x06
    48d8:	57 81       	ldd	r21, Z+7	; 0x07
    48da:	60 e0       	ldi	r22, 0x00	; 0
    48dc:	70 e0       	ldi	r23, 0x00	; 0
    48de:	27 2d       	mov	r18, r7
    48e0:	c6 01       	movw	r24, r12
    48e2:	aa dc       	rcall	.-1708   	; 0x4238 <putval>
    48e4:	71 cf       	rjmp	.-286    	; 0x47c8 <vfscanf+0x18>
    48e6:	13 36       	cpi	r17, 0x63	; 99
    48e8:	b1 f4       	brne	.+44     	; 0x4916 <vfscanf+0x166>
    48ea:	71 fc       	sbrc	r7, 1
    48ec:	03 c0       	rjmp	.+6      	; 0x48f4 <vfscanf+0x144>
    48ee:	ee 24       	eor	r14, r14
    48f0:	e3 94       	inc	r14
    48f2:	f1 2c       	mov	r15, r1
    48f4:	c5 01       	movw	r24, r10
    48f6:	cb d1       	rcall	.+918    	; 0x4c8e <fgetc>
    48f8:	97 fd       	sbrc	r25, 7
    48fa:	70 c0       	rjmp	.+224    	; 0x49dc <vfscanf+0x22c>
    48fc:	c1 14       	cp	r12, r1
    48fe:	d1 04       	cpc	r13, r1
    4900:	29 f0       	breq	.+10     	; 0x490c <vfscanf+0x15c>
    4902:	f6 01       	movw	r30, r12
    4904:	80 83       	st	Z, r24
    4906:	c6 01       	movw	r24, r12
    4908:	01 96       	adiw	r24, 0x01	; 1
    490a:	6c 01       	movw	r12, r24
    490c:	91 e0       	ldi	r25, 0x01	; 1
    490e:	e9 1a       	sub	r14, r25
    4910:	f1 08       	sbc	r15, r1
    4912:	81 f7       	brne	.-32     	; 0x48f4 <vfscanf+0x144>
    4914:	5f c0       	rjmp	.+190    	; 0x49d4 <vfscanf+0x224>
    4916:	1b 35       	cpi	r17, 0x5B	; 91
    4918:	51 f4       	brne	.+20     	; 0x492e <vfscanf+0x17e>
    491a:	9e 01       	movw	r18, r28
    491c:	a6 01       	movw	r20, r12
    491e:	b7 01       	movw	r22, r14
    4920:	c5 01       	movw	r24, r10
    4922:	53 dd       	rcall	.-1370   	; 0x43ca <conv_brk>
    4924:	ec 01       	movw	r28, r24
    4926:	89 2b       	or	r24, r25
    4928:	09 f0       	breq	.+2      	; 0x492c <vfscanf+0x17c>
    492a:	54 c0       	rjmp	.+168    	; 0x49d4 <vfscanf+0x224>
    492c:	4e c0       	rjmp	.+156    	; 0x49ca <vfscanf+0x21a>
    492e:	c5 01       	movw	r24, r10
    4930:	b6 dc       	rcall	.-1684   	; 0x429e <skip_spaces>
    4932:	97 fd       	sbrc	r25, 7
    4934:	53 c0       	rjmp	.+166    	; 0x49dc <vfscanf+0x22c>
    4936:	1f 36       	cpi	r17, 0x6F	; 111
    4938:	c9 f1       	breq	.+114    	; 0x49ac <vfscanf+0x1fc>
    493a:	40 f4       	brcc	.+16     	; 0x494c <vfscanf+0x19c>
    493c:	14 36       	cpi	r17, 0x64	; 100
    493e:	91 f1       	breq	.+100    	; 0x49a4 <vfscanf+0x1f4>
    4940:	19 36       	cpi	r17, 0x69	; 105
    4942:	b9 f1       	breq	.+110    	; 0x49b2 <vfscanf+0x202>
    4944:	18 35       	cpi	r17, 0x58	; 88
    4946:	09 f0       	breq	.+2      	; 0x494a <vfscanf+0x19a>
    4948:	3a c0       	rjmp	.+116    	; 0x49be <vfscanf+0x20e>
    494a:	28 c0       	rjmp	.+80     	; 0x499c <vfscanf+0x1ec>
    494c:	13 37       	cpi	r17, 0x73	; 115
    494e:	a9 f0       	breq	.+42     	; 0x497a <vfscanf+0x1ca>
    4950:	18 f4       	brcc	.+6      	; 0x4958 <vfscanf+0x1a8>
    4952:	10 37       	cpi	r17, 0x70	; 112
    4954:	19 f1       	breq	.+70     	; 0x499c <vfscanf+0x1ec>
    4956:	33 c0       	rjmp	.+102    	; 0x49be <vfscanf+0x20e>
    4958:	15 37       	cpi	r17, 0x75	; 117
    495a:	21 f1       	breq	.+72     	; 0x49a4 <vfscanf+0x1f4>
    495c:	18 37       	cpi	r17, 0x78	; 120
    495e:	f1 f0       	breq	.+60     	; 0x499c <vfscanf+0x1ec>
    4960:	2e c0       	rjmp	.+92     	; 0x49be <vfscanf+0x20e>
    4962:	c1 14       	cp	r12, r1
    4964:	d1 04       	cpc	r13, r1
    4966:	29 f0       	breq	.+10     	; 0x4972 <vfscanf+0x1c2>
    4968:	f6 01       	movw	r30, r12
    496a:	00 83       	st	Z, r16
    496c:	c6 01       	movw	r24, r12
    496e:	01 96       	adiw	r24, 0x01	; 1
    4970:	6c 01       	movw	r12, r24
    4972:	91 e0       	ldi	r25, 0x01	; 1
    4974:	e9 1a       	sub	r14, r25
    4976:	f1 08       	sbc	r15, r1
    4978:	59 f0       	breq	.+22     	; 0x4990 <vfscanf+0x1e0>
    497a:	c5 01       	movw	r24, r10
    497c:	88 d1       	rcall	.+784    	; 0x4c8e <fgetc>
    497e:	8c 01       	movw	r16, r24
    4980:	97 fd       	sbrc	r25, 7
    4982:	06 c0       	rjmp	.+12     	; 0x4990 <vfscanf+0x1e0>
    4984:	45 d1       	rcall	.+650    	; 0x4c10 <isspace>
    4986:	89 2b       	or	r24, r25
    4988:	61 f3       	breq	.-40     	; 0x4962 <vfscanf+0x1b2>
    498a:	b5 01       	movw	r22, r10
    498c:	c8 01       	movw	r24, r16
    498e:	19 d2       	rcall	.+1074   	; 0x4dc2 <ungetc>
    4990:	c1 14       	cp	r12, r1
    4992:	d1 04       	cpc	r13, r1
    4994:	f9 f0       	breq	.+62     	; 0x49d4 <vfscanf+0x224>
    4996:	f6 01       	movw	r30, r12
    4998:	10 82       	st	Z, r1
    499a:	1c c0       	rjmp	.+56     	; 0x49d4 <vfscanf+0x224>
    499c:	f7 2d       	mov	r31, r7
    499e:	f0 64       	ori	r31, 0x40	; 64
    49a0:	7f 2e       	mov	r7, r31
    49a2:	07 c0       	rjmp	.+14     	; 0x49b2 <vfscanf+0x202>
    49a4:	87 2d       	mov	r24, r7
    49a6:	80 62       	ori	r24, 0x20	; 32
    49a8:	78 2e       	mov	r7, r24
    49aa:	03 c0       	rjmp	.+6      	; 0x49b2 <vfscanf+0x202>
    49ac:	97 2d       	mov	r25, r7
    49ae:	90 61       	ori	r25, 0x10	; 16
    49b0:	79 2e       	mov	r7, r25
    49b2:	27 2d       	mov	r18, r7
    49b4:	a6 01       	movw	r20, r12
    49b6:	b7 01       	movw	r22, r14
    49b8:	c5 01       	movw	r24, r10
    49ba:	87 dc       	rcall	.-1778   	; 0x42ca <conv_int>
    49bc:	04 c0       	rjmp	.+8      	; 0x49c6 <vfscanf+0x216>
    49be:	a6 01       	movw	r20, r12
    49c0:	b7 01       	movw	r22, r14
    49c2:	c5 01       	movw	r24, r10
    49c4:	c0 dd       	rcall	.-1152   	; 0x4546 <conv_flt>
    49c6:	81 11       	cpse	r24, r1
    49c8:	05 c0       	rjmp	.+10     	; 0x49d4 <vfscanf+0x224>
    49ca:	f5 01       	movw	r30, r10
    49cc:	83 81       	ldd	r24, Z+3	; 0x03
    49ce:	80 73       	andi	r24, 0x30	; 48
    49d0:	29 f4       	brne	.+10     	; 0x49dc <vfscanf+0x22c>
    49d2:	06 c0       	rjmp	.+12     	; 0x49e0 <vfscanf+0x230>
    49d4:	70 fc       	sbrc	r7, 0
    49d6:	f8 ce       	rjmp	.-528    	; 0x47c8 <vfscanf+0x18>
    49d8:	63 94       	inc	r6
    49da:	f6 ce       	rjmp	.-532    	; 0x47c8 <vfscanf+0x18>
    49dc:	66 20       	and	r6, r6
    49de:	19 f0       	breq	.+6      	; 0x49e6 <vfscanf+0x236>
    49e0:	86 2d       	mov	r24, r6
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	02 c0       	rjmp	.+4      	; 0x49ea <vfscanf+0x23a>
    49e6:	8f ef       	ldi	r24, 0xFF	; 255
    49e8:	9f ef       	ldi	r25, 0xFF	; 255
    49ea:	cd b7       	in	r28, 0x3d	; 61
    49ec:	de b7       	in	r29, 0x3e	; 62
    49ee:	ee e0       	ldi	r30, 0x0E	; 14
    49f0:	20 c0       	rjmp	.+64     	; 0x4a32 <__epilogue_restores__+0x8>

000049f2 <__prologue_saves__>:
    49f2:	2f 92       	push	r2
    49f4:	3f 92       	push	r3
    49f6:	4f 92       	push	r4
    49f8:	5f 92       	push	r5
    49fa:	6f 92       	push	r6
    49fc:	7f 92       	push	r7
    49fe:	8f 92       	push	r8
    4a00:	9f 92       	push	r9
    4a02:	af 92       	push	r10
    4a04:	bf 92       	push	r11
    4a06:	cf 92       	push	r12
    4a08:	df 92       	push	r13
    4a0a:	ef 92       	push	r14
    4a0c:	ff 92       	push	r15
    4a0e:	0f 93       	push	r16
    4a10:	1f 93       	push	r17
    4a12:	cf 93       	push	r28
    4a14:	df 93       	push	r29
    4a16:	cd b7       	in	r28, 0x3d	; 61
    4a18:	de b7       	in	r29, 0x3e	; 62
    4a1a:	ca 1b       	sub	r28, r26
    4a1c:	db 0b       	sbc	r29, r27
    4a1e:	0f b6       	in	r0, 0x3f	; 63
    4a20:	f8 94       	cli
    4a22:	de bf       	out	0x3e, r29	; 62
    4a24:	0f be       	out	0x3f, r0	; 63
    4a26:	cd bf       	out	0x3d, r28	; 61
    4a28:	09 94       	ijmp

00004a2a <__epilogue_restores__>:
    4a2a:	2a 88       	ldd	r2, Y+18	; 0x12
    4a2c:	39 88       	ldd	r3, Y+17	; 0x11
    4a2e:	48 88       	ldd	r4, Y+16	; 0x10
    4a30:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a32:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a34:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a36:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a38:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a3c:	b9 84       	ldd	r11, Y+9	; 0x09
    4a3e:	c8 84       	ldd	r12, Y+8	; 0x08
    4a40:	df 80       	ldd	r13, Y+7	; 0x07
    4a42:	ee 80       	ldd	r14, Y+6	; 0x06
    4a44:	fd 80       	ldd	r15, Y+5	; 0x05
    4a46:	0c 81       	ldd	r16, Y+4	; 0x04
    4a48:	1b 81       	ldd	r17, Y+3	; 0x03
    4a4a:	aa 81       	ldd	r26, Y+2	; 0x02
    4a4c:	b9 81       	ldd	r27, Y+1	; 0x01
    4a4e:	ce 0f       	add	r28, r30
    4a50:	d1 1d       	adc	r29, r1
    4a52:	0f b6       	in	r0, 0x3f	; 63
    4a54:	f8 94       	cli
    4a56:	de bf       	out	0x3e, r29	; 62
    4a58:	0f be       	out	0x3f, r0	; 63
    4a5a:	cd bf       	out	0x3d, r28	; 61
    4a5c:	ed 01       	movw	r28, r26
    4a5e:	08 95       	ret

00004a60 <__ftoa_engine>:
    4a60:	28 30       	cpi	r18, 0x08	; 8
    4a62:	08 f0       	brcs	.+2      	; 0x4a66 <__ftoa_engine+0x6>
    4a64:	27 e0       	ldi	r18, 0x07	; 7
    4a66:	33 27       	eor	r19, r19
    4a68:	da 01       	movw	r26, r20
    4a6a:	99 0f       	add	r25, r25
    4a6c:	31 1d       	adc	r19, r1
    4a6e:	87 fd       	sbrc	r24, 7
    4a70:	91 60       	ori	r25, 0x01	; 1
    4a72:	00 96       	adiw	r24, 0x00	; 0
    4a74:	61 05       	cpc	r22, r1
    4a76:	71 05       	cpc	r23, r1
    4a78:	39 f4       	brne	.+14     	; 0x4a88 <__ftoa_engine+0x28>
    4a7a:	32 60       	ori	r19, 0x02	; 2
    4a7c:	2e 5f       	subi	r18, 0xFE	; 254
    4a7e:	3d 93       	st	X+, r19
    4a80:	30 e3       	ldi	r19, 0x30	; 48
    4a82:	2a 95       	dec	r18
    4a84:	e1 f7       	brne	.-8      	; 0x4a7e <__ftoa_engine+0x1e>
    4a86:	08 95       	ret
    4a88:	9f 3f       	cpi	r25, 0xFF	; 255
    4a8a:	30 f0       	brcs	.+12     	; 0x4a98 <__ftoa_engine+0x38>
    4a8c:	80 38       	cpi	r24, 0x80	; 128
    4a8e:	71 05       	cpc	r23, r1
    4a90:	61 05       	cpc	r22, r1
    4a92:	09 f0       	breq	.+2      	; 0x4a96 <__ftoa_engine+0x36>
    4a94:	3c 5f       	subi	r19, 0xFC	; 252
    4a96:	3c 5f       	subi	r19, 0xFC	; 252
    4a98:	3d 93       	st	X+, r19
    4a9a:	91 30       	cpi	r25, 0x01	; 1
    4a9c:	08 f0       	brcs	.+2      	; 0x4aa0 <__ftoa_engine+0x40>
    4a9e:	80 68       	ori	r24, 0x80	; 128
    4aa0:	91 1d       	adc	r25, r1
    4aa2:	df 93       	push	r29
    4aa4:	cf 93       	push	r28
    4aa6:	1f 93       	push	r17
    4aa8:	0f 93       	push	r16
    4aaa:	ff 92       	push	r15
    4aac:	ef 92       	push	r14
    4aae:	19 2f       	mov	r17, r25
    4ab0:	98 7f       	andi	r25, 0xF8	; 248
    4ab2:	96 95       	lsr	r25
    4ab4:	e9 2f       	mov	r30, r25
    4ab6:	96 95       	lsr	r25
    4ab8:	96 95       	lsr	r25
    4aba:	e9 0f       	add	r30, r25
    4abc:	ff 27       	eor	r31, r31
    4abe:	e8 59       	subi	r30, 0x98	; 152
    4ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac2:	99 27       	eor	r25, r25
    4ac4:	33 27       	eor	r19, r19
    4ac6:	ee 24       	eor	r14, r14
    4ac8:	ff 24       	eor	r15, r15
    4aca:	a7 01       	movw	r20, r14
    4acc:	e7 01       	movw	r28, r14
    4ace:	05 90       	lpm	r0, Z+
    4ad0:	08 94       	sec
    4ad2:	07 94       	ror	r0
    4ad4:	28 f4       	brcc	.+10     	; 0x4ae0 <__ftoa_engine+0x80>
    4ad6:	36 0f       	add	r19, r22
    4ad8:	e7 1e       	adc	r14, r23
    4ada:	f8 1e       	adc	r15, r24
    4adc:	49 1f       	adc	r20, r25
    4ade:	51 1d       	adc	r21, r1
    4ae0:	66 0f       	add	r22, r22
    4ae2:	77 1f       	adc	r23, r23
    4ae4:	88 1f       	adc	r24, r24
    4ae6:	99 1f       	adc	r25, r25
    4ae8:	06 94       	lsr	r0
    4aea:	a1 f7       	brne	.-24     	; 0x4ad4 <__ftoa_engine+0x74>
    4aec:	05 90       	lpm	r0, Z+
    4aee:	07 94       	ror	r0
    4af0:	28 f4       	brcc	.+10     	; 0x4afc <__ftoa_engine+0x9c>
    4af2:	e7 0e       	add	r14, r23
    4af4:	f8 1e       	adc	r15, r24
    4af6:	49 1f       	adc	r20, r25
    4af8:	56 1f       	adc	r21, r22
    4afa:	c1 1d       	adc	r28, r1
    4afc:	77 0f       	add	r23, r23
    4afe:	88 1f       	adc	r24, r24
    4b00:	99 1f       	adc	r25, r25
    4b02:	66 1f       	adc	r22, r22
    4b04:	06 94       	lsr	r0
    4b06:	a1 f7       	brne	.-24     	; 0x4af0 <__ftoa_engine+0x90>
    4b08:	05 90       	lpm	r0, Z+
    4b0a:	07 94       	ror	r0
    4b0c:	28 f4       	brcc	.+10     	; 0x4b18 <__ftoa_engine+0xb8>
    4b0e:	f8 0e       	add	r15, r24
    4b10:	49 1f       	adc	r20, r25
    4b12:	56 1f       	adc	r21, r22
    4b14:	c7 1f       	adc	r28, r23
    4b16:	d1 1d       	adc	r29, r1
    4b18:	88 0f       	add	r24, r24
    4b1a:	99 1f       	adc	r25, r25
    4b1c:	66 1f       	adc	r22, r22
    4b1e:	77 1f       	adc	r23, r23
    4b20:	06 94       	lsr	r0
    4b22:	a1 f7       	brne	.-24     	; 0x4b0c <__ftoa_engine+0xac>
    4b24:	05 90       	lpm	r0, Z+
    4b26:	07 94       	ror	r0
    4b28:	20 f4       	brcc	.+8      	; 0x4b32 <__ftoa_engine+0xd2>
    4b2a:	49 0f       	add	r20, r25
    4b2c:	56 1f       	adc	r21, r22
    4b2e:	c7 1f       	adc	r28, r23
    4b30:	d8 1f       	adc	r29, r24
    4b32:	99 0f       	add	r25, r25
    4b34:	66 1f       	adc	r22, r22
    4b36:	77 1f       	adc	r23, r23
    4b38:	88 1f       	adc	r24, r24
    4b3a:	06 94       	lsr	r0
    4b3c:	a9 f7       	brne	.-22     	; 0x4b28 <__ftoa_engine+0xc8>
    4b3e:	84 91       	lpm	r24, Z
    4b40:	10 95       	com	r17
    4b42:	17 70       	andi	r17, 0x07	; 7
    4b44:	41 f0       	breq	.+16     	; 0x4b56 <__ftoa_engine+0xf6>
    4b46:	d6 95       	lsr	r29
    4b48:	c7 95       	ror	r28
    4b4a:	57 95       	ror	r21
    4b4c:	47 95       	ror	r20
    4b4e:	f7 94       	ror	r15
    4b50:	e7 94       	ror	r14
    4b52:	1a 95       	dec	r17
    4b54:	c1 f7       	brne	.-16     	; 0x4b46 <__ftoa_engine+0xe6>
    4b56:	ee e0       	ldi	r30, 0x0E	; 14
    4b58:	f1 e0       	ldi	r31, 0x01	; 1
    4b5a:	68 94       	set
    4b5c:	15 90       	lpm	r1, Z+
    4b5e:	15 91       	lpm	r17, Z+
    4b60:	35 91       	lpm	r19, Z+
    4b62:	65 91       	lpm	r22, Z+
    4b64:	95 91       	lpm	r25, Z+
    4b66:	05 90       	lpm	r0, Z+
    4b68:	7f e2       	ldi	r23, 0x2F	; 47
    4b6a:	73 95       	inc	r23
    4b6c:	e1 18       	sub	r14, r1
    4b6e:	f1 0a       	sbc	r15, r17
    4b70:	43 0b       	sbc	r20, r19
    4b72:	56 0b       	sbc	r21, r22
    4b74:	c9 0b       	sbc	r28, r25
    4b76:	d0 09       	sbc	r29, r0
    4b78:	c0 f7       	brcc	.-16     	; 0x4b6a <__ftoa_engine+0x10a>
    4b7a:	e1 0c       	add	r14, r1
    4b7c:	f1 1e       	adc	r15, r17
    4b7e:	43 1f       	adc	r20, r19
    4b80:	56 1f       	adc	r21, r22
    4b82:	c9 1f       	adc	r28, r25
    4b84:	d0 1d       	adc	r29, r0
    4b86:	7e f4       	brtc	.+30     	; 0x4ba6 <__ftoa_engine+0x146>
    4b88:	70 33       	cpi	r23, 0x30	; 48
    4b8a:	11 f4       	brne	.+4      	; 0x4b90 <__ftoa_engine+0x130>
    4b8c:	8a 95       	dec	r24
    4b8e:	e6 cf       	rjmp	.-52     	; 0x4b5c <__ftoa_engine+0xfc>
    4b90:	e8 94       	clt
    4b92:	01 50       	subi	r16, 0x01	; 1
    4b94:	30 f0       	brcs	.+12     	; 0x4ba2 <__ftoa_engine+0x142>
    4b96:	08 0f       	add	r16, r24
    4b98:	0a f4       	brpl	.+2      	; 0x4b9c <__ftoa_engine+0x13c>
    4b9a:	00 27       	eor	r16, r16
    4b9c:	02 17       	cp	r16, r18
    4b9e:	08 f4       	brcc	.+2      	; 0x4ba2 <__ftoa_engine+0x142>
    4ba0:	20 2f       	mov	r18, r16
    4ba2:	23 95       	inc	r18
    4ba4:	02 2f       	mov	r16, r18
    4ba6:	7a 33       	cpi	r23, 0x3A	; 58
    4ba8:	28 f0       	brcs	.+10     	; 0x4bb4 <__ftoa_engine+0x154>
    4baa:	79 e3       	ldi	r23, 0x39	; 57
    4bac:	7d 93       	st	X+, r23
    4bae:	2a 95       	dec	r18
    4bb0:	e9 f7       	brne	.-6      	; 0x4bac <__ftoa_engine+0x14c>
    4bb2:	10 c0       	rjmp	.+32     	; 0x4bd4 <__ftoa_engine+0x174>
    4bb4:	7d 93       	st	X+, r23
    4bb6:	2a 95       	dec	r18
    4bb8:	89 f6       	brne	.-94     	; 0x4b5c <__ftoa_engine+0xfc>
    4bba:	06 94       	lsr	r0
    4bbc:	97 95       	ror	r25
    4bbe:	67 95       	ror	r22
    4bc0:	37 95       	ror	r19
    4bc2:	17 95       	ror	r17
    4bc4:	17 94       	ror	r1
    4bc6:	e1 18       	sub	r14, r1
    4bc8:	f1 0a       	sbc	r15, r17
    4bca:	43 0b       	sbc	r20, r19
    4bcc:	56 0b       	sbc	r21, r22
    4bce:	c9 0b       	sbc	r28, r25
    4bd0:	d0 09       	sbc	r29, r0
    4bd2:	98 f0       	brcs	.+38     	; 0x4bfa <__ftoa_engine+0x19a>
    4bd4:	23 95       	inc	r18
    4bd6:	7e 91       	ld	r23, -X
    4bd8:	73 95       	inc	r23
    4bda:	7a 33       	cpi	r23, 0x3A	; 58
    4bdc:	08 f0       	brcs	.+2      	; 0x4be0 <__ftoa_engine+0x180>
    4bde:	70 e3       	ldi	r23, 0x30	; 48
    4be0:	7c 93       	st	X, r23
    4be2:	20 13       	cpse	r18, r16
    4be4:	b8 f7       	brcc	.-18     	; 0x4bd4 <__ftoa_engine+0x174>
    4be6:	7e 91       	ld	r23, -X
    4be8:	70 61       	ori	r23, 0x10	; 16
    4bea:	7d 93       	st	X+, r23
    4bec:	30 f0       	brcs	.+12     	; 0x4bfa <__ftoa_engine+0x19a>
    4bee:	83 95       	inc	r24
    4bf0:	71 e3       	ldi	r23, 0x31	; 49
    4bf2:	7d 93       	st	X+, r23
    4bf4:	70 e3       	ldi	r23, 0x30	; 48
    4bf6:	2a 95       	dec	r18
    4bf8:	e1 f7       	brne	.-8      	; 0x4bf2 <__ftoa_engine+0x192>
    4bfa:	11 24       	eor	r1, r1
    4bfc:	ef 90       	pop	r14
    4bfe:	ff 90       	pop	r15
    4c00:	0f 91       	pop	r16
    4c02:	1f 91       	pop	r17
    4c04:	cf 91       	pop	r28
    4c06:	df 91       	pop	r29
    4c08:	99 27       	eor	r25, r25
    4c0a:	87 fd       	sbrc	r24, 7
    4c0c:	90 95       	com	r25
    4c0e:	08 95       	ret

00004c10 <isspace>:
    4c10:	91 11       	cpse	r25, r1
    4c12:	4e c1       	rjmp	.+668    	; 0x4eb0 <__ctype_isfalse>
    4c14:	80 32       	cpi	r24, 0x20	; 32
    4c16:	19 f0       	breq	.+6      	; 0x4c1e <isspace+0xe>
    4c18:	89 50       	subi	r24, 0x09	; 9
    4c1a:	85 50       	subi	r24, 0x05	; 5
    4c1c:	d0 f7       	brcc	.-12     	; 0x4c12 <isspace+0x2>
    4c1e:	08 95       	ret

00004c20 <tolower>:
    4c20:	91 11       	cpse	r25, r1
    4c22:	08 95       	ret
    4c24:	81 54       	subi	r24, 0x41	; 65
    4c26:	8a 51       	subi	r24, 0x1A	; 26
    4c28:	08 f4       	brcc	.+2      	; 0x4c2c <tolower+0xc>
    4c2a:	80 5e       	subi	r24, 0xE0	; 224
    4c2c:	85 5a       	subi	r24, 0xA5	; 165
    4c2e:	08 95       	ret

00004c30 <strchr_P>:
    4c30:	fc 01       	movw	r30, r24
    4c32:	05 90       	lpm	r0, Z+
    4c34:	06 16       	cp	r0, r22
    4c36:	21 f0       	breq	.+8      	; 0x4c40 <strchr_P+0x10>
    4c38:	00 20       	and	r0, r0
    4c3a:	d9 f7       	brne	.-10     	; 0x4c32 <strchr_P+0x2>
    4c3c:	c0 01       	movw	r24, r0
    4c3e:	08 95       	ret
    4c40:	31 97       	sbiw	r30, 0x01	; 1
    4c42:	cf 01       	movw	r24, r30
    4c44:	08 95       	ret

00004c46 <strnlen_P>:
    4c46:	fc 01       	movw	r30, r24
    4c48:	05 90       	lpm	r0, Z+
    4c4a:	61 50       	subi	r22, 0x01	; 1
    4c4c:	70 40       	sbci	r23, 0x00	; 0
    4c4e:	01 10       	cpse	r0, r1
    4c50:	d8 f7       	brcc	.-10     	; 0x4c48 <strnlen_P+0x2>
    4c52:	80 95       	com	r24
    4c54:	90 95       	com	r25
    4c56:	8e 0f       	add	r24, r30
    4c58:	9f 1f       	adc	r25, r31
    4c5a:	08 95       	ret

00004c5c <strncmp>:
    4c5c:	fb 01       	movw	r30, r22
    4c5e:	dc 01       	movw	r26, r24
    4c60:	41 50       	subi	r20, 0x01	; 1
    4c62:	50 40       	sbci	r21, 0x00	; 0
    4c64:	30 f0       	brcs	.+12     	; 0x4c72 <strncmp+0x16>
    4c66:	8d 91       	ld	r24, X+
    4c68:	01 90       	ld	r0, Z+
    4c6a:	80 19       	sub	r24, r0
    4c6c:	19 f4       	brne	.+6      	; 0x4c74 <strncmp+0x18>
    4c6e:	00 20       	and	r0, r0
    4c70:	b9 f7       	brne	.-18     	; 0x4c60 <strncmp+0x4>
    4c72:	88 1b       	sub	r24, r24
    4c74:	99 0b       	sbc	r25, r25
    4c76:	08 95       	ret

00004c78 <strnlen>:
    4c78:	fc 01       	movw	r30, r24
    4c7a:	61 50       	subi	r22, 0x01	; 1
    4c7c:	70 40       	sbci	r23, 0x00	; 0
    4c7e:	01 90       	ld	r0, Z+
    4c80:	01 10       	cpse	r0, r1
    4c82:	d8 f7       	brcc	.-10     	; 0x4c7a <strnlen+0x2>
    4c84:	80 95       	com	r24
    4c86:	90 95       	com	r25
    4c88:	8e 0f       	add	r24, r30
    4c8a:	9f 1f       	adc	r25, r31
    4c8c:	08 95       	ret

00004c8e <fgetc>:
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	ec 01       	movw	r28, r24
    4c94:	2b 81       	ldd	r18, Y+3	; 0x03
    4c96:	20 ff       	sbrs	r18, 0
    4c98:	33 c0       	rjmp	.+102    	; 0x4d00 <fgetc+0x72>
    4c9a:	26 ff       	sbrs	r18, 6
    4c9c:	0a c0       	rjmp	.+20     	; 0x4cb2 <fgetc+0x24>
    4c9e:	2f 7b       	andi	r18, 0xBF	; 191
    4ca0:	2b 83       	std	Y+3, r18	; 0x03
    4ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    4ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    4ca6:	01 96       	adiw	r24, 0x01	; 1
    4ca8:	9f 83       	std	Y+7, r25	; 0x07
    4caa:	8e 83       	std	Y+6, r24	; 0x06
    4cac:	8a 81       	ldd	r24, Y+2	; 0x02
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	29 c0       	rjmp	.+82     	; 0x4d04 <fgetc+0x76>
    4cb2:	22 ff       	sbrs	r18, 2
    4cb4:	0f c0       	rjmp	.+30     	; 0x4cd4 <fgetc+0x46>
    4cb6:	e8 81       	ld	r30, Y
    4cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    4cba:	80 81       	ld	r24, Z
    4cbc:	08 2e       	mov	r0, r24
    4cbe:	00 0c       	add	r0, r0
    4cc0:	99 0b       	sbc	r25, r25
    4cc2:	00 97       	sbiw	r24, 0x00	; 0
    4cc4:	19 f4       	brne	.+6      	; 0x4ccc <fgetc+0x3e>
    4cc6:	20 62       	ori	r18, 0x20	; 32
    4cc8:	2b 83       	std	Y+3, r18	; 0x03
    4cca:	1a c0       	rjmp	.+52     	; 0x4d00 <fgetc+0x72>
    4ccc:	31 96       	adiw	r30, 0x01	; 1
    4cce:	f9 83       	std	Y+1, r31	; 0x01
    4cd0:	e8 83       	st	Y, r30
    4cd2:	0e c0       	rjmp	.+28     	; 0x4cf0 <fgetc+0x62>
    4cd4:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cd6:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cd8:	09 95       	icall
    4cda:	97 ff       	sbrs	r25, 7
    4cdc:	09 c0       	rjmp	.+18     	; 0x4cf0 <fgetc+0x62>
    4cde:	2b 81       	ldd	r18, Y+3	; 0x03
    4ce0:	01 96       	adiw	r24, 0x01	; 1
    4ce2:	11 f0       	breq	.+4      	; 0x4ce8 <fgetc+0x5a>
    4ce4:	80 e2       	ldi	r24, 0x20	; 32
    4ce6:	01 c0       	rjmp	.+2      	; 0x4cea <fgetc+0x5c>
    4ce8:	80 e1       	ldi	r24, 0x10	; 16
    4cea:	82 2b       	or	r24, r18
    4cec:	8b 83       	std	Y+3, r24	; 0x03
    4cee:	08 c0       	rjmp	.+16     	; 0x4d00 <fgetc+0x72>
    4cf0:	2e 81       	ldd	r18, Y+6	; 0x06
    4cf2:	3f 81       	ldd	r19, Y+7	; 0x07
    4cf4:	2f 5f       	subi	r18, 0xFF	; 255
    4cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf8:	3f 83       	std	Y+7, r19	; 0x07
    4cfa:	2e 83       	std	Y+6, r18	; 0x06
    4cfc:	99 27       	eor	r25, r25
    4cfe:	02 c0       	rjmp	.+4      	; 0x4d04 <fgetc+0x76>
    4d00:	8f ef       	ldi	r24, 0xFF	; 255
    4d02:	9f ef       	ldi	r25, 0xFF	; 255
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	08 95       	ret

00004d0a <fputc>:
    4d0a:	0f 93       	push	r16
    4d0c:	1f 93       	push	r17
    4d0e:	cf 93       	push	r28
    4d10:	df 93       	push	r29
    4d12:	fb 01       	movw	r30, r22
    4d14:	23 81       	ldd	r18, Z+3	; 0x03
    4d16:	21 fd       	sbrc	r18, 1
    4d18:	03 c0       	rjmp	.+6      	; 0x4d20 <fputc+0x16>
    4d1a:	8f ef       	ldi	r24, 0xFF	; 255
    4d1c:	9f ef       	ldi	r25, 0xFF	; 255
    4d1e:	2c c0       	rjmp	.+88     	; 0x4d78 <fputc+0x6e>
    4d20:	22 ff       	sbrs	r18, 2
    4d22:	16 c0       	rjmp	.+44     	; 0x4d50 <fputc+0x46>
    4d24:	46 81       	ldd	r20, Z+6	; 0x06
    4d26:	57 81       	ldd	r21, Z+7	; 0x07
    4d28:	24 81       	ldd	r18, Z+4	; 0x04
    4d2a:	35 81       	ldd	r19, Z+5	; 0x05
    4d2c:	42 17       	cp	r20, r18
    4d2e:	53 07       	cpc	r21, r19
    4d30:	44 f4       	brge	.+16     	; 0x4d42 <fputc+0x38>
    4d32:	a0 81       	ld	r26, Z
    4d34:	b1 81       	ldd	r27, Z+1	; 0x01
    4d36:	9d 01       	movw	r18, r26
    4d38:	2f 5f       	subi	r18, 0xFF	; 255
    4d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3c:	31 83       	std	Z+1, r19	; 0x01
    4d3e:	20 83       	st	Z, r18
    4d40:	8c 93       	st	X, r24
    4d42:	26 81       	ldd	r18, Z+6	; 0x06
    4d44:	37 81       	ldd	r19, Z+7	; 0x07
    4d46:	2f 5f       	subi	r18, 0xFF	; 255
    4d48:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4a:	37 83       	std	Z+7, r19	; 0x07
    4d4c:	26 83       	std	Z+6, r18	; 0x06
    4d4e:	14 c0       	rjmp	.+40     	; 0x4d78 <fputc+0x6e>
    4d50:	8b 01       	movw	r16, r22
    4d52:	ec 01       	movw	r28, r24
    4d54:	fb 01       	movw	r30, r22
    4d56:	00 84       	ldd	r0, Z+8	; 0x08
    4d58:	f1 85       	ldd	r31, Z+9	; 0x09
    4d5a:	e0 2d       	mov	r30, r0
    4d5c:	09 95       	icall
    4d5e:	89 2b       	or	r24, r25
    4d60:	e1 f6       	brne	.-72     	; 0x4d1a <fputc+0x10>
    4d62:	d8 01       	movw	r26, r16
    4d64:	16 96       	adiw	r26, 0x06	; 6
    4d66:	8d 91       	ld	r24, X+
    4d68:	9c 91       	ld	r25, X
    4d6a:	17 97       	sbiw	r26, 0x07	; 7
    4d6c:	01 96       	adiw	r24, 0x01	; 1
    4d6e:	17 96       	adiw	r26, 0x07	; 7
    4d70:	9c 93       	st	X, r25
    4d72:	8e 93       	st	-X, r24
    4d74:	16 97       	sbiw	r26, 0x06	; 6
    4d76:	ce 01       	movw	r24, r28
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	1f 91       	pop	r17
    4d7e:	0f 91       	pop	r16
    4d80:	08 95       	ret

00004d82 <sprintf>:
    4d82:	ae e0       	ldi	r26, 0x0E	; 14
    4d84:	b0 e0       	ldi	r27, 0x00	; 0
    4d86:	e6 ec       	ldi	r30, 0xC6	; 198
    4d88:	f6 e2       	ldi	r31, 0x26	; 38
    4d8a:	41 ce       	rjmp	.-894    	; 0x4a0e <__prologue_saves__+0x1c>
    4d8c:	0d 89       	ldd	r16, Y+21	; 0x15
    4d8e:	1e 89       	ldd	r17, Y+22	; 0x16
    4d90:	86 e0       	ldi	r24, 0x06	; 6
    4d92:	8c 83       	std	Y+4, r24	; 0x04
    4d94:	1a 83       	std	Y+2, r17	; 0x02
    4d96:	09 83       	std	Y+1, r16	; 0x01
    4d98:	8f ef       	ldi	r24, 0xFF	; 255
    4d9a:	9f e7       	ldi	r25, 0x7F	; 127
    4d9c:	9e 83       	std	Y+6, r25	; 0x06
    4d9e:	8d 83       	std	Y+5, r24	; 0x05
    4da0:	ae 01       	movw	r20, r28
    4da2:	47 5e       	subi	r20, 0xE7	; 231
    4da4:	5f 4f       	sbci	r21, 0xFF	; 255
    4da6:	6f 89       	ldd	r22, Y+23	; 0x17
    4da8:	78 8d       	ldd	r23, Y+24	; 0x18
    4daa:	ce 01       	movw	r24, r28
    4dac:	01 96       	adiw	r24, 0x01	; 1
    4dae:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <vfprintf>
    4db2:	ef 81       	ldd	r30, Y+7	; 0x07
    4db4:	f8 85       	ldd	r31, Y+8	; 0x08
    4db6:	e0 0f       	add	r30, r16
    4db8:	f1 1f       	adc	r31, r17
    4dba:	10 82       	st	Z, r1
    4dbc:	2e 96       	adiw	r28, 0x0e	; 14
    4dbe:	e4 e0       	ldi	r30, 0x04	; 4
    4dc0:	42 ce       	rjmp	.-892    	; 0x4a46 <__epilogue_restores__+0x1c>

00004dc2 <ungetc>:
    4dc2:	fb 01       	movw	r30, r22
    4dc4:	23 81       	ldd	r18, Z+3	; 0x03
    4dc6:	20 ff       	sbrs	r18, 0
    4dc8:	12 c0       	rjmp	.+36     	; 0x4dee <ungetc+0x2c>
    4dca:	26 fd       	sbrc	r18, 6
    4dcc:	10 c0       	rjmp	.+32     	; 0x4dee <ungetc+0x2c>
    4dce:	8f 3f       	cpi	r24, 0xFF	; 255
    4dd0:	3f ef       	ldi	r19, 0xFF	; 255
    4dd2:	93 07       	cpc	r25, r19
    4dd4:	61 f0       	breq	.+24     	; 0x4dee <ungetc+0x2c>
    4dd6:	82 83       	std	Z+2, r24	; 0x02
    4dd8:	2f 7d       	andi	r18, 0xDF	; 223
    4dda:	20 64       	ori	r18, 0x40	; 64
    4ddc:	23 83       	std	Z+3, r18	; 0x03
    4dde:	26 81       	ldd	r18, Z+6	; 0x06
    4de0:	37 81       	ldd	r19, Z+7	; 0x07
    4de2:	21 50       	subi	r18, 0x01	; 1
    4de4:	31 09       	sbc	r19, r1
    4de6:	37 83       	std	Z+7, r19	; 0x07
    4de8:	26 83       	std	Z+6, r18	; 0x06
    4dea:	99 27       	eor	r25, r25
    4dec:	08 95       	ret
    4dee:	8f ef       	ldi	r24, 0xFF	; 255
    4df0:	9f ef       	ldi	r25, 0xFF	; 255
    4df2:	08 95       	ret

00004df4 <__ultoa_invert>:
    4df4:	fa 01       	movw	r30, r20
    4df6:	aa 27       	eor	r26, r26
    4df8:	28 30       	cpi	r18, 0x08	; 8
    4dfa:	51 f1       	breq	.+84     	; 0x4e50 <__ultoa_invert+0x5c>
    4dfc:	20 31       	cpi	r18, 0x10	; 16
    4dfe:	81 f1       	breq	.+96     	; 0x4e60 <__ultoa_invert+0x6c>
    4e00:	e8 94       	clt
    4e02:	6f 93       	push	r22
    4e04:	6e 7f       	andi	r22, 0xFE	; 254
    4e06:	6e 5f       	subi	r22, 0xFE	; 254
    4e08:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0e:	af 4f       	sbci	r26, 0xFF	; 255
    4e10:	b1 e0       	ldi	r27, 0x01	; 1
    4e12:	3e d0       	rcall	.+124    	; 0x4e90 <__ultoa_invert+0x9c>
    4e14:	b4 e0       	ldi	r27, 0x04	; 4
    4e16:	3c d0       	rcall	.+120    	; 0x4e90 <__ultoa_invert+0x9c>
    4e18:	67 0f       	add	r22, r23
    4e1a:	78 1f       	adc	r23, r24
    4e1c:	89 1f       	adc	r24, r25
    4e1e:	9a 1f       	adc	r25, r26
    4e20:	a1 1d       	adc	r26, r1
    4e22:	68 0f       	add	r22, r24
    4e24:	79 1f       	adc	r23, r25
    4e26:	8a 1f       	adc	r24, r26
    4e28:	91 1d       	adc	r25, r1
    4e2a:	a1 1d       	adc	r26, r1
    4e2c:	6a 0f       	add	r22, r26
    4e2e:	71 1d       	adc	r23, r1
    4e30:	81 1d       	adc	r24, r1
    4e32:	91 1d       	adc	r25, r1
    4e34:	a1 1d       	adc	r26, r1
    4e36:	20 d0       	rcall	.+64     	; 0x4e78 <__ultoa_invert+0x84>
    4e38:	09 f4       	brne	.+2      	; 0x4e3c <__ultoa_invert+0x48>
    4e3a:	68 94       	set
    4e3c:	3f 91       	pop	r19
    4e3e:	2a e0       	ldi	r18, 0x0A	; 10
    4e40:	26 9f       	mul	r18, r22
    4e42:	11 24       	eor	r1, r1
    4e44:	30 19       	sub	r19, r0
    4e46:	30 5d       	subi	r19, 0xD0	; 208
    4e48:	31 93       	st	Z+, r19
    4e4a:	de f6       	brtc	.-74     	; 0x4e02 <__ultoa_invert+0xe>
    4e4c:	cf 01       	movw	r24, r30
    4e4e:	08 95       	ret
    4e50:	46 2f       	mov	r20, r22
    4e52:	47 70       	andi	r20, 0x07	; 7
    4e54:	40 5d       	subi	r20, 0xD0	; 208
    4e56:	41 93       	st	Z+, r20
    4e58:	b3 e0       	ldi	r27, 0x03	; 3
    4e5a:	0f d0       	rcall	.+30     	; 0x4e7a <__ultoa_invert+0x86>
    4e5c:	c9 f7       	brne	.-14     	; 0x4e50 <__ultoa_invert+0x5c>
    4e5e:	f6 cf       	rjmp	.-20     	; 0x4e4c <__ultoa_invert+0x58>
    4e60:	46 2f       	mov	r20, r22
    4e62:	4f 70       	andi	r20, 0x0F	; 15
    4e64:	40 5d       	subi	r20, 0xD0	; 208
    4e66:	4a 33       	cpi	r20, 0x3A	; 58
    4e68:	18 f0       	brcs	.+6      	; 0x4e70 <__ultoa_invert+0x7c>
    4e6a:	49 5d       	subi	r20, 0xD9	; 217
    4e6c:	31 fd       	sbrc	r19, 1
    4e6e:	40 52       	subi	r20, 0x20	; 32
    4e70:	41 93       	st	Z+, r20
    4e72:	02 d0       	rcall	.+4      	; 0x4e78 <__ultoa_invert+0x84>
    4e74:	a9 f7       	brne	.-22     	; 0x4e60 <__ultoa_invert+0x6c>
    4e76:	ea cf       	rjmp	.-44     	; 0x4e4c <__ultoa_invert+0x58>
    4e78:	b4 e0       	ldi	r27, 0x04	; 4
    4e7a:	a6 95       	lsr	r26
    4e7c:	97 95       	ror	r25
    4e7e:	87 95       	ror	r24
    4e80:	77 95       	ror	r23
    4e82:	67 95       	ror	r22
    4e84:	ba 95       	dec	r27
    4e86:	c9 f7       	brne	.-14     	; 0x4e7a <__ultoa_invert+0x86>
    4e88:	00 97       	sbiw	r24, 0x00	; 0
    4e8a:	61 05       	cpc	r22, r1
    4e8c:	71 05       	cpc	r23, r1
    4e8e:	08 95       	ret
    4e90:	9b 01       	movw	r18, r22
    4e92:	ac 01       	movw	r20, r24
    4e94:	0a 2e       	mov	r0, r26
    4e96:	06 94       	lsr	r0
    4e98:	57 95       	ror	r21
    4e9a:	47 95       	ror	r20
    4e9c:	37 95       	ror	r19
    4e9e:	27 95       	ror	r18
    4ea0:	ba 95       	dec	r27
    4ea2:	c9 f7       	brne	.-14     	; 0x4e96 <__ultoa_invert+0xa2>
    4ea4:	62 0f       	add	r22, r18
    4ea6:	73 1f       	adc	r23, r19
    4ea8:	84 1f       	adc	r24, r20
    4eaa:	95 1f       	adc	r25, r21
    4eac:	a0 1d       	adc	r26, r0
    4eae:	08 95       	ret

00004eb0 <__ctype_isfalse>:
    4eb0:	99 27       	eor	r25, r25
    4eb2:	88 27       	eor	r24, r24

00004eb4 <__ctype_istrue>:
    4eb4:	08 95       	ret

00004eb6 <_exit>:
    4eb6:	f8 94       	cli

00004eb8 <__stop_program>:
    4eb8:	ff cf       	rjmp	.-2      	; 0x4eb8 <__stop_program>

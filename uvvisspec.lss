
uvvisspec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00004e82  00004f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000708  00800252  00800252  00005068  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000507c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000075e2  00000000  00000000  00005444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000202e  00000000  00000000  0000ca26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003af5  00000000  00000000  0000ea54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba4  00000000  00000000  0001254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002953  00000000  00000000  000130f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000495b  00000000  00000000  00015a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0001a39e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	de c7       	rjmp	.+4028   	; 0xfbe <__ctors_end>
       2:	00 00       	nop
       4:	f9 c7       	rjmp	.+4082   	; 0xff8 <__bad_interrupt>
       6:	00 00       	nop
       8:	f7 c7       	rjmp	.+4078   	; 0xff8 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c7       	rjmp	.+4074   	; 0xff8 <__bad_interrupt>
       e:	00 00       	nop
      10:	f3 c7       	rjmp	.+4070   	; 0xff8 <__bad_interrupt>
      12:	00 00       	nop
      14:	f1 c7       	rjmp	.+4066   	; 0xff8 <__bad_interrupt>
      16:	00 00       	nop
      18:	ef c7       	rjmp	.+4062   	; 0xff8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ed c7       	rjmp	.+4058   	; 0xff8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	eb c7       	rjmp	.+4054   	; 0xff8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e9 c7       	rjmp	.+4050   	; 0xff8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__vector_10>
      2c:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_11>
      30:	e3 c7       	rjmp	.+4038   	; 0xff8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c7       	rjmp	.+4034   	; 0xff8 <__bad_interrupt>
      36:	00 00       	nop
      38:	df c7       	rjmp	.+4030   	; 0xff8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dd c7       	rjmp	.+4026   	; 0xff8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	db c7       	rjmp	.+4022   	; 0xff8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d9 c7       	rjmp	.+4018   	; 0xff8 <__bad_interrupt>
      46:	00 00       	nop
      48:	d7 c7       	rjmp	.+4014   	; 0xff8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d5 c7       	rjmp	.+4010   	; 0xff8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d3 c7       	rjmp	.+4006   	; 0xff8 <__bad_interrupt>
      52:	00 00       	nop
      54:	d1 c7       	rjmp	.+4002   	; 0xff8 <__bad_interrupt>
      56:	00 00       	nop
      58:	cf c7       	rjmp	.+3998   	; 0xff8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cd c7       	rjmp	.+3994   	; 0xff8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cb c7       	rjmp	.+3990   	; 0xff8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c9 c7       	rjmp	.+3986   	; 0xff8 <__bad_interrupt>
      66:	00 00       	nop
      68:	c7 c7       	rjmp	.+3982   	; 0xff8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c5 c7       	rjmp	.+3978   	; 0xff8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c3 c7       	rjmp	.+3974   	; 0xff8 <__bad_interrupt>
      72:	00 00       	nop
      74:	c1 c7       	rjmp	.+3970   	; 0xff8 <__bad_interrupt>
      76:	00 00       	nop
      78:	bf c7       	rjmp	.+3966   	; 0xff8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bd c7       	rjmp	.+3962   	; 0xff8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bb c7       	rjmp	.+3958   	; 0xff8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b9 c7       	rjmp	.+3954   	; 0xff8 <__bad_interrupt>
      86:	00 00       	nop
      88:	b7 c7       	rjmp	.+3950   	; 0xff8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b5 c7       	rjmp	.+3946   	; 0xff8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b3 c7       	rjmp	.+3942   	; 0xff8 <__bad_interrupt>
      92:	00 00       	nop
      94:	b1 c7       	rjmp	.+3938   	; 0xff8 <__bad_interrupt>
      96:	00 00       	nop
      98:	af c7       	rjmp	.+3934   	; 0xff8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ad c7       	rjmp	.+3930   	; 0xff8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ab c7       	rjmp	.+3926   	; 0xff8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a9 c7       	rjmp	.+3922   	; 0xff8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a7 c7       	rjmp	.+3918   	; 0xff8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 00       	.word	0x0008	; ????
      ae:	00 00       	nop
      b0:	be 92       	st	-X, r11
      b2:	24 49       	sbci	r18, 0x94	; 148
      b4:	12 3e       	cpi	r17, 0xE2	; 226
      b6:	ab aa       	std	Y+51, r10	; 0x33
      b8:	aa 2a       	or	r10, r26
      ba:	be cd       	rjmp	.-1156   	; 0xfffffc38 <__eeprom_end+0xff7efc38>
      bc:	cc cc       	rjmp	.-1640   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
      be:	4c 3e       	cpi	r20, 0xEC	; 236
      c0:	00 00       	nop
      c2:	00 80       	ld	r0, Z
      c4:	be ab       	std	Y+54, r27	; 0x36
      c6:	aa aa       	std	Y+50, r10	; 0x32
      c8:	aa 3e       	cpi	r26, 0xEA	; 234
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	bf 00       	.word	0x00bf	; ????
      d0:	00 00       	nop
      d2:	80 3f       	cpi	r24, 0xF0	; 240
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	00 08       	sbc	r0, r0
      da:	41 78       	andi	r20, 0x81	; 129
      dc:	d3 bb       	out	0x13, r29	; 19
      de:	43 87       	std	Z+11, r20	; 0x0b
      e0:	d1 13       	cpse	r29, r17
      e2:	3d 19       	sub	r19, r13
      e4:	0e 3c       	cpi	r16, 0xCE	; 206
      e6:	c3 bd       	out	0x23, r28	; 35
      e8:	42 82       	std	Z+2, r4	; 0x02
      ea:	ad 2b       	or	r26, r29
      ec:	3e 68       	ori	r19, 0x8E	; 142
      ee:	ec 82       	std	Y+4, r14	; 0x04
      f0:	76 be       	out	0x36, r7	; 54
      f2:	d9 8f       	std	Y+25, r29	; 0x19
      f4:	e1 a9       	ldd	r30, Z+49	; 0x31
      f6:	3e 4c       	sbci	r19, 0xCE	; 206
      f8:	80 ef       	ldi	r24, 0xF0	; 240
      fa:	ff be       	out	0x3f, r15	; 63
      fc:	01 c4       	rjmp	.+2050   	; 0x900 <spectralsensitivitycoeff+0x322>
      fe:	ff 7f       	andi	r31, 0xFF	; 255
     100:	3f 00       	.word	0x003f	; ????
     102:	00 00       	nop
     104:	00 00       	nop

00000106 <__trampolines_end>:
     106:	6e 61       	ori	r22, 0x1E	; 30
     108:	6e 00       	.word	0x006e	; ????

0000010a <__c.2332>:
     10a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1aa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1ba:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ca:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1da:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ea:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fa:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000208 <wl_lut_1nm>:
     208:	01 00 01 00 01 00 01 00 02 00 02 00 03 00 03 00     ................
     218:	03 00 04 00 04 00 04 00 05 00 05 00 06 00 06 00     ................
     228:	06 00 07 00 07 00 07 00 08 00 08 00 09 00 09 00     ................
     238:	09 00 0a 00 0a 00 0a 00 0b 00 0b 00 0c 00 0c 00     ................
     248:	0c 00 0d 00 0d 00 0d 00 0e 00 0e 00 0f 00 0f 00     ................
     258:	0f 00 10 00 10 00 10 00 11 00 11 00 12 00 12 00     ................
     268:	12 00 13 00 13 00 13 00 14 00 14 00 15 00 15 00     ................
     278:	15 00 16 00 16 00 16 00 17 00 17 00 18 00 18 00     ................
     288:	18 00 19 00 19 00 1a 00 1a 00 1a 00 1b 00 1b 00     ................
     298:	1b 00 1c 00 1c 00 1d 00 1d 00 1d 00 1e 00 1e 00     ................
     2a8:	1e 00 1f 00 1f 00 20 00 20 00 20 00 21 00 21 00     ...... . . .!.!.
     2b8:	22 00 22 00 22 00 23 00 23 00 23 00 24 00 24 00     ".".".#.#.#.$.$.
     2c8:	25 00 25 00 25 00 26 00 26 00 27 00 27 00 27 00     %.%.%.&.&.'.'.'.
     2d8:	28 00 28 00 29 00 29 00 29 00 2a 00 2a 00 2a 00     (.(.).).).*.*.*.
     2e8:	2b 00 2b 00 2c 00 2c 00 2c 00 2d 00 2d 00 2e 00     +.+.,.,.,.-.-...
     2f8:	2e 00 2e 00 2f 00 2f 00 30 00 30 00 30 00 31 00     ...././.0.0.0.1.
     308:	31 00 32 00 32 00 32 00 33 00 33 00 33 00 34 00     1.2.2.2.3.3.3.4.
     318:	34 00 35 00 35 00 35 00 36 00 36 00 37 00 37 00     4.5.5.5.6.6.7.7.
     328:	37 00 38 00 38 00 39 00 39 00 39 00 3a 00 3a 00     7.8.8.9.9.9.:.:.
     338:	3b 00 3b 00 3b 00 3c 00 3c 00 3d 00 3d 00 3d 00     ;.;.;.<.<.=.=.=.
     348:	3e 00 3e 00 3f 00 3f 00 3f 00 40 00 40 00 41 00     >.>.?.?.?.@.@.A.
     358:	41 00 42 00 42 00 42 00 43 00 43 00 44 00 44 00     A.B.B.B.C.C.D.D.
     368:	44 00 45 00 45 00 46 00 46 00 46 00 47 00 47 00     D.E.E.F.F.F.G.G.
     378:	48 00 48 00 48 00 49 00 49 00 4a 00 4a 00 4b 00     H.H.H.I.I.J.J.K.
     388:	4b 00 4b 00 4c 00 4c 00 4d 00 4d 00 4d 00 4e 00     K.K.L.L.M.M.M.N.
     398:	4e 00 4f 00 4f 00 50 00 50 00 50 00 51 00 51 00     N.O.O.P.P.P.Q.Q.
     3a8:	52 00 52 00 52 00 53 00 53 00 54 00 54 00 55 00     R.R.R.S.S.T.T.U.
     3b8:	55 00 55 00 56 00 56 00 57 00 57 00 58 00 58 00     U.U.V.V.W.W.X.X.
     3c8:	58 00 59 00 59 00 5a 00 5a 00 5b 00 5b 00 5b 00     X.Y.Y.Z.Z.[.[.[.
     3d8:	5c 00 5c 00 5d 00 5d 00 5e 00 5e 00 5e 00 5f 00     \.\.].].^.^.^._.
     3e8:	5f 00 60 00 60 00 61 00 61 00 61 00 62 00 62 00     _.`.`.a.a.a.b.b.
     3f8:	63 00 63 00 64 00 64 00 65 00 65 00 65 00 66 00     c.c.d.d.e.e.e.f.
     408:	66 00 67 00 67 00 68 00 68 00 68 00 69 00 69 00     f.g.g.h.h.h.i.i.
     418:	6a 00 6a 00 6b 00 6b 00 6c 00 6c 00 6d 00 6d 00     j.j.k.k.l.l.m.m.
     428:	6d 00 6e 00 6e 00 6f 00 6f 00 70 00 70 00 71 00     m.n.n.o.o.p.p.q.
     438:	71 00 71 00 72 00 72 00 73 00 73 00 74 00 74 00     q.q.r.r.s.s.t.t.
     448:	75 00 75 00 76 00 76 00 77 00 77 00 77 00 78 00     u.u.v.v.w.w.w.x.
     458:	78 00 79 00 79 00 7a 00 7a 00 7b 00 7b 00 7c 00     x.y.y.z.z.{.{.|.
     468:	7c 00 7d 00 7d 00 7d 00 7e 00 7e 00 7f 00 7f 00     |.}.}.}.~.~.....
     478:	80 00 80 00 81 00 81 00 82 00 82 00 83 00 83 00     ................
     488:	84 00 84 00 85 00 85 00 86 00 86 00 87 00 87 00     ................
     498:	88 00 88 00 88 00 89 00 89 00 8a 00 8a 00 8b 00     ................
     4a8:	8b 00 8c 00 8c 00 8d 00 8d 00 8e 00 8e 00 8f 00     ................
     4b8:	8f 00 90 00 90 00 91 00 91 00 92 00 92 00 93 00     ................
     4c8:	93 00 94 00 94 00 95 00 95 00 96 00 96 00 97 00     ................
     4d8:	97 00 98 00 98 00 99 00 99 00 9a 00 9a 00 9b 00     ................
     4e8:	9c 00 9c 00 9d 00 9d 00 9e 00 9e 00 9f 00 9f 00     ................
     4f8:	a0 00 a0 00 a1 00 a1 00 a2 00 a2 00 a3 00 a3 00     ................
     508:	a4 00 a4 00 a5 00 a5 00 a6 00 a7 00 a7 00 a8 00     ................
     518:	a8 00 a9 00 a9 00 aa 00 aa 00 ab 00 ab 00 ac 00     ................
     528:	ad 00 ad 00 ae 00 ae 00 af 00 af 00 b0 00 b0 00     ................
     538:	b1 00 b1 00 b2 00 b3 00 b3 00 b4 00 b4 00 b5 00     ................
     548:	b5 00 b6 00 b7 00 b7 00 b8 00 b8 00 b9 00 b9 00     ................
     558:	ba 00 bb 00 bb 00 bc 00 bc 00 bd 00 bd 00 be 00     ................
     568:	bf 00 bf 00 c0 00 c0 00 c1 00 c2 00 c2 00 c3 00     ................
     578:	c3 00 c4 00 c5 00 c5 00 c6 00 c6 00 c7 00 c8 00     ................
     588:	c8 00 c9 00 c9 00 ca 00 cb 00 cb 00 cc 00 cc 00     ................
     598:	cd 00 ce 00 ce 00 cf 00 cf 00 d0 00 d1 00 d1 00     ................
     5a8:	d2 00 d3 00 d3 00 d4 00 d5 00 d5 00 d6 00 d6 00     ................
     5b8:	d7 00 d8 00 d8 00 d9 00 da 00 da 00 db 00 dc 00     ................
     5c8:	dc 00 dd 00 de 00 de 00 df 00 e0 00 e0 00 e1 00     ................
     5d8:	e2 00 e2 00 e3 00                                   ......

000005de <spectralsensitivitycoeff>:
     5de:	12 35 0b 4b 12 35 0b 4b 12 35 0b 4b 12 35 0b 4b     .5.K.5.K.5.K.5.K
     5ee:	51 30 20 4b 3b f7 24 4b 70 94 29 4b f9 01 2e 4b     Q0 K;.$Kp.)K...K
     5fe:	8c 91 31 4b 81 e4 34 4b a0 ac 38 4b db 4e 3d 4b     ..1K..4K..8K.N=K
     60e:	e3 e3 45 4b 2d 02 4f 4b af a0 57 4b 77 50 5e 4b     ..EK-.OK..WKwP^K
     61e:	d5 e2 60 4b bc ad 61 4b 8e f4 60 4b bb 9d 5e 4b     ..`K..aK..`K..^K
     62e:	05 f7 5a 4b 4d 16 57 4b 78 97 53 4b 1f 53 51 4b     ..ZKM.WKx.SK.SQK
     63e:	1d ad 50 4b 89 f2 51 4b 38 92 55 4b d0 32 5e 4b     ..PK..QK8.UK.2^K
     64e:	f3 80 69 4b 93 57 76 4b d3 00 82 4b ed d9 88 4b     ..iK.WvK...K...K
     65e:	7c 70 8f 4b ff 71 95 4b c1 66 9a 4b 0e 8e 9d 4b     |p.K.q.K.f.K...K
     66e:	6b 91 9f 4b 3e 75 a0 4b d9 03 a0 4b 8f 19 9e 4b     k..K>u.K...K...K
     67e:	76 7d 9b 4b 47 7c 98 4b b0 81 95 4b be d5 92 4b     v}.KG|.K...K...K
     68e:	ee 7c 90 4b 69 a4 8e 4b c4 9c 8d 4b bd 80 8d 4b     .|.Ki..K...K...K
     69e:	99 40 8e 4b 10 ed 8f 4b c3 27 93 4b 50 9c 97 4b     .@.K...K.'.KP..K
     6ae:	5e 95 9c 4b 24 c4 a1 4b 06 5f a6 4b 2e 7b aa 4b     ^..K$..K._.K.{.K
     6be:	7a 61 ae 4b 1f 11 b2 4b 16 c8 b5 4b 35 52 b9 4b     za.K...K...K5R.K
     6ce:	23 66 bc 4b 7d de be 4b 47 14 c0 4b 2a 47 c0 4b     #f.K}..KG..K*G.K
     6de:	f3 ef bf 4b be 37 bf 4b d5 c3 be 4b b1 6d be 4b     ...K.7.K...K.m.K
     6ee:	90 b1 bd 4b 8a 68 bc 4b 71 d6 b9 4b 74 09 b6 4b     ...K.h.Kq..Kt..K
     6fe:	9f e0 b1 4b d7 a1 ad 4b 1c d0 a9 4b f5 be a6 4b     ...K...K...K...K
     70e:	11 15 a4 4b 81 dc a1 4b 35 2f a0 4b 80 35 9f 4b     ...K...K5/.K.5.K
     71e:	e7 ac 9e 4b 4e 87 9e 4b a4 b8 9e 4b 62 5b 9f 4b     ...KN..K...Kb[.K
     72e:	4a 27 a0 4b 5b ff a0 4b f8 c6 a1 4b 86 20 a2 4b     J'.K[..K...K. .K
     73e:	5c 38 a2 4b 2c 1e a2 4b d9 d1 a1 4b fc 37 a1 4b     \8.K,..K...K.7.K
     74e:	84 5d a0 4b 3d 6a 9f 4b 55 6e 9e 4b 5f 83 9d 4b     .].K=j.KUn.K_..K
     75e:	7d cc 9c 4b 67 2b 9c 4b 04 a2 9b 4b 33 32 9b 4b     }..Kg+.K...K32.K
     76e:	b8 e9 9a 4b 89 bc 9a 4b 18 a6 9a 4b d6 a3 9a 4b     ...K...K...K...K
     77e:	bf b4 9a 4b 28 d6 9a 4b c0 02 9b 4b 1a 37 9b 4b     ...K(..K...K.7.K
     78e:	d7 6f 9b 4b 17 a7 9b 4b e8 dc 9b 4b df 0e 9c 4b     .o.K...K...K...K
     79e:	96 3a 9c 4b 7e 5e 9c 4b 18 78 9c 4b c5 83 9c 4b     .:.K~^.K.x.K...K
     7ae:	cf 7e 9c 4b 8c 66 9c 4b 45 2d 9c 4b a7 dd 9b 4b     .~.K.f.KE-.K...K
     7be:	d1 79 9b 4b bc 02 9b 4b 0a 76 9a 4b aa d0 99 4b     .y.K...K.v.K...K
     7ce:	0f 1f 99 4b 4f 65 98 4b 70 a7 97 4b c5 01 97 4b     ...KOe.Kp..K...K
     7de:	18 6a 96 4b 25 c8 95 4b d1 14 95 4b 1d 49 94 4b     .j.K%..K...K.I.K
     7ee:	1b 3c 93 4b 6d 0b 92 4b 2c c2 90 4b 6d 64 8f 4b     .<.Km..K,..Kmd.K
     7fe:	50 f6 8d 4b 52 86 8c 4b c2 0a 8b 4b a5 84 89 4b     P..KR..K...K...K
     80e:	fb f4 87 4b 80 58 86 4b 18 95 84 4b 5f d5 82 4b     ...K.X.K...K_..K
     81e:	4a 23 81 4b 37 11 7f 4b 0e 3d 7c 4b 31 72 7a 4b     J#.K7..K.=|K1rzK
     82e:	3c d1 78 4b 19 38 77 4b 57 85 75 4b 9c 82 73 4b     <.xK.8wKW.uK..sK
     83e:	63 49 70 4b ef d5 6c 4b 5c 42 69 4b 44 a8 65 4b     cIpK..lK\BiKD.eK
     84e:	c2 20 62 4b 7d 37 5f 4b 8e 7d 5c 4b 75 e8 59 4b     . bK}7_K.}\Ku.YK
     85e:	8e 74 57 4b 43 1e 55 4b 7d b4 52 4b 54 59 50 4b     .tWKC.UK}.RKTYPK
     86e:	39 29 4e 4b 32 2e 4c 4b 12 72 4a 4b 6d 42 49 4b     9)NK2.LK.rJKmBIK
     87e:	15 bd 48 4b dd 60 48 4b 3a 14 48 4b 29 be 47 4b     ..HK.`HK:.HK).GK
     88e:	28 46 47 4b 3a f4 45 4b e2 6d 44 4b 83 c1 42 4b     (FGK:.EK.mDK..BK
     89e:	eb f8 40 4b b7 1d 3f 4b 3d 4e 3d 4b 68 94 3b 4b     ..@K..?K=N=Kh.;K
     8ae:	81 d6 39 4b a5 14 38 4b f2 4e 36 4b 85 85 34 4b     ..9K..8K.N6K..4K
     8be:	b8 87 32 4b ff 83 30 4b 48 91 2e 4b 83 ba 2c 4b     ..2K..0KH..K..,K
     8ce:	5f 0a 2b 4b 99 92 29 4b 9a d2 28 4b 31 3e 28 4b     _.+K..)K..(K1>(K
     8de:	b1 c7 27 4b bb 61 27 4b 37 ff 26 4b b5 87 26 4b     ..'K.a'K7.&K..&K
     8ee:	cb c5 25 4b 43 ef 24 4b 2e 03 24 4b a3 00 23 4b     ..%KC.$K..$K..#K
     8fe:	c0 e6 21 4b 33 b9 20 4b 0f 89 1f 4b b5 39 1e 4b     ..!K3. K...K.9.K
     90e:	ee c5 1c 4b a7 28 1b 4b e7 5c 19 4b d5 5c 17 4b     ...K.(.K.\.K.\.K
     91e:	62 c0 14 4b cc f7 11 4b 2e 0e 0f 4b 69 0e 0c 4b     b..K...K...Ki..K
     92e:	1c 03 09 4b ad f6 05 4b 32 fe 02 4b 79 1b 00 4b     ...K...K2..Ky..K
     93e:	ec a2 fa 4a dd 4e f5 4a fe 48 f0 4a 2c 9f eb 4a     ...J.N.J.H.J,..J
     94e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     95e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     96e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     97e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     98e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     99e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     9ae:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     9be:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     9ce:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     9de:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     9ee:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     9fe:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     a0e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     a1e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     a2e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     a3e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J
     a4e:	12 3f d9 4a 12 3f d9 4a 12 3f d9 4a 12 3f d9 4a     .?.J.?.J.?.J.?.J

00000a5e <wccoeff>:
     a5e:	27 d6 99 43 7c a0 2c 40 ea 15 86 ba f3 87 13 b7     '..C|.,@........
     a6e:	7d 09 60 32 bf 7a 4f 2b                             }.`2.zO+

00000a76 <serialnumber>:
     a76:	43 50 31 36 30 32 30 4c 30 30 39 39 35 00           CP16020L00995.

00000a84 <name>:
     a84:	55 56 56 49 53 53 50 45 43 00                       UVVISSPEC.

00000a8e <model>:
     a8e:	43 50 31 36 30 00                                   CP160.

00000a94 <wl_1nm>:
     a94:	36 01 37 01 38 01 39 01 3a 01 3b 01 3c 01 3d 01     6.7.8.9.:.;.<.=.
     aa4:	3e 01 3f 01 40 01 41 01 42 01 43 01 44 01 45 01     >.?.@.A.B.C.D.E.
     ab4:	46 01 47 01 48 01 49 01 4a 01 4b 01 4c 01 4d 01     F.G.H.I.J.K.L.M.
     ac4:	4e 01 4f 01 50 01 51 01 52 01 53 01 54 01 55 01     N.O.P.Q.R.S.T.U.
     ad4:	56 01 57 01 58 01 59 01 5a 01 5b 01 5c 01 5d 01     V.W.X.Y.Z.[.\.].
     ae4:	5e 01 5f 01 60 01 61 01 62 01 63 01 64 01 65 01     ^._.`.a.b.c.d.e.
     af4:	66 01 67 01 68 01 69 01 6a 01 6b 01 6c 01 6d 01     f.g.h.i.j.k.l.m.
     b04:	6e 01 6f 01 70 01 71 01 72 01 73 01 74 01 75 01     n.o.p.q.r.s.t.u.
     b14:	76 01 77 01 78 01 79 01 7a 01 7b 01 7c 01 7d 01     v.w.x.y.z.{.|.}.
     b24:	7e 01 7f 01 80 01 81 01 82 01 83 01 84 01 85 01     ~...............
     b34:	86 01 87 01 88 01 89 01 8a 01 8b 01 8c 01 8d 01     ................
     b44:	8e 01 8f 01 90 01 91 01 92 01 93 01 94 01 95 01     ................
     b54:	96 01 97 01 98 01 99 01 9a 01 9b 01 9c 01 9d 01     ................
     b64:	9e 01 9f 01 a0 01 a1 01 a2 01 a3 01 a4 01 a5 01     ................
     b74:	a6 01 a7 01 a8 01 a9 01 aa 01 ab 01 ac 01 ad 01     ................
     b84:	ae 01 af 01 b0 01 b1 01 b2 01 b3 01 b4 01 b5 01     ................
     b94:	b6 01 b7 01 b8 01 b9 01 ba 01 bb 01 bc 01 bd 01     ................
     ba4:	be 01 bf 01 c0 01 c1 01 c2 01 c3 01 c4 01 c5 01     ................
     bb4:	c6 01 c7 01 c8 01 c9 01 ca 01 cb 01 cc 01 cd 01     ................
     bc4:	ce 01 cf 01 d0 01 d1 01 d2 01 d3 01 d4 01 d5 01     ................
     bd4:	d6 01 d7 01 d8 01 d9 01 da 01 db 01 dc 01 dd 01     ................
     be4:	de 01 df 01 e0 01 e1 01 e2 01 e3 01 e4 01 e5 01     ................
     bf4:	e6 01 e7 01 e8 01 e9 01 ea 01 eb 01 ec 01 ed 01     ................
     c04:	ee 01 ef 01 f0 01 f1 01 f2 01 f3 01 f4 01 f5 01     ................
     c14:	f6 01 f7 01 f8 01 f9 01 fa 01 fb 01 fc 01 fd 01     ................
     c24:	fe 01 ff 01 00 02 01 02 02 02 03 02 04 02 05 02     ................
     c34:	06 02 07 02 08 02 09 02 0a 02 0b 02 0c 02 0d 02     ................
     c44:	0e 02 0f 02 10 02 11 02 12 02 13 02 14 02 15 02     ................
     c54:	16 02 17 02 18 02 19 02 1a 02 1b 02 1c 02 1d 02     ................
     c64:	1e 02 1f 02 20 02 21 02 22 02 23 02 24 02 25 02     .... .!.".#.$.%.
     c74:	26 02 27 02 28 02 29 02 2a 02 2b 02 2c 02 2d 02     &.'.(.).*.+.,.-.
     c84:	2e 02 2f 02 30 02 31 02 32 02 33 02 34 02 35 02     ../.0.1.2.3.4.5.
     c94:	36 02 37 02 38 02 39 02 3a 02 3b 02 3c 02 3d 02     6.7.8.9.:.;.<.=.
     ca4:	3e 02 3f 02 40 02 41 02 42 02 43 02 44 02 45 02     >.?.@.A.B.C.D.E.
     cb4:	46 02 47 02 48 02 49 02 4a 02 4b 02 4c 02 4d 02     F.G.H.I.J.K.L.M.
     cc4:	4e 02 4f 02 50 02 51 02 52 02 53 02 54 02 55 02     N.O.P.Q.R.S.T.U.
     cd4:	56 02 57 02 58 02 59 02 5a 02 5b 02 5c 02 5d 02     V.W.X.Y.Z.[.\.].
     ce4:	5e 02 5f 02 60 02 61 02 62 02 63 02 64 02 65 02     ^._.`.a.b.c.d.e.
     cf4:	66 02 67 02 68 02 69 02 6a 02 6b 02 6c 02 6d 02     f.g.h.i.j.k.l.m.
     d04:	6e 02 6f 02 70 02 71 02 72 02 73 02 74 02 75 02     n.o.p.q.r.s.t.u.
     d14:	76 02 77 02 78 02 79 02 7a 02 7b 02 7c 02 7d 02     v.w.x.y.z.{.|.}.
     d24:	7e 02 7f 02 80 02 81 02 82 02 83 02 84 02 85 02     ~...............
     d34:	86 02 87 02 88 02 89 02 8a 02 8b 02 8c 02 8d 02     ................
     d44:	8e 02 8f 02 90 02 91 02 92 02 93 02 94 02 95 02     ................
     d54:	96 02 97 02 98 02 99 02 9a 02 9b 02 9c 02 9d 02     ................
     d64:	9e 02 9f 02 a0 02 a1 02 a2 02 a3 02 a4 02 a5 02     ................
     d74:	a6 02 a7 02 a8 02 a9 02 aa 02 ab 02 ac 02 ad 02     ................
     d84:	ae 02 af 02 b0 02 b1 02 b2 02 b3 02 b4 02 b5 02     ................
     d94:	b6 02 b7 02 b8 02 b9 02 ba 02 bb 02 bc 02 bd 02     ................
     da4:	be 02 bf 02 c0 02 c1 02 c2 02 c3 02 c4 02 c5 02     ................
     db4:	c6 02 c7 02 c8 02 c9 02 ca 02 cb 02 cc 02 cd 02     ................
     dc4:	ce 02 cf 02 d0 02 d1 02 d2 02 d3 02 d4 02 d5 02     ................
     dd4:	d6 02 d7 02 d8 02 d9 02 da 02 db 02 dc 02 dd 02     ................
     de4:	de 02 df 02 e0 02 e1 02 e2 02 e3 02 e4 02 e5 02     ................
     df4:	e6 02 e7 02 e8 02 e9 02 ea 02 eb 02 ec 02 ed 02     ................
     e04:	ee 02 ef 02 f0 02 f1 02 f2 02 f3 02 f4 02 f5 02     ................
     e14:	f6 02 f7 02 f8 02 f9 02 fa 02 fb 02 fc 02 fd 02     ................
     e24:	fe 02 ff 02 00 03 01 03 02 03 03 03 04 03 05 03     ................
     e34:	06 03 07 03 08 03 09 03 0a 03 0b 03 0c 03 0d 03     ................
     e44:	0e 03 0f 03 10 03 11 03 12 03 13 03 14 03 15 03     ................
     e54:	16 03 17 03 18 03 19 03 1a 03 1b 03 1c 03 1d 03     ................
     e64:	1e 03 1f 03 20 03                                   .... .

00000e6a <wl_10nm>:
     e6a:	36 01 40 01 4a 01 54 01 5e 01 68 01 72 01 7c 01     6.@.J.T.^.h.r.|.
     e7a:	86 01 90 01 9a 01 a4 01 ae 01 b8 01 c2 01 cc 01     ................
     e8a:	d6 01 e0 01 ea 01 f4 01 fe 01 08 02 12 02 1c 02     ................
     e9a:	26 02 30 02 3a 02 44 02 4e 02 58 02 62 02 6c 02     &.0.:.D.N.X.b.l.
     eaa:	76 02 80 02 8a 02 94 02 9e 02 a8 02 b2 02 bc 02     v...............
     eba:	c6 02 d0 02 da 02 e4 02 ee 02 f8 02 02 03 0c 03     ................
     eca:	16 03 20 03                                         .. .

00000ece <unitcoeff>:
     ece:	17 b7 d1 38 17 b7 51 39 6f 12 03 3a 6f 12 83 3a     ...8..Q9o..:o..:
     ede:	6f 12 03 3b 0a d7 a3 3b 0a d7 23 3c 0a d7 a3 3c     o..;...;..#<...<
     eee:	cd cc 4c 3d cd cc cc 3d                             ..L=...=

00000ef6 <ProductString>:
     ef6:	14 03 55 00 56 00 56 00 49 00 53 00 53 00 50 00     ..U.V.V.I.S.S.P.
     f06:	45 00 43 00 00 00                                   E.C...

00000f0c <ManufacturerString>:
     f0c:	0e 03 4f 00 50 00 54 00 43 00 4f 00 4d 00 00 00     ..O.P.T.C.O.M...

00000f1c <LanguageString>:
     f1c:	04 03 09 04                                         ....

00000f20 <ConfigurationDescriptor>:
     f20:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     f30:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     f40:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     f50:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000f5e <DeviceDescriptor>:
     f5e:	12 01 10 01 02 00 00 08 a3 21 01 20 01 00 01 02     .........!. ....
     f6e:	dc 01                                               ..

00000f70 <__c.2529>:
     f70:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     f80:	47 00                                               G.

00000f82 <pstr_an>:
     f82:	61 6e 00                                            an.

00000f85 <pstr_nfinity>:
     f85:	6e 66 69 6e 69 74 79 00                             nfinity.

00000f8d <pwr_m10>:
     f8d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     f9d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000fa5 <pwr_p10>:
     fa5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     fb5:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000fbe <__ctors_end>:
     fbe:	11 24       	eor	r1, r1
     fc0:	1f be       	out	0x3f, r1	; 63
     fc2:	cf ef       	ldi	r28, 0xFF	; 255
     fc4:	da e0       	ldi	r29, 0x0A	; 10
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	cd bf       	out	0x3d, r28	; 61

00000fca <__do_copy_data>:
     fca:	12 e0       	ldi	r17, 0x02	; 2
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b1 e0       	ldi	r27, 0x01	; 1
     fd0:	e2 e8       	ldi	r30, 0x82	; 130
     fd2:	fe e4       	ldi	r31, 0x4E	; 78
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <__do_copy_data+0x10>
     fd6:	05 90       	lpm	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	a2 35       	cpi	r26, 0x52	; 82
     fdc:	b1 07       	cpc	r27, r17
     fde:	d9 f7       	brne	.-10     	; 0xfd6 <__do_copy_data+0xc>

00000fe0 <__do_clear_bss>:
     fe0:	29 e0       	ldi	r18, 0x09	; 9
     fe2:	a2 e5       	ldi	r26, 0x52	; 82
     fe4:	b2 e0       	ldi	r27, 0x02	; 2
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <.do_clear_bss_start>

00000fe8 <.do_clear_bss_loop>:
     fe8:	1d 92       	st	X+, r1

00000fea <.do_clear_bss_start>:
     fea:	aa 35       	cpi	r26, 0x5A	; 90
     fec:	b2 07       	cpc	r27, r18
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <.do_clear_bss_loop>
     ff0:	0e 94 2d 14 	call	0x285a	; 0x285a <main>
     ff4:	0c 94 3f 27 	jmp	0x4e7e	; 0x4e7e <_exit>

00000ff8 <__bad_interrupt>:
     ff8:	03 c8       	rjmp	.-4090   	; 0x0 <__vectors>

00000ffa <conv_wl>:
    case EXPOSURE_TIME_SEL_100ms:
        return EXPOSURE_TIME_100ms;
    default:
        return EXPOSURE_TIME_100us;
    }
}
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	60 97       	sbiw	r28, 0x10	; 16
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	ee e5       	ldi	r30, 0x5E	; 94
    1028:	fa e0       	ldi	r31, 0x0A	; 10
    102a:	85 90       	lpm	r8, Z+
    102c:	95 90       	lpm	r9, Z+
    102e:	a5 90       	lpm	r10, Z+
    1030:	b4 90       	lpm	r11, Z
    1032:	e2 e6       	ldi	r30, 0x62	; 98
    1034:	fa e0       	ldi	r31, 0x0A	; 10
    1036:	45 90       	lpm	r4, Z+
    1038:	55 90       	lpm	r5, Z+
    103a:	65 90       	lpm	r6, Z+
    103c:	74 90       	lpm	r7, Z
    103e:	e6 e6       	ldi	r30, 0x66	; 102
    1040:	fa e0       	ldi	r31, 0x0A	; 10
    1042:	25 91       	lpm	r18, Z+
    1044:	35 91       	lpm	r19, Z+
    1046:	45 91       	lpm	r20, Z+
    1048:	54 91       	lpm	r21, Z
    104a:	29 83       	std	Y+1, r18	; 0x01
    104c:	3a 83       	std	Y+2, r19	; 0x02
    104e:	4b 83       	std	Y+3, r20	; 0x03
    1050:	5c 83       	std	Y+4, r21	; 0x04
    1052:	ea e6       	ldi	r30, 0x6A	; 106
    1054:	fa e0       	ldi	r31, 0x0A	; 10
    1056:	25 91       	lpm	r18, Z+
    1058:	35 91       	lpm	r19, Z+
    105a:	45 91       	lpm	r20, Z+
    105c:	54 91       	lpm	r21, Z
    105e:	2d 83       	std	Y+5, r18	; 0x05
    1060:	3e 83       	std	Y+6, r19	; 0x06
    1062:	4f 83       	std	Y+7, r20	; 0x07
    1064:	58 87       	std	Y+8, r21	; 0x08
    1066:	ee e6       	ldi	r30, 0x6E	; 110
    1068:	fa e0       	ldi	r31, 0x0A	; 10
    106a:	25 91       	lpm	r18, Z+
    106c:	35 91       	lpm	r19, Z+
    106e:	45 91       	lpm	r20, Z+
    1070:	54 91       	lpm	r21, Z
    1072:	29 87       	std	Y+9, r18	; 0x09
    1074:	3a 87       	std	Y+10, r19	; 0x0a
    1076:	4b 87       	std	Y+11, r20	; 0x0b
    1078:	5c 87       	std	Y+12, r21	; 0x0c
    107a:	e2 e7       	ldi	r30, 0x72	; 114
    107c:	fa e0       	ldi	r31, 0x0A	; 10
    107e:	25 91       	lpm	r18, Z+
    1080:	35 91       	lpm	r19, Z+
    1082:	45 91       	lpm	r20, Z+
    1084:	54 91       	lpm	r21, Z
    1086:	2d 87       	std	Y+13, r18	; 0x0d
    1088:	3e 87       	std	Y+14, r19	; 0x0e
    108a:	4f 87       	std	Y+15, r20	; 0x0f
    108c:	58 8b       	std	Y+16, r21	; 0x10
    108e:	bc 01       	movw	r22, r24
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	07 2e       	mov	r0, r23
    1096:	00 0c       	add	r0, r0
    1098:	88 0b       	sbc	r24, r24
    109a:	99 0b       	sbc	r25, r25
    109c:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
    10a0:	6b 01       	movw	r12, r22
    10a2:	7c 01       	movw	r14, r24
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	c3 01       	movw	r24, r6
    10aa:	b2 01       	movw	r22, r4
    10ac:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    10b0:	a5 01       	movw	r20, r10
    10b2:	94 01       	movw	r18, r8
    10b4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    10b8:	4b 01       	movw	r8, r22
    10ba:	5c 01       	movw	r10, r24
    10bc:	a7 01       	movw	r20, r14
    10be:	96 01       	movw	r18, r12
    10c0:	69 81       	ldd	r22, Y+1	; 0x01
    10c2:	7a 81       	ldd	r23, Y+2	; 0x02
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    10cc:	a7 01       	movw	r20, r14
    10ce:	96 01       	movw	r18, r12
    10d0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	c5 01       	movw	r24, r10
    10da:	b4 01       	movw	r22, r8
    10dc:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    10e0:	4b 01       	movw	r8, r22
    10e2:	5c 01       	movw	r10, r24
    10e4:	a7 01       	movw	r20, r14
    10e6:	96 01       	movw	r18, r12
    10e8:	6d 81       	ldd	r22, Y+5	; 0x05
    10ea:	7e 81       	ldd	r23, Y+6	; 0x06
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    10f4:	a7 01       	movw	r20, r14
    10f6:	96 01       	movw	r18, r12
    10f8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    10fc:	a7 01       	movw	r20, r14
    10fe:	96 01       	movw	r18, r12
    1100:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1104:	9b 01       	movw	r18, r22
    1106:	ac 01       	movw	r20, r24
    1108:	c5 01       	movw	r24, r10
    110a:	b4 01       	movw	r22, r8
    110c:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1110:	4b 01       	movw	r8, r22
    1112:	5c 01       	movw	r10, r24
    1114:	a7 01       	movw	r20, r14
    1116:	96 01       	movw	r18, r12
    1118:	69 85       	ldd	r22, Y+9	; 0x09
    111a:	7a 85       	ldd	r23, Y+10	; 0x0a
    111c:	8b 85       	ldd	r24, Y+11	; 0x0b
    111e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1120:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1124:	a7 01       	movw	r20, r14
    1126:	96 01       	movw	r18, r12
    1128:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    112c:	a7 01       	movw	r20, r14
    112e:	96 01       	movw	r18, r12
    1130:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1134:	a7 01       	movw	r20, r14
    1136:	96 01       	movw	r18, r12
    1138:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1148:	4b 01       	movw	r8, r22
    114a:	5c 01       	movw	r10, r24
    114c:	a7 01       	movw	r20, r14
    114e:	96 01       	movw	r18, r12
    1150:	6d 85       	ldd	r22, Y+13	; 0x0d
    1152:	7e 85       	ldd	r23, Y+14	; 0x0e
    1154:	8f 85       	ldd	r24, Y+15	; 0x0f
    1156:	98 89       	ldd	r25, Y+16	; 0x10
    1158:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    115c:	a7 01       	movw	r20, r14
    115e:	96 01       	movw	r18, r12
    1160:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1164:	a7 01       	movw	r20, r14
    1166:	96 01       	movw	r18, r12
    1168:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    116c:	a7 01       	movw	r20, r14
    116e:	96 01       	movw	r18, r12
    1170:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1174:	a7 01       	movw	r20, r14
    1176:	96 01       	movw	r18, r12
    1178:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	c5 01       	movw	r24, r10
    1182:	b4 01       	movw	r22, r8
    1184:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1188:	60 96       	adiw	r28, 0x10	; 16
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	7f 90       	pop	r7
    11aa:	6f 90       	pop	r6
    11ac:	5f 90       	pop	r5
    11ae:	4f 90       	pop	r4
    11b0:	08 95       	ret

000011b2 <EVENT_USB_Device_Connect>:
    11b2:	08 95       	ret

000011b4 <EVENT_USB_Device_Disconnect>:
    11b4:	08 95       	ret

000011b6 <EVENT_USB_Device_ConfigurationChanged>:
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	0c 94 47 19 	jmp	0x328e	; 0x328e <CDC_Device_ConfigureEndpoints>

000011be <EVENT_USB_Device_ControlRequest>:
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0c 94 5d 1a 	jmp	0x34ba	; 0x34ba <CDC_Device_ProcessControlRequest>

000011c6 <EVENT_CDC_Device_ControLineStateChanged>:
    11c6:	08 95       	ret

000011c8 <delay>:
    11c8:	00 00       	nop
    11ca:	00 00       	nop
    11cc:	00 00       	nop
    11ce:	00 00       	nop
    11d0:	00 00       	nop
    11d2:	08 95       	ret

000011d4 <adc_temp_read>:
    11d4:	8f 92       	push	r8
    11d6:	9f 92       	push	r9
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	80 e4       	ldi	r24, 0x40	; 64
    11e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    11ea:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    11ee:	87 60       	ori	r24, 0x07	; 7
    11f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    11f4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    11f8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    11fc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    1200:	87 ec       	ldi	r24, 0xC7	; 199
    1202:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1206:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    120a:	86 fd       	sbrc	r24, 6
    120c:	fc cf       	rjmp	.-8      	; 0x1206 <adc_temp_read+0x32>
    120e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1212:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	78 2b       	or	r23, r24
    121a:	73 70       	andi	r23, 0x03	; 3
    121c:	07 2e       	mov	r0, r23
    121e:	00 0c       	add	r0, r0
    1220:	88 0b       	sbc	r24, r24
    1222:	99 0b       	sbc	r25, r25
    1224:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 ec       	ldi	r19, 0xC0	; 192
    122c:	4f e7       	ldi	r20, 0x7F	; 127
    122e:	54 e4       	ldi	r21, 0x44	; 68
    1230:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 ea       	ldi	r20, 0xA0	; 160
    123a:	50 e4       	ldi	r21, 0x40	; 64
    123c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1240:	4b 01       	movw	r8, r22
    1242:	5c 01       	movw	r10, r24
    1244:	9b 01       	movw	r18, r22
    1246:	ac 01       	movw	r20, r24
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	80 ea       	ldi	r24, 0xA0	; 160
    124e:	90 e4       	ldi	r25, 0x40	; 64
    1250:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1254:	6b 01       	movw	r12, r22
    1256:	7c 01       	movw	r14, r24
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__cmpsf2>
    1262:	88 23       	and	r24, r24
    1264:	69 f0       	breq	.+26     	; 0x1280 <adc_temp_read+0xac>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e4       	ldi	r19, 0x40	; 64
    126a:	4c e1       	ldi	r20, 0x1C	; 28
    126c:	56 e4       	ldi	r21, 0x46	; 70
    126e:	c5 01       	movw	r24, r10
    1270:	b4 01       	movw	r22, r8
    1272:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1276:	a7 01       	movw	r20, r14
    1278:	96 01       	movw	r18, r12
    127a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <adc_temp_read+0xb2>
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	cb 01       	movw	r24, r22
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e4       	ldi	r19, 0x40	; 64
    128a:	4c e1       	ldi	r20, 0x1C	; 28
    128c:	56 e4       	ldi	r21, 0x46	; 70
    128e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1292:	0e 94 cb 1c 	call	0x3996	; 0x3996 <log>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 eb       	ldi	r19, 0xB0	; 176
    129a:	46 e5       	ldi	r20, 0x56	; 86
    129c:	55 e4       	ldi	r21, 0x45	; 69
    129e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    12a2:	2f e0       	ldi	r18, 0x0F	; 15
    12a4:	3f ec       	ldi	r19, 0xCF	; 207
    12a6:	4b e5       	ldi	r20, 0x5B	; 91
    12a8:	5b e3       	ldi	r21, 0x3B	; 59
    12aa:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	80 e8       	ldi	r24, 0x80	; 128
    12b8:	9f e3       	ldi	r25, 0x3F	; 63
    12ba:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    12be:	23 e3       	ldi	r18, 0x33	; 51
    12c0:	33 e9       	ldi	r19, 0x93	; 147
    12c2:	48 e8       	ldi	r20, 0x88	; 136
    12c4:	53 e4       	ldi	r21, 0x43	; 67
    12c6:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	08 95       	ret

000012dc <mcp3201_init>:
    12dc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <spi_init>
    12e0:	20 9a       	sbi	0x04, 0	; 4
    12e2:	28 9a       	sbi	0x05, 0	; 5
    12e4:	08 95       	ret

000012e6 <mcp3201_read>:
    12e6:	cf 93       	push	r28
    12e8:	28 98       	cbi	0x05, 0	; 5
    12ea:	00 00       	nop
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 59 14 	call	0x28b2	; 0x28b2 <spi_transfer>
    12f2:	c8 2f       	mov	r28, r24
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <spi_transfer>
    12fa:	28 9a       	sbi	0x05, 0	; 5
    12fc:	cf 71       	andi	r28, 0x1F	; 31
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	c4 9f       	mul	r28, r20
    1302:	90 01       	movw	r18, r0
    1304:	11 24       	eor	r1, r1
    1306:	86 95       	lsr	r24
    1308:	a9 01       	movw	r20, r18
    130a:	48 2b       	or	r20, r24
    130c:	ca 01       	movw	r24, r20
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <c12880ma_init>:
    1312:	81 9a       	sbi	0x10, 1	; 16
    1314:	89 98       	cbi	0x11, 1	; 17
    1316:	85 9a       	sbi	0x10, 5	; 16
    1318:	8d 98       	cbi	0x11, 5	; 17
    131a:	ea ea       	ldi	r30, 0xAA	; 170
    131c:	f4 e0       	ldi	r31, 0x04	; 4
    131e:	11 92       	st	Z+, r1
    1320:	11 92       	st	Z+, r1
    1322:	11 92       	st	Z+, r1
    1324:	11 92       	st	Z+, r1
    1326:	89 e0       	ldi	r24, 0x09	; 9
    1328:	ea 32       	cpi	r30, 0x2A	; 42
    132a:	f8 07       	cpc	r31, r24
    132c:	c1 f7       	brne	.-16     	; 0x131e <c12880ma_init+0xc>
    132e:	08 95       	ret

00001330 <c12880ma_read>:
    1330:	cf 92       	push	r12
    1332:	df 92       	push	r13
    1334:	ef 92       	push	r14
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	ca ea       	ldi	r28, 0xAA	; 170
    1342:	d4 e0       	ldi	r29, 0x04	; 4
    1344:	fe 01       	movw	r30, r28
    1346:	11 92       	st	Z+, r1
    1348:	11 92       	st	Z+, r1
    134a:	11 92       	st	Z+, r1
    134c:	11 92       	st	Z+, r1
    134e:	89 e0       	ldi	r24, 0x09	; 9
    1350:	ea 32       	cpi	r30, 0x2A	; 42
    1352:	f8 07       	cpc	r31, r24
    1354:	c1 f7       	brne	.-16     	; 0x1346 <c12880ma_read+0x16>
    1356:	89 98       	cbi	0x11, 1	; 17
    1358:	37 df       	rcall	.-402    	; 0x11c8 <delay>
    135a:	89 9a       	sbi	0x11, 1	; 17
    135c:	35 df       	rcall	.-406    	; 0x11c8 <delay>
    135e:	89 98       	cbi	0x11, 1	; 17
    1360:	8d 9a       	sbi	0x11, 5	; 17
    1362:	32 df       	rcall	.-412    	; 0x11c8 <delay>
    1364:	03 e0       	ldi	r16, 0x03	; 3
    1366:	10 e0       	ldi	r17, 0x00	; 0
    1368:	89 9a       	sbi	0x11, 1	; 17
    136a:	2e df       	rcall	.-420    	; 0x11c8 <delay>
    136c:	89 98       	cbi	0x11, 1	; 17
    136e:	2c df       	rcall	.-424    	; 0x11c8 <delay>
    1370:	01 50       	subi	r16, 0x01	; 1
    1372:	11 09       	sbc	r17, r1
    1374:	c9 f7       	brne	.-14     	; 0x1368 <c12880ma_read+0x38>
    1376:	c1 2c       	mov	r12, r1
    1378:	d1 2c       	mov	r13, r1
    137a:	76 01       	movw	r14, r12
    137c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <exposure_time>
    1380:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <exposure_time+0x1>
    1384:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <exposure_time+0x2>
    1388:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <exposure_time+0x3>
    138c:	c8 16       	cp	r12, r24
    138e:	d9 06       	cpc	r13, r25
    1390:	ea 06       	cpc	r14, r26
    1392:	fb 06       	cpc	r15, r27
    1394:	54 f4       	brge	.+20     	; 0x13aa <c12880ma_read+0x7a>
    1396:	89 9a       	sbi	0x11, 1	; 17
    1398:	17 df       	rcall	.-466    	; 0x11c8 <delay>
    139a:	89 98       	cbi	0x11, 1	; 17
    139c:	15 df       	rcall	.-470    	; 0x11c8 <delay>
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	c8 1a       	sub	r12, r24
    13a2:	d8 0a       	sbc	r13, r24
    13a4:	e8 0a       	sbc	r14, r24
    13a6:	f8 0a       	sbc	r15, r24
    13a8:	e9 cf       	rjmp	.-46     	; 0x137c <c12880ma_read+0x4c>
    13aa:	8d 98       	cbi	0x11, 5	; 17
    13ac:	08 e5       	ldi	r16, 0x58	; 88
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	89 9a       	sbi	0x11, 1	; 17
    13b2:	0a df       	rcall	.-492    	; 0x11c8 <delay>
    13b4:	89 98       	cbi	0x11, 1	; 17
    13b6:	08 df       	rcall	.-496    	; 0x11c8 <delay>
    13b8:	01 50       	subi	r16, 0x01	; 1
    13ba:	11 09       	sbc	r17, r1
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <c12880ma_read+0x80>
    13be:	93 df       	rcall	.-218    	; 0x12e6 <mcp3201_read>
    13c0:	bc 01       	movw	r22, r24
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
    13ca:	69 93       	st	Y+, r22
    13cc:	79 93       	st	Y+, r23
    13ce:	89 93       	st	Y+, r24
    13d0:	99 93       	st	Y+, r25
    13d2:	89 9a       	sbi	0x11, 1	; 17
    13d4:	f9 de       	rcall	.-526    	; 0x11c8 <delay>
    13d6:	89 98       	cbi	0x11, 1	; 17
    13d8:	f7 de       	rcall	.-530    	; 0x11c8 <delay>
    13da:	89 e0       	ldi	r24, 0x09	; 9
    13dc:	ca 32       	cpi	r28, 0x2A	; 42
    13de:	d8 07       	cpc	r29, r24
    13e0:	71 f7       	brne	.-36     	; 0x13be <c12880ma_read+0x8e>
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	08 95       	ret

000013f4 <c12880ma_read_integ>:
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	9b df       	rcall	.-202    	; 0x1330 <c12880ma_read>
    13fa:	9a df       	rcall	.-204    	; 0x1330 <c12880ma_read>
    13fc:	99 df       	rcall	.-206    	; 0x1330 <c12880ma_read>
    13fe:	98 df       	rcall	.-208    	; 0x1330 <c12880ma_read>
    1400:	97 df       	rcall	.-210    	; 0x1330 <c12880ma_read>
    1402:	ca ea       	ldi	r28, 0xAA	; 170
    1404:	d4 e0       	ldi	r29, 0x04	; 4
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 ea       	ldi	r20, 0xA0	; 160
    140c:	50 e4       	ldi	r21, 0x40	; 64
    140e:	68 81       	ld	r22, Y
    1410:	79 81       	ldd	r23, Y+1	; 0x01
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    141a:	69 93       	st	Y+, r22
    141c:	79 93       	st	Y+, r23
    141e:	89 93       	st	Y+, r24
    1420:	99 93       	st	Y+, r25
    1422:	89 e0       	ldi	r24, 0x09	; 9
    1424:	ca 32       	cpi	r28, 0x2A	; 42
    1426:	d8 07       	cpc	r29, r24
    1428:	71 f7       	brne	.-36     	; 0x1406 <c12880ma_read_integ+0x12>
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <check_status>:
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <temperature>
    1440:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <temperature+0x1>
    1444:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <temperature+0x2>
    1448:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <temperature+0x3>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	52 e4       	ldi	r21, 0x42	; 66
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
    1458:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__gesf2>
    145c:	18 16       	cp	r1, r24
    145e:	d4 f0       	brlt	.+52     	; 0x1494 <check_status+0x64>
    1460:	a7 01       	movw	r20, r14
    1462:	96 01       	movw	r18, r12
    1464:	60 91 60 02 	lds	r22, 0x0260	; 0x800260 <temperature_dark>
    1468:	70 91 61 02 	lds	r23, 0x0261	; 0x800261 <temperature_dark+0x1>
    146c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <temperature_dark+0x2>
    1470:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <temperature_dark+0x3>
    1474:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1478:	9f 77       	andi	r25, 0x7F	; 127
    147a:	d1 e0       	ldi	r29, 0x01	; 1
    147c:	c0 e0       	ldi	r28, 0x00	; 0
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e4       	ldi	r21, 0x40	; 64
    1486:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__gesf2>
    148a:	87 fd       	sbrc	r24, 7
    148c:	d0 e0       	ldi	r29, 0x00	; 0
    148e:	8d 2f       	mov	r24, r29
    1490:	9c 2f       	mov	r25, r28
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <check_status+0x68>
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	08 95       	ret

000014a6 <SetupHardware>:
    14a6:	35 df       	rcall	.-406    	; 0x1312 <c12880ma_init>
    14a8:	19 df       	rcall	.-462    	; 0x12dc <mcp3201_init>
    14aa:	84 b7       	in	r24, 0x34	; 52
    14ac:	87 7f       	andi	r24, 0xF7	; 247
    14ae:	84 bf       	out	0x34, r24	; 52
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	a8 95       	wdr
    14b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14ba:	88 61       	ori	r24, 0x18	; 24
    14bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	80 e8       	ldi	r24, 0x80	; 128
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <USB_Init>

000014dc <correct>:
    14dc:	4f 92       	push	r4
    14de:	5f 92       	push	r5
    14e0:	6f 92       	push	r6
    14e2:	7f 92       	push	r7
    14e4:	8f 92       	push	r8
    14e6:	9f 92       	push	r9
    14e8:	af 92       	push	r10
    14ea:	bf 92       	push	r11
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	c0 90 64 02 	lds	r12, 0x0264	; 0x800264 <exposure_time_sel>
    1500:	d0 90 65 02 	lds	r13, 0x0265	; 0x800265 <exposure_time_sel+0x1>
    1504:	c6 01       	movw	r24, r12
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	fc 01       	movw	r30, r24
    1510:	ed 5d       	subi	r30, 0xDD	; 221
    1512:	fe 4f       	sbci	r31, 0xFE	; 254
    1514:	40 80       	ld	r4, Z
    1516:	51 80       	ldd	r5, Z+1	; 0x01
    1518:	62 80       	ldd	r6, Z+2	; 0x02
    151a:	73 80       	ldd	r7, Z+3	; 0x03
    151c:	9c 01       	movw	r18, r24
    151e:	22 53       	subi	r18, 0x32	; 50
    1520:	31 4f       	sbci	r19, 0xF1	; 241
    1522:	69 01       	movw	r12, r18
    1524:	ca e6       	ldi	r28, 0x6A	; 106
    1526:	d2 e0       	ldi	r29, 0x02	; 2
    1528:	0e ed       	ldi	r16, 0xDE	; 222
    152a:	15 e0       	ldi	r17, 0x05	; 5
    152c:	3a ea       	ldi	r19, 0xAA	; 170
    152e:	e3 2e       	mov	r14, r19
    1530:	34 e0       	ldi	r19, 0x04	; 4
    1532:	f3 2e       	mov	r15, r19
    1534:	69 91       	ld	r22, Y+
    1536:	79 91       	ld	r23, Y+
    1538:	f6 01       	movw	r30, r12
    153a:	85 90       	lpm	r8, Z+
    153c:	95 90       	lpm	r9, Z+
    153e:	a5 90       	lpm	r10, Z+
    1540:	b4 90       	lpm	r11, Z
    1542:	07 2e       	mov	r0, r23
    1544:	00 0c       	add	r0, r0
    1546:	88 0b       	sbc	r24, r24
    1548:	99 0b       	sbc	r25, r25
    154a:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
    154e:	a3 01       	movw	r20, r6
    1550:	92 01       	movw	r18, r4
    1552:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	f7 01       	movw	r30, r14
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1568:	a5 01       	movw	r20, r10
    156a:	94 01       	movw	r18, r8
    156c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1570:	f8 01       	movw	r30, r16
    1572:	25 91       	lpm	r18, Z+
    1574:	35 91       	lpm	r19, Z+
    1576:	45 91       	lpm	r20, Z+
    1578:	54 91       	lpm	r21, Z
    157a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    157e:	4b 01       	movw	r8, r22
    1580:	5c 01       	movw	r10, r24
    1582:	2f e5       	ldi	r18, 0x5F	; 95
    1584:	30 e7       	ldi	r19, 0x70	; 112
    1586:	49 e8       	ldi	r20, 0x89	; 137
    1588:	50 e3       	ldi	r21, 0x30	; 48
    158a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__cmpsf2>
    158e:	87 ff       	sbrs	r24, 7
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <correct+0xbc>
    1592:	81 2c       	mov	r8, r1
    1594:	91 2c       	mov	r9, r1
    1596:	54 01       	movw	r10, r8
    1598:	f7 01       	movw	r30, r14
    159a:	81 92       	st	Z+, r8
    159c:	91 92       	st	Z+, r9
    159e:	a1 92       	st	Z+, r10
    15a0:	b1 92       	st	Z+, r11
    15a2:	7f 01       	movw	r14, r30
    15a4:	0c 5f       	subi	r16, 0xFC	; 252
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	f4 e0       	ldi	r31, 0x04	; 4
    15aa:	ca 3a       	cpi	r28, 0xAA	; 170
    15ac:	df 07       	cpc	r29, r31
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <correct+0xd6>
    15b0:	c1 cf       	rjmp	.-126    	; 0x1534 <correct+0x58>
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	5f 90       	pop	r5
    15d0:	4f 90       	pop	r4
    15d2:	08 95       	ret

000015d4 <measure>:
void measure()
{
    15d4:	6f 92       	push	r6
    15d6:	7f 92       	push	r7
    15d8:	8f 92       	push	r8
    15da:	9f 92       	push	r9
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    if (auto_exposure)
    15f0:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <auto_exposure>
    15f4:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <auto_exposure+0x1>
    15f8:	89 2b       	or	r24, r25
    15fa:	09 f4       	brne	.+2      	; 0x15fe <measure+0x2a>
    15fc:	4e c0       	rjmp	.+156    	; 0x169a <measure+0xc6>
    15fe:	09 e4       	ldi	r16, 0x49	; 73
    1600:	11 e0       	ldi	r17, 0x01	; 1
    1602:	c0 e0       	ldi	r28, 0x00	; 0
    1604:	d0 e0       	ldi	r29, 0x00	; 0
    1606:	ce 01       	movw	r24, r28
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	09 97       	sbiw	r24, 0x09	; 9
    160c:	30 f4       	brcc	.+12     	; 0x161a <measure+0x46>
    160e:	f8 01       	movw	r30, r16
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	a0 e0       	ldi	r26, 0x00	; 0
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <measure+0x4e>
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    {
        for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
        {
            exposure_time = select_exposure_time(i);
    1622:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <exposure_time>
    1626:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <exposure_time+0x1>
    162a:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <exposure_time+0x2>
    162e:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <exposure_time+0x3>
            exposure_time_sel = i;
    1632:	d0 93 65 02 	sts	0x0265, r29	; 0x800265 <exposure_time_sel+0x1>
    1636:	c0 93 64 02 	sts	0x0264, r28	; 0x800264 <exposure_time_sel>
            //c12880ma_read();
            c12880ma_read_integ();
    163a:	dc de       	rcall	.-584    	; 0x13f4 <c12880ma_read_integ>
    163c:	3a ea       	ldi	r19, 0xAA	; 170
    163e:	83 2e       	mov	r8, r19
    1640:	34 e0       	ldi	r19, 0x04	; 4
            float max = 0;
    1642:	93 2e       	mov	r9, r19
    1644:	61 2c       	mov	r6, r1
    1646:	71 2c       	mov	r7, r1
    1648:	a1 2c       	mov	r10, r1
            float th = 1000.0f;
            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
                max = MAX(max, opticalPower[i]);
    164a:	b1 2c       	mov	r11, r1
    164c:	f4 01       	movw	r30, r8
    164e:	c1 90       	ld	r12, Z+
    1650:	d1 90       	ld	r13, Z+
    1652:	e1 90       	ld	r14, Z+
    1654:	f1 90       	ld	r15, Z+
    1656:	4f 01       	movw	r8, r30
    1658:	93 01       	movw	r18, r6
    165a:	a5 01       	movw	r20, r10
    165c:	c7 01       	movw	r24, r14
    165e:	b6 01       	movw	r22, r12
    1660:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__cmpsf2>
    1664:	87 fd       	sbrc	r24, 7
    1666:	02 c0       	rjmp	.+4      	; 0x166c <measure+0x98>
    1668:	36 01       	movw	r6, r12
            exposure_time_sel = i;
            //c12880ma_read();
            c12880ma_read_integ();
            float max = 0;
            float th = 1000.0f;
            for (int i = 0; i < C12880MA_CHANELS; i++)
    166a:	57 01       	movw	r10, r14
    166c:	fa e2       	ldi	r31, 0x2A	; 42
    166e:	8f 16       	cp	r8, r31
    1670:	f9 e0       	ldi	r31, 0x09	; 9
    1672:	9f 06       	cpc	r9, r31
            {
                max = MAX(max, opticalPower[i]);
            }
            if (max >= th)
    1674:	59 f7       	brne	.-42     	; 0x164c <measure+0x78>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e7       	ldi	r20, 0x7A	; 122
    167c:	54 e4       	ldi	r21, 0x44	; 68
    167e:	b3 01       	movw	r22, r6
    1680:	c5 01       	movw	r24, r10
    1682:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__gesf2>
    1686:	87 ff       	sbrs	r24, 7
}
void measure()
{
    if (auto_exposure)
    {
        for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1688:	35 c0       	rjmp	.+106    	; 0x16f4 <measure+0x120>
    168a:	21 96       	adiw	r28, 0x01	; 1
    168c:	0e 5f       	subi	r16, 0xFE	; 254
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	ca 30       	cpi	r28, 0x0A	; 10
    1692:	d1 05       	cpc	r29, r1
    1694:	09 f0       	breq	.+2      	; 0x1698 <measure+0xc4>
    1696:	b7 cf       	rjmp	.-146    	; 0x1606 <measure+0x32>
    1698:	2d c0       	rjmp	.+90     	; 0x16f4 <measure+0x120>
    169a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <exposure_time_sel>
    169e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <exposure_time_sel+0x1>
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	89 30       	cpi	r24, 0x09	; 9
    16a6:	91 05       	cpc	r25, r1
    16a8:	50 f4       	brcc	.+20     	; 0x16be <measure+0xea>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	fc 01       	movw	r30, r24
    16b0:	e5 5b       	subi	r30, 0xB5	; 181
    16b2:	fe 4f       	sbci	r31, 0xFE	; 254
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    }
}

long select_exposure_time(int sel)
{
    switch (sel)
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <measure+0xf2>
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
                break;
        }
    }
    else
    {
        exposure_time = select_exposure_time(exposure_time_sel);
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <exposure_time>
    16ca:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <exposure_time+0x1>
    16ce:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <exposure_time+0x2>
    16d2:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <exposure_time+0x3>
        //c12880ma_read();
        c12880ma_read_integ();
    }
}
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    }
    else
    {
        exposure_time = select_exposure_time(exposure_time_sel);
        //c12880ma_read();
        c12880ma_read_integ();
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    }
}
    16f2:	80 ce       	rjmp	.-768    	; 0x13f4 <c12880ma_read_integ>
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	8f 90       	pop	r8
    170c:	7f 90       	pop	r7
    170e:	6f 90       	pop	r6
    1710:	08 95       	ret

00001712 <dark>:

void dark()
{
    1712:	2f 92       	push	r2
    1714:	3f 92       	push	r3
    1716:	4f 92       	push	r4
    1718:	5f 92       	push	r5
    171a:	6f 92       	push	r6
    171c:	7f 92       	push	r7
    171e:	8f 92       	push	r8
    1720:	9f 92       	push	r9
    1722:	af 92       	push	r10
    1724:	bf 92       	push	r11
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	00 d0       	rcall	.+0      	; 0x1738 <dark+0x26>
    1738:	00 d0       	rcall	.+0      	; 0x173a <dark+0x28>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	83 e2       	ldi	r24, 0x23	; 35
    1740:	c8 2e       	mov	r12, r24
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	d8 2e       	mov	r13, r24
    1746:	99 e4       	ldi	r25, 0x49	; 73
    1748:	29 2e       	mov	r2, r25
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	39 2e       	mov	r3, r25
    174e:	da 82       	std	Y+2, r13	; 0x02
    1750:	c9 82       	std	Y+1, r12	; 0x01
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1752:	e1 2c       	mov	r14, r1
    1754:	f1 2c       	mov	r15, r1
    1756:	c7 01       	movw	r24, r14
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	09 97       	sbiw	r24, 0x09	; 9
    175c:	30 f4       	brcc	.+12     	; 0x176a <dark+0x58>
    175e:	f1 01       	movw	r30, r2
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <dark+0x60>
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 e0       	ldi	r26, 0x00	; 0
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    {

        exposure_time = select_exposure_time(i);
    1772:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <exposure_time>
    1776:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <exposure_time+0x1>
    177a:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <exposure_time+0x2>
    177e:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <exposure_time+0x3>
        //c12880ma_read();
        c12880ma_read_integ();
    1782:	38 de       	rcall	.-912    	; 0x13f4 <c12880ma_read_integ>
    1784:	22 ea       	ldi	r18, 0xA2	; 162
    1786:	34 e0       	ldi	r19, 0x04	; 4
    1788:	3c 83       	std	Y+4, r19	; 0x04
        
        for(int j=0;j<C12880MA_CHANELS;j++)
    178a:	2b 83       	std	Y+3, r18	; 0x03
    178c:	00 e0       	ldi	r16, 0x00	; 0
        {
            if(j == 0)
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	01 15       	cp	r16, r1
    1792:	11 05       	cpc	r17, r1
    1794:	09 f0       	breq	.+2      	; 0x1798 <dark+0x86>
            {
                opticalPower[j] = (-3.0f * opticalPower[j] + 12.0f * opticalPower[j] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
    1796:	6b c0       	rjmp	.+214    	; 0x186e <dark+0x15c>
    1798:	80 90 aa 04 	lds	r8, 0x04AA	; 0x8004aa <opticalPower>
    179c:	90 90 ab 04 	lds	r9, 0x04AB	; 0x8004ab <opticalPower+0x1>
    17a0:	a0 90 ac 04 	lds	r10, 0x04AC	; 0x8004ac <opticalPower+0x2>
    17a4:	b0 90 ad 04 	lds	r11, 0x04AD	; 0x8004ad <opticalPower+0x3>
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e4       	ldi	r20, 0x40	; 64
    17ae:	50 ec       	ldi	r21, 0xC0	; 192
    17b0:	c5 01       	movw	r24, r10
    17b2:	b4 01       	movw	r22, r8
    17b4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    17b8:	2b 01       	movw	r4, r22
    17ba:	3c 01       	movw	r6, r24
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e4       	ldi	r20, 0x40	; 64
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	c5 01       	movw	r24, r10
    17c6:	b4 01       	movw	r22, r8
    17c8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	c3 01       	movw	r24, r6
    17d2:	b2 01       	movw	r22, r4
    17d4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    17d8:	2b 01       	movw	r4, r22
    17da:	3c 01       	movw	r6, r24
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	48 e8       	ldi	r20, 0x88	; 136
    17e2:	51 e4       	ldi	r21, 0x41	; 65
    17e4:	c5 01       	movw	r24, r10
    17e6:	b4 01       	movw	r22, r8
    17e8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    17ec:	9b 01       	movw	r18, r22
    17ee:	ac 01       	movw	r20, r24
    17f0:	c3 01       	movw	r24, r6
    17f2:	b2 01       	movw	r22, r4
    17f4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    17f8:	4b 01       	movw	r8, r22
    17fa:	5c 01       	movw	r10, r24
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e4       	ldi	r20, 0x40	; 64
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <opticalPower+0x4>
    1808:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <opticalPower+0x5>
    180c:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <opticalPower+0x6>
    1810:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <opticalPower+0x7>
    1814:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	c5 01       	movw	r24, r10
    181e:	b4 01       	movw	r22, r8
    1820:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1824:	4b 01       	movw	r8, r22
    1826:	5c 01       	movw	r10, r24
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e4       	ldi	r20, 0x40	; 64
    182e:	50 e4       	ldi	r21, 0x40	; 64
    1830:	60 91 b2 04 	lds	r22, 0x04B2	; 0x8004b2 <opticalPower+0x8>
    1834:	70 91 b3 04 	lds	r23, 0x04B3	; 0x8004b3 <opticalPower+0x9>
    1838:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <opticalPower+0xa>
    183c:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <opticalPower+0xb>
    1840:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	c5 01       	movw	r24, r10
    184a:	b4 01       	movw	r22, r8
    184c:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	4c e0       	ldi	r20, 0x0C	; 12
    1856:	52 e4       	ldi	r21, 0x42	; 66
    1858:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    185c:	60 93 aa 04 	sts	0x04AA, r22	; 0x8004aa <opticalPower>
    1860:	70 93 ab 04 	sts	0x04AB, r23	; 0x8004ab <opticalPower+0x1>
    1864:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <opticalPower+0x2>
    1868:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <opticalPower+0x3>
            }
            else if(j == 1)
    186c:	c3 c1       	rjmp	.+902    	; 0x1bf4 <dark+0x4e2>
    186e:	01 30       	cpi	r16, 0x01	; 1
    1870:	11 05       	cpc	r17, r1
    1872:	09 f0       	breq	.+2      	; 0x1876 <dark+0x164>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-1] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
    1874:	71 c0       	rjmp	.+226    	; 0x1958 <dark+0x246>
    1876:	80 90 aa 04 	lds	r8, 0x04AA	; 0x8004aa <opticalPower>
    187a:	90 90 ab 04 	lds	r9, 0x04AB	; 0x8004ab <opticalPower+0x1>
    187e:	a0 90 ac 04 	lds	r10, 0x04AC	; 0x8004ac <opticalPower+0x2>
    1882:	b0 90 ad 04 	lds	r11, 0x04AD	; 0x8004ad <opticalPower+0x3>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e4       	ldi	r20, 0x40	; 64
    188c:	50 ec       	ldi	r21, 0xC0	; 192
    188e:	c5 01       	movw	r24, r10
    1890:	b4 01       	movw	r22, r8
    1892:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1896:	2b 01       	movw	r4, r22
    1898:	3c 01       	movw	r6, r24
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e4       	ldi	r20, 0x40	; 64
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	c5 01       	movw	r24, r10
    18a4:	b4 01       	movw	r22, r8
    18a6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    18aa:	9b 01       	movw	r18, r22
    18ac:	ac 01       	movw	r20, r24
    18ae:	c3 01       	movw	r24, r6
    18b0:	b2 01       	movw	r22, r4
    18b2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    18b6:	4b 01       	movw	r8, r22
    18b8:	5c 01       	movw	r10, r24
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	48 e8       	ldi	r20, 0x88	; 136
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <opticalPower+0x4>
    18c6:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <opticalPower+0x5>
    18ca:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <opticalPower+0x6>
    18ce:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <opticalPower+0x7>
    18d2:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
    18da:	c5 01       	movw	r24, r10
    18dc:	b4 01       	movw	r22, r8
    18de:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    18e2:	4b 01       	movw	r8, r22
    18e4:	5c 01       	movw	r10, r24
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e4       	ldi	r20, 0x40	; 64
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	60 91 b2 04 	lds	r22, 0x04B2	; 0x8004b2 <opticalPower+0x8>
    18f2:	70 91 b3 04 	lds	r23, 0x04B3	; 0x8004b3 <opticalPower+0x9>
    18f6:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <opticalPower+0xa>
    18fa:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <opticalPower+0xb>
    18fe:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1902:	9b 01       	movw	r18, r22
    1904:	ac 01       	movw	r20, r24
    1906:	c5 01       	movw	r24, r10
    1908:	b4 01       	movw	r22, r8
    190a:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    190e:	4b 01       	movw	r8, r22
    1910:	5c 01       	movw	r10, r24
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e4       	ldi	r20, 0x40	; 64
    1918:	50 e4       	ldi	r21, 0x40	; 64
    191a:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <opticalPower+0xc>
    191e:	70 91 b7 04 	lds	r23, 0x04B7	; 0x8004b7 <opticalPower+0xd>
    1922:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <opticalPower+0xe>
    1926:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <opticalPower+0xf>
    192a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    192e:	9b 01       	movw	r18, r22
    1930:	ac 01       	movw	r20, r24
    1932:	c5 01       	movw	r24, r10
    1934:	b4 01       	movw	r22, r8
    1936:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4c e0       	ldi	r20, 0x0C	; 12
    1940:	52 e4       	ldi	r21, 0x42	; 66
    1942:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1946:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <opticalPower+0x4>
    194a:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <opticalPower+0x5>
    194e:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <opticalPower+0x6>
    1952:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <opticalPower+0x7>
            }
            else if(j == C12880MA_CHANELS - 2)
    1956:	4e c1       	rjmp	.+668    	; 0x1bf4 <dark+0x4e2>
    1958:	0e 31       	cpi	r16, 0x1E	; 30
    195a:	31 e0       	ldi	r19, 0x01	; 1
    195c:	13 07       	cpc	r17, r19
    195e:	09 f0       	breq	.+2      	; 0x1962 <dark+0x250>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+1]) / 35.0f;
    1960:	71 c0       	rjmp	.+226    	; 0x1a44 <dark+0x332>
    1962:	80 90 26 09 	lds	r8, 0x0926	; 0x800926 <opticalPower+0x47c>
    1966:	90 90 27 09 	lds	r9, 0x0927	; 0x800927 <opticalPower+0x47d>
    196a:	a0 90 28 09 	lds	r10, 0x0928	; 0x800928 <opticalPower+0x47e>
    196e:	b0 90 29 09 	lds	r11, 0x0929	; 0x800929 <opticalPower+0x47f>
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e4       	ldi	r20, 0x40	; 64
    1978:	50 ec       	ldi	r21, 0xC0	; 192
    197a:	60 91 1a 09 	lds	r22, 0x091A	; 0x80091a <opticalPower+0x470>
    197e:	70 91 1b 09 	lds	r23, 0x091B	; 0x80091b <opticalPower+0x471>
    1982:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <opticalPower+0x472>
    1986:	90 91 1d 09 	lds	r25, 0x091D	; 0x80091d <opticalPower+0x473>
    198a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    198e:	2b 01       	movw	r4, r22
    1990:	3c 01       	movw	r6, r24
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e4       	ldi	r20, 0x40	; 64
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	60 91 1e 09 	lds	r22, 0x091E	; 0x80091e <opticalPower+0x474>
    199e:	70 91 1f 09 	lds	r23, 0x091F	; 0x80091f <opticalPower+0x475>
    19a2:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <opticalPower+0x476>
    19a6:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <opticalPower+0x477>
    19aa:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    19ae:	9b 01       	movw	r18, r22
    19b0:	ac 01       	movw	r20, r24
    19b2:	c3 01       	movw	r24, r6
    19b4:	b2 01       	movw	r22, r4
    19b6:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    19ba:	2b 01       	movw	r4, r22
    19bc:	3c 01       	movw	r6, r24
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	48 e8       	ldi	r20, 0x88	; 136
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	60 91 22 09 	lds	r22, 0x0922	; 0x800922 <opticalPower+0x478>
    19ca:	70 91 23 09 	lds	r23, 0x0923	; 0x800923 <opticalPower+0x479>
    19ce:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <opticalPower+0x47a>
    19d2:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <opticalPower+0x47b>
    19d6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	c3 01       	movw	r24, r6
    19e0:	b2 01       	movw	r22, r4
    19e2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    19e6:	2b 01       	movw	r4, r22
    19e8:	3c 01       	movw	r6, r24
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e4       	ldi	r20, 0x40	; 64
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	c5 01       	movw	r24, r10
    19f4:	b4 01       	movw	r22, r8
    19f6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    19fa:	9b 01       	movw	r18, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	c3 01       	movw	r24, r6
    1a00:	b2 01       	movw	r22, r4
    1a02:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1a06:	2b 01       	movw	r4, r22
    1a08:	3c 01       	movw	r6, r24
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e4       	ldi	r20, 0x40	; 64
    1a10:	50 e4       	ldi	r21, 0x40	; 64
    1a12:	c5 01       	movw	r24, r10
    1a14:	b4 01       	movw	r22, r8
    1a16:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	c3 01       	movw	r24, r6
    1a20:	b2 01       	movw	r22, r4
    1a22:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4c e0       	ldi	r20, 0x0C	; 12
    1a2c:	52 e4       	ldi	r21, 0x42	; 66
    1a2e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1a32:	60 93 22 09 	sts	0x0922, r22	; 0x800922 <opticalPower+0x478>
    1a36:	70 93 23 09 	sts	0x0923, r23	; 0x800923 <opticalPower+0x479>
    1a3a:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <opticalPower+0x47a>
    1a3e:	90 93 25 09 	sts	0x0925, r25	; 0x800925 <opticalPower+0x47b>
            }
            else if(j == C12880MA_CHANELS - 1)
    1a42:	d8 c0       	rjmp	.+432    	; 0x1bf4 <dark+0x4e2>
    1a44:	0f 31       	cpi	r16, 0x1F	; 31
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	18 07       	cpc	r17, r24
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <dark+0x33c>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j] - 3.0f * opticalPower[j]) / 35.0f;
    1a4c:	6b c0       	rjmp	.+214    	; 0x1b24 <dark+0x412>
    1a4e:	80 90 26 09 	lds	r8, 0x0926	; 0x800926 <opticalPower+0x47c>
    1a52:	90 90 27 09 	lds	r9, 0x0927	; 0x800927 <opticalPower+0x47d>
    1a56:	a0 90 28 09 	lds	r10, 0x0928	; 0x800928 <opticalPower+0x47e>
    1a5a:	b0 90 29 09 	lds	r11, 0x0929	; 0x800929 <opticalPower+0x47f>
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e4       	ldi	r20, 0x40	; 64
    1a64:	50 ec       	ldi	r21, 0xC0	; 192
    1a66:	60 91 1e 09 	lds	r22, 0x091E	; 0x80091e <opticalPower+0x474>
    1a6a:	70 91 1f 09 	lds	r23, 0x091F	; 0x80091f <opticalPower+0x475>
    1a6e:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <opticalPower+0x476>
    1a72:	90 91 21 09 	lds	r25, 0x0921	; 0x800921 <opticalPower+0x477>
    1a76:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1a7a:	2b 01       	movw	r4, r22
    1a7c:	3c 01       	movw	r6, r24
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e4       	ldi	r20, 0x40	; 64
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	60 91 22 09 	lds	r22, 0x0922	; 0x800922 <opticalPower+0x478>
    1a8a:	70 91 23 09 	lds	r23, 0x0923	; 0x800923 <opticalPower+0x479>
    1a8e:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <opticalPower+0x47a>
    1a92:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <opticalPower+0x47b>
    1a96:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1a9a:	9b 01       	movw	r18, r22
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	c3 01       	movw	r24, r6
    1aa0:	b2 01       	movw	r22, r4
    1aa2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1aa6:	2b 01       	movw	r4, r22
    1aa8:	3c 01       	movw	r6, r24
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	48 e8       	ldi	r20, 0x88	; 136
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	c5 01       	movw	r24, r10
    1ab4:	b4 01       	movw	r22, r8
    1ab6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1aba:	9b 01       	movw	r18, r22
    1abc:	ac 01       	movw	r20, r24
    1abe:	c3 01       	movw	r24, r6
    1ac0:	b2 01       	movw	r22, r4
    1ac2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1ac6:	2b 01       	movw	r4, r22
    1ac8:	3c 01       	movw	r6, r24
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e4       	ldi	r20, 0x40	; 64
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	b4 01       	movw	r22, r8
    1ad6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	c3 01       	movw	r24, r6
    1ae0:	b2 01       	movw	r22, r4
    1ae2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1ae6:	2b 01       	movw	r4, r22
    1ae8:	3c 01       	movw	r6, r24
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e4       	ldi	r20, 0x40	; 64
    1af0:	50 e4       	ldi	r21, 0x40	; 64
    1af2:	c5 01       	movw	r24, r10
    1af4:	b4 01       	movw	r22, r8
    1af6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1afa:	9b 01       	movw	r18, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	c3 01       	movw	r24, r6
    1b00:	b2 01       	movw	r22, r4
    1b02:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4c e0       	ldi	r20, 0x0C	; 12
    1b0c:	52 e4       	ldi	r21, 0x42	; 66
    1b0e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1b12:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <opticalPower+0x47c>
    1b16:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <opticalPower+0x47d>
    1b1a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <opticalPower+0x47e>
    1b1e:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <opticalPower+0x47f>
            }
            else
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
    1b22:	68 c0       	rjmp	.+208    	; 0x1bf4 <dark+0x4e2>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e4       	ldi	r20, 0x40	; 64
    1b2a:	50 ec       	ldi	r21, 0xC0	; 192
    1b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1b3c:	4b 01       	movw	r8, r22
    1b3e:	5c 01       	movw	r10, r24
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e4       	ldi	r20, 0x40	; 64
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4c:	64 81       	ldd	r22, Z+4	; 0x04
    1b4e:	75 81       	ldd	r23, Z+5	; 0x05
    1b50:	86 81       	ldd	r24, Z+6	; 0x06
    1b52:	97 81       	ldd	r25, Z+7	; 0x07
    1b54:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	b4 01       	movw	r22, r8
    1b60:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1b64:	4b 01       	movw	r8, r22
    1b66:	5c 01       	movw	r10, r24
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	48 e8       	ldi	r20, 0x88	; 136
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	eb 81       	ldd	r30, Y+3	; 0x03
    1b72:	fc 81       	ldd	r31, Y+4	; 0x04
    1b74:	60 85       	ldd	r22, Z+8	; 0x08
    1b76:	71 85       	ldd	r23, Z+9	; 0x09
    1b78:	82 85       	ldd	r24, Z+10	; 0x0a
    1b7a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b7c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1b80:	9b 01       	movw	r18, r22
    1b82:	ac 01       	movw	r20, r24
    1b84:	c5 01       	movw	r24, r10
    1b86:	b4 01       	movw	r22, r8
    1b88:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1b8c:	4b 01       	movw	r8, r22
    1b8e:	5c 01       	movw	r10, r24
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e4       	ldi	r20, 0x40	; 64
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9c:	64 85       	ldd	r22, Z+12	; 0x0c
    1b9e:	75 85       	ldd	r23, Z+13	; 0x0d
    1ba0:	86 85       	ldd	r24, Z+14	; 0x0e
    1ba2:	97 85       	ldd	r25, Z+15	; 0x0f
    1ba4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1ba8:	9b 01       	movw	r18, r22
    1baa:	ac 01       	movw	r20, r24
    1bac:	c5 01       	movw	r24, r10
    1bae:	b4 01       	movw	r22, r8
    1bb0:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1bb4:	4b 01       	movw	r8, r22
    1bb6:	5c 01       	movw	r10, r24
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e4       	ldi	r20, 0x40	; 64
    1bbe:	50 e4       	ldi	r21, 0x40	; 64
    1bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc4:	60 89       	ldd	r22, Z+16	; 0x10
    1bc6:	71 89       	ldd	r23, Z+17	; 0x11
    1bc8:	82 89       	ldd	r24, Z+18	; 0x12
    1bca:	93 89       	ldd	r25, Z+19	; 0x13
    1bcc:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	c5 01       	movw	r24, r10
    1bd6:	b4 01       	movw	r22, r8
    1bd8:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4c e0       	ldi	r20, 0x0C	; 12
    1be2:	52 e4       	ldi	r21, 0x42	; 66
    1be4:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1be8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bea:	fc 81       	ldd	r31, Y+4	; 0x04
    1bec:	60 87       	std	Z+8, r22	; 0x08
    1bee:	71 87       	std	Z+9, r23	; 0x09
    1bf0:	82 87       	std	Z+10, r24	; 0x0a

        exposure_time = select_exposure_time(i);
        //c12880ma_read();
        c12880ma_read_integ();
        
        for(int j=0;j<C12880MA_CHANELS;j++)
    1bf2:	93 87       	std	Z+11, r25	; 0x0b
    1bf4:	0f 5f       	subi	r16, 0xFF	; 255
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfc:	2c 5f       	subi	r18, 0xFC	; 252
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	3c 83       	std	Y+4, r19	; 0x04
    1c02:	2b 83       	std	Y+3, r18	; 0x03
    1c04:	00 32       	cpi	r16, 0x20	; 32
    1c06:	31 e0       	ldi	r19, 0x01	; 1
    1c08:	13 07       	cpc	r17, r19
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <dark+0x4fc>
            {
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
            }
        }

        darkopticalPowerGain[i] = 0.0f;
    1c0c:	c1 cd       	rjmp	.-1150   	; 0x1790 <dark+0x7e>
    1c0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c10:	fa 81       	ldd	r31, Y+2	; 0x02
    1c12:	10 82       	st	Z, r1
    1c14:	11 82       	std	Z+1, r1	; 0x01
    1c16:	12 82       	std	Z+2, r1	; 0x02
    1c18:	13 82       	std	Z+3, r1	; 0x03
    1c1a:	2a ea       	ldi	r18, 0xAA	; 170
    1c1c:	34 e0       	ldi	r19, 0x04	; 4
    1c1e:	3c 83       	std	Y+4, r19	; 0x04
    1c20:	2b 83       	std	Y+3, r18	; 0x03
    1c22:	0a e6       	ldi	r16, 0x6A	; 106
    1c24:	12 e0       	ldi	r17, 0x02	; 2
    1c26:	81 2c       	mov	r8, r1
    1c28:	91 2c       	mov	r9, r1
        for (int j = 0; j < C12880MA_CHANELS; j++)
        {
            if (i == EXPOSURE_TIME_SEL_5ms)
    1c2a:	54 01       	movw	r10, r8
    1c2c:	35 e0       	ldi	r19, 0x05	; 5
    1c2e:	e3 16       	cp	r14, r19
    1c30:	f1 04       	cpc	r15, r1
            {
                darkopticalPower[j] = opticalPower[j];
    1c32:	59 f4       	brne	.+22     	; 0x1c4a <dark+0x538>
    1c34:	eb 81       	ldd	r30, Y+3	; 0x03
    1c36:	fc 81       	ldd	r31, Y+4	; 0x04
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	0e 94 df 1b 	call	0x37be	; 0x37be <__fixsfsi>
    1c44:	f8 01       	movw	r30, r16
    1c46:	71 83       	std	Z+1, r23	; 0x01
            }
            // if (darkopticalPowerGain[i] > opticalPower[j])
            // {
            //     darkopticalPowerGain[i] = opticalPower[j];
            // }
            darkopticalPowerGain[i] += opticalPower[j];
    1c48:	60 83       	st	Z, r22
    1c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4e:	21 91       	ld	r18, Z+
    1c50:	31 91       	ld	r19, Z+
    1c52:	41 91       	ld	r20, Z+
    1c54:	51 91       	ld	r21, Z+
    1c56:	fc 83       	std	Y+4, r31	; 0x04
    1c58:	eb 83       	std	Y+3, r30	; 0x03
    1c5a:	c5 01       	movw	r24, r10
    1c5c:	b4 01       	movw	r22, r8
    1c5e:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    1c62:	4b 01       	movw	r8, r22
    1c64:	5c 01       	movw	r10, r24
    1c66:	0e 5f       	subi	r16, 0xFE	; 254
                opticalPower[j] = (-3.0f * opticalPower[j-2] + 12.0f * opticalPower[j-1] + 17.0f * opticalPower[j] + 12.0f * opticalPower[j+1] - 3.0f * opticalPower[j+2]) / 35.0f;
            }
        }

        darkopticalPowerGain[i] = 0.0f;
        for (int j = 0; j < C12880MA_CHANELS; j++)
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	2a e2       	ldi	r18, 0x2A	; 42
    1c6c:	39 e0       	ldi	r19, 0x09	; 9
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	28 17       	cp	r18, r24
    1c74:	39 07       	cpc	r19, r25
            // {
            //     darkopticalPowerGain[i] = opticalPower[j];
            // }
            darkopticalPowerGain[i] += opticalPower[j];
        }
        darkopticalPowerGain[i] /= (float)C12880MA_CHANELS;
    1c76:	d1 f6       	brne	.-76     	; 0x1c2c <dark+0x51a>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e9       	ldi	r20, 0x90	; 144
    1c7e:	53 e4       	ldi	r21, 0x43	; 67
    1c80:	c5 01       	movw	r24, r10
    1c82:	b4 01       	movw	r22, r8
    1c84:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	61 93       	st	Z+, r22
    1c8e:	71 93       	st	Z+, r23
    1c90:	81 93       	st	Z+, r24
    1c92:	91 93       	st	Z+, r25
    1c94:	fa 83       	std	Y+2, r31	; 0x02
    }
}

void dark()
{
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1c96:	e9 83       	std	Y+1, r30	; 0x01
    1c98:	ff ef       	ldi	r31, 0xFF	; 255
    1c9a:	ef 1a       	sub	r14, r31
    1c9c:	ff 0a       	sbc	r15, r31
    1c9e:	22 e0       	ldi	r18, 0x02	; 2
    1ca0:	22 0e       	add	r2, r18
    1ca2:	31 1c       	adc	r3, r1
    1ca4:	3a e0       	ldi	r19, 0x0A	; 10
    1ca6:	e3 16       	cp	r14, r19
    1ca8:	f1 04       	cpc	r15, r1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <dark+0x59c>
            // }
            darkopticalPowerGain[i] += opticalPower[j];
        }
        darkopticalPowerGain[i] /= (float)C12880MA_CHANELS;
    }
    float x = darkopticalPowerGain[EXPOSURE_TIME_SEL_5ms];
    1cac:	54 cd       	rjmp	.-1368   	; 0x1756 <dark+0x44>
    1cae:	80 90 37 01 	lds	r8, 0x0137	; 0x800137 <darkopticalPowerGain+0x14>
    1cb2:	90 90 38 01 	lds	r9, 0x0138	; 0x800138 <darkopticalPowerGain+0x15>
    1cb6:	a0 90 39 01 	lds	r10, 0x0139	; 0x800139 <darkopticalPowerGain+0x16>
    1cba:	b0 90 3a 01 	lds	r11, 0x013A	; 0x80013a <darkopticalPowerGain+0x17>
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    {
        darkopticalPowerGain[i] /= x;
    1cbe:	a5 01       	movw	r20, r10
    1cc0:	94 01       	movw	r18, r8
    1cc2:	f6 01       	movw	r30, r12
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    1cd0:	f6 01       	movw	r30, r12
    1cd2:	61 93       	st	Z+, r22
    1cd4:	71 93       	st	Z+, r23
    1cd6:	81 93       	st	Z+, r24
    1cd8:	91 93       	st	Z+, r25
            darkopticalPowerGain[i] += opticalPower[j];
        }
        darkopticalPowerGain[i] /= (float)C12880MA_CHANELS;
    }
    float x = darkopticalPowerGain[EXPOSURE_TIME_SEL_5ms];
    for (int i = 0; i < EXPOSURE_TIME_SEL_N; i++)
    1cda:	6f 01       	movw	r12, r30
    1cdc:	2b e4       	ldi	r18, 0x4B	; 75
    1cde:	31 e0       	ldi	r19, 0x01	; 1
    1ce0:	2e 17       	cp	r18, r30
    {
        darkopticalPowerGain[i] /= x;
    }
    temperature_dark = adc_temp_read();
    1ce2:	3f 07       	cpc	r19, r31
    1ce4:	61 f7       	brne	.-40     	; 0x1cbe <dark+0x5ac>
    1ce6:	76 da       	rcall	.-2836   	; 0x11d4 <adc_temp_read>
    1ce8:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <temperature_dark>
    1cec:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <temperature_dark+0x1>
    1cf0:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <temperature_dark+0x2>
    1cf4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <temperature_dark+0x3>
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	3f 90       	pop	r3
    1d22:	2f 90       	pop	r2
    1d24:	08 95       	ret

00001d26 <CDC_Recive_Event>:

void CDC_Recive_Event()
{
    int d = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <CDC_Device_ReceiveByte>
    if (d > 0)
    1d2e:	18 16       	cp	r1, r24
    1d30:	19 06       	cpc	r1, r25
    1d32:	9c f4       	brge	.+38     	; 0x1d5a <CDC_Recive_Event+0x34>
    {
        cdc_recive_buffer[cdc_recive_index] = d;
    1d34:	20 91 2a 09 	lds	r18, 0x092A	; 0x80092a <cdc_recive_index>
    1d38:	30 91 2b 09 	lds	r19, 0x092B	; 0x80092b <cdc_recive_index+0x1>
    1d3c:	f9 01       	movw	r30, r18
    1d3e:	e4 5d       	subi	r30, 0xD4	; 212
    1d40:	f6 4f       	sbci	r31, 0xF6	; 246
    1d42:	80 83       	st	Z, r24
        cdc_recive_index++;
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	30 93 2b 09 	sts	0x092B, r19	; 0x80092b <cdc_recive_index+0x1>
    1d4c:	20 93 2a 09 	sts	0x092A, r18	; 0x80092a <cdc_recive_index>
        if (d == '\n')
    1d50:	0a 97       	sbiw	r24, 0x0a	; 10
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <CDC_Recive_Event+0x34>
        {
            cdc_recived = true;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <cdc_recived>
    1d5a:	08 95       	ret

00001d5c <CDC_Recive_Event_Process>:
        }
    }
}

void CDC_Recive_Event_Process()
{
    1d5c:	2f 92       	push	r2
    1d5e:	3f 92       	push	r3
    1d60:	4f 92       	push	r4
    1d62:	5f 92       	push	r5
    1d64:	6f 92       	push	r6
    1d66:	7f 92       	push	r7
    1d68:	8f 92       	push	r8
    1d6a:	9f 92       	push	r9
    1d6c:	af 92       	push	r10
    1d6e:	bf 92       	push	r11
    1d70:	cf 92       	push	r12
    1d72:	df 92       	push	r13
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	ca 58       	subi	r28, 0x8A	; 138
    1d86:	d1 09       	sbc	r29, r1
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    if (cdc_recived)
    1d92:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <cdc_recived>
    1d96:	88 23       	and	r24, r24
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <CDC_Recive_Event_Process+0x40>
    1d9a:	45 c5       	rjmp	.+2698   	; 0x2826 <CDC_Recive_Event_Process+0xaca>
    {
        cdc_recived = false;
    1d9c:	10 92 4c 09 	sts	0x094C, r1	; 0x80094c <cdc_recived>
        char *message = cdc_recive_buffer;

        if (strncmp(message, "MEAS\n", 5) == 0)
    1da0:	45 e0       	ldi	r20, 0x05	; 5
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	6d e5       	ldi	r22, 0x5D	; 93
    1da6:	71 e0       	ldi	r23, 0x01	; 1
    1da8:	8c e2       	ldi	r24, 0x2C	; 44
    1daa:	99 e0       	ldi	r25, 0x09	; 9
    1dac:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
    1db0:	89 2b       	or	r24, r25
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <CDC_Recive_Event_Process+0x5a>
        {
            measure();
            correct();
    1db4:	61 c0       	rjmp	.+194    	; 0x1e78 <CDC_Recive_Event_Process+0x11c>
    1db6:	0e dc       	rcall	.-2020   	; 0x15d4 <measure>
    1db8:	91 db       	rcall	.-2270   	; 0x14dc <correct>
    1dba:	1a ea       	ldi	r17, 0xAA	; 170
    1dbc:	e1 2e       	mov	r14, r17
    1dbe:	14 e0       	ldi	r17, 0x04	; 4

            for (int i = 0; i < C12880MA_CHANELS; i++)
    1dc0:	f1 2e       	mov	r15, r17
    1dc2:	00 e0       	ldi	r16, 0x00	; 0
            {
#ifdef CP150
                if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[470]) + 1)
#endif
#ifdef CP160
                    if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[490]) + 1)
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
    1dc6:	88 e0       	ldi	r24, 0x08	; 8
    1dc8:	68 2e       	mov	r6, r24
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	78 2e       	mov	r7, r24
    1dce:	9c ed       	ldi	r25, 0xDC	; 220
    1dd0:	89 2e       	mov	r8, r25
    1dd2:	95 e0       	ldi	r25, 0x05	; 5
#endif
                    {
                        float wl = conv_wl(i);
                        char msg[32] = {0};
    1dd4:	99 2e       	mov	r9, r25
    1dd6:	20 e2       	ldi	r18, 0x20	; 32
    1dd8:	52 2e       	mov	r5, r18
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
                        sprintf(msg, "%f:%g\r", wl, opticalPower[i]);
    1dde:	6c 01       	movw	r12, r24
    1de0:	33 e6       	ldi	r19, 0x63	; 99
    1de2:	a3 2e       	mov	r10, r19
    1de4:	31 e0       	ldi	r19, 0x01	; 1
            {
#ifdef CP150
                if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[470]) + 1)
#endif
#ifdef CP160
                    if (i >= pgm_read_word(&wl_lut_1nm[0]) - 1 && i <= pgm_read_word(&wl_lut_1nm[490]) + 1)
    1de6:	b3 2e       	mov	r11, r19
    1de8:	f3 01       	movw	r30, r6
    1dea:	85 91       	lpm	r24, Z+
    1dec:	94 91       	lpm	r25, Z
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	08 17       	cp	r16, r24
    1df2:	19 07       	cpc	r17, r25
    1df4:	88 f1       	brcs	.+98     	; 0x1e58 <CDC_Recive_Event_Process+0xfc>
    1df6:	f4 01       	movw	r30, r8
    1df8:	85 91       	lpm	r24, Z+
    1dfa:	94 91       	lpm	r25, Z
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	80 17       	cp	r24, r16
#endif
                    {
                        float wl = conv_wl(i);
    1e00:	91 07       	cpc	r25, r17
    1e02:	50 f1       	brcs	.+84     	; 0x1e58 <CDC_Recive_Event_Process+0xfc>
    1e04:	c8 01       	movw	r24, r16
                        char msg[32] = {0};
    1e06:	f9 d8       	rcall	.-3598   	; 0xffa <conv_wl>
    1e08:	d6 01       	movw	r26, r12
    1e0a:	e5 2d       	mov	r30, r5
    1e0c:	1d 92       	st	X+, r1
    1e0e:	ea 95       	dec	r30
                        sprintf(msg, "%f:%g\r", wl, opticalPower[i]);
    1e10:	e9 f7       	brne	.-6      	; 0x1e0c <CDC_Recive_Event_Process+0xb0>
    1e12:	d7 01       	movw	r26, r14
    1e14:	13 96       	adiw	r26, 0x03	; 3
    1e16:	2c 91       	ld	r18, X
    1e18:	13 97       	sbiw	r26, 0x03	; 3
    1e1a:	2f 93       	push	r18
    1e1c:	12 96       	adiw	r26, 0x02	; 2
    1e1e:	2c 91       	ld	r18, X
    1e20:	12 97       	sbiw	r26, 0x02	; 2
    1e22:	2f 93       	push	r18
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	2c 91       	ld	r18, X
    1e28:	11 97       	sbiw	r26, 0x01	; 1
    1e2a:	2f 93       	push	r18
    1e2c:	2c 91       	ld	r18, X
    1e2e:	2f 93       	push	r18
    1e30:	9f 93       	push	r25
    1e32:	8f 93       	push	r24
    1e34:	7f 93       	push	r23
    1e36:	6f 93       	push	r22
    1e38:	bf 92       	push	r11
    1e3a:	af 92       	push	r10
    1e3c:	df 92       	push	r13
    1e3e:	cf 92       	push	r12
    1e40:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <sprintf>
                        CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    1e44:	b6 01       	movw	r22, r12
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	91 e0       	ldi	r25, 0x01	; 1
    1e4a:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <CDC_Device_SendString>
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
        if (strncmp(message, "MEAS\n", 5) == 0)
        {
            measure();
            correct();

            for (int i = 0; i < C12880MA_CHANELS; i++)
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	0f 5f       	subi	r16, 0xFF	; 255
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	f4 e0       	ldi	r31, 0x04	; 4
    1e5e:	ef 0e       	add	r14, r31
    1e60:	f1 1c       	adc	r15, r1
    1e62:	00 32       	cpi	r16, 0x20	; 32
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	12 07       	cpc	r17, r18
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <CDC_Recive_Event_Process+0x110>
                        char msg[32] = {0};
                        sprintf(msg, "%f:%g\r", wl, opticalPower[i]);
                        CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
                    }
            }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
    1e6a:	be cf       	rjmp	.-132    	; 0x1de8 <CDC_Recive_Event_Process+0x8c>
    1e6c:	6a e0       	ldi	r22, 0x0A	; 10
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	0e 94 8c 19 	call	0x3318	; 0x3318 <CDC_Device_SendByte>
        }
        else if (strncmp(message, "MEAS1nm\n", 9) == 0)
    1e76:	cc c4       	rjmp	.+2456   	; 0x2810 <CDC_Recive_Event_Process+0xab4>
    1e78:	49 e0       	ldi	r20, 0x09	; 9
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	6a e6       	ldi	r22, 0x6A	; 106
    1e7e:	71 e0       	ldi	r23, 0x01	; 1
    1e80:	8c e2       	ldi	r24, 0x2C	; 44
    1e82:	99 e0       	ldi	r25, 0x09	; 9
    1e84:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {
            measure();
    1e88:	89 2b       	or	r24, r25
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <CDC_Recive_Event_Process+0x132>
            correct();
    1e8c:	ac c2       	rjmp	.+1368   	; 0x23e6 <CDC_Recive_Event_Process+0x68a>
    1e8e:	a2 db       	rcall	.-2236   	; 0x15d4 <measure>
    1e90:	25 db       	rcall	.-2486   	; 0x14dc <correct>
    1e92:	88 e0       	ldi	r24, 0x08	; 8
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	e9 96       	adiw	r28, 0x39	; 57
    1e98:	9f af       	std	Y+63, r25	; 0x3f
    1e9a:	8e af       	std	Y+62, r24	; 0x3e
    1e9c:	e9 97       	sbiw	r28, 0x39	; 57
    1e9e:	b4 e9       	ldi	r27, 0x94	; 148
    1ea0:	2b 2e       	mov	r2, r27
    1ea2:	ba e0       	ldi	r27, 0x0A	; 10
                    // {
                    //     op = 0.0f;
                    // }
                    float op = lagrange(i);
                    float wl = wl_1nm[i];
                    char msg[32] = {0};
    1ea4:	3b 2e       	mov	r3, r27
    1ea6:	de 01       	movw	r26, r28
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	a7 96       	adiw	r28, 0x27	; 39
    1eac:	bf af       	std	Y+63, r27	; 0x3f
    1eae:	ae af       	std	Y+62, r26	; 0x3e
    return a1 + a2 * i + a3 * i * i + a4 * i * i * i + a5 * i * i * i * i + a6 * i * i * i * i * i;
}

static float lagrange(int index)
{
    float x = pgm_read_word(&wl_1nm[index]);
    1eb0:	a7 97       	sbiw	r28, 0x27	; 39
    1eb2:	f1 01       	movw	r30, r2
    1eb4:	65 91       	lpm	r22, Z+
    int j = pgm_read_word(&wl_lut_1nm[index]);
    1eb6:	74 91       	lpm	r23, Z
    1eb8:	e9 96       	adiw	r28, 0x39	; 57
    1eba:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ebc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ebe:	e9 97       	sbiw	r28, 0x39	; 57
    1ec0:	05 91       	lpm	r16, Z+

    if(j < 2)
    1ec2:	14 91       	lpm	r17, Z
    1ec4:	02 30       	cpi	r16, 0x02	; 2
    1ec6:	11 05       	cpc	r17, r1
    {
        return opticalPower[1];
    1ec8:	4c f4       	brge	.+18     	; 0x1edc <CDC_Recive_Event_Process+0x180>
    1eca:	d0 90 ae 04 	lds	r13, 0x04AE	; 0x8004ae <opticalPower+0x4>
    1ece:	c0 90 af 04 	lds	r12, 0x04AF	; 0x8004af <opticalPower+0x5>
    1ed2:	f0 90 b0 04 	lds	r15, 0x04B0	; 0x8004b0 <opticalPower+0x6>
    1ed6:	e0 90 b1 04 	lds	r14, 0x04B1	; 0x8004b1 <opticalPower+0x7>
    return a1 + a2 * i + a3 * i * i + a4 * i * i * i + a5 * i * i * i * i + a6 * i * i * i * i * i;
}

static float lagrange(int index)
{
    float x = pgm_read_word(&wl_1nm[index]);
    1eda:	43 c2       	rjmp	.+1158   	; 0x2362 <CDC_Recive_Event_Process+0x606>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
    1ee4:	6b 01       	movw	r12, r22
    if(j < 2)
    {
        return opticalPower[1];
    }

    float x0 = conv_wl(j - 2);
    1ee6:	7c 01       	movw	r14, r24
    1ee8:	f8 01       	movw	r30, r16
    1eea:	32 97       	sbiw	r30, 0x02	; 2
    1eec:	cf 57       	subi	r28, 0x7F	; 127
    1eee:	df 4f       	sbci	r29, 0xFF	; 255
    1ef0:	f9 83       	std	Y+1, r31	; 0x01
    1ef2:	e8 83       	st	Y, r30
    1ef4:	c1 58       	subi	r28, 0x81	; 129
    1ef6:	d0 40       	sbci	r29, 0x00	; 0
    1ef8:	cf 01       	movw	r24, r30
    1efa:	7f d8       	rcall	.-3842   	; 0xffa <conv_wl>
    1efc:	ab 96       	adiw	r28, 0x2b	; 43
    1efe:	6c af       	std	Y+60, r22	; 0x3c
    1f00:	7d af       	std	Y+61, r23	; 0x3d
    1f02:	8e af       	std	Y+62, r24	; 0x3e
    1f04:	9f af       	std	Y+63, r25	; 0x3f
    float x1 = conv_wl(j - 1);
    1f06:	ab 97       	sbiw	r28, 0x2b	; 43
    1f08:	c8 01       	movw	r24, r16
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	cd 57       	subi	r28, 0x7D	; 125
    1f0e:	df 4f       	sbci	r29, 0xFF	; 255
    1f10:	99 83       	std	Y+1, r25	; 0x01
    1f12:	88 83       	st	Y, r24
    1f14:	c3 58       	subi	r28, 0x83	; 131
    1f16:	d0 40       	sbci	r29, 0x00	; 0
    1f18:	70 d8       	rcall	.-3872   	; 0xffa <conv_wl>
    1f1a:	af 96       	adiw	r28, 0x2f	; 47
    1f1c:	6c af       	std	Y+60, r22	; 0x3c
    1f1e:	7d af       	std	Y+61, r23	; 0x3d
    1f20:	8e af       	std	Y+62, r24	; 0x3e
    float x2 = conv_wl(j);
    1f22:	9f af       	std	Y+63, r25	; 0x3f
    1f24:	af 97       	sbiw	r28, 0x2f	; 47
    1f26:	c8 01       	movw	r24, r16
    1f28:	68 d8       	rcall	.-3888   	; 0xffa <conv_wl>
    1f2a:	e3 96       	adiw	r28, 0x33	; 51
    1f2c:	6c af       	std	Y+60, r22	; 0x3c
    1f2e:	7d af       	std	Y+61, r23	; 0x3d
    1f30:	8e af       	std	Y+62, r24	; 0x3e
    1f32:	9f af       	std	Y+63, r25	; 0x3f
    float x3 = conv_wl(j + 1);
    1f34:	e3 97       	sbiw	r28, 0x33	; 51
    1f36:	d8 01       	movw	r26, r16
    1f38:	11 96       	adiw	r26, 0x01	; 1
    1f3a:	cb 57       	subi	r28, 0x7B	; 123
    1f3c:	df 4f       	sbci	r29, 0xFF	; 255
    1f3e:	b9 83       	std	Y+1, r27	; 0x01
    1f40:	a8 83       	st	Y, r26
    1f42:	c5 58       	subi	r28, 0x85	; 133
    1f44:	d0 40       	sbci	r29, 0x00	; 0
    1f46:	cd 01       	movw	r24, r26
    1f48:	58 d8       	rcall	.-3920   	; 0xffa <conv_wl>
    1f4a:	e7 96       	adiw	r28, 0x37	; 55
    1f4c:	6c af       	std	Y+60, r22	; 0x3c
    1f4e:	7d af       	std	Y+61, r23	; 0x3d
    1f50:	8e af       	std	Y+62, r24	; 0x3e
    1f52:	9f af       	std	Y+63, r25	; 0x3f
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    1f54:	e7 97       	sbiw	r28, 0x37	; 55
    1f56:	af 96       	adiw	r28, 0x2f	; 47
    1f58:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f5a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f5c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f5e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f60:	af 97       	sbiw	r28, 0x2f	; 47
    1f62:	c7 01       	movw	r24, r14
    1f64:	b6 01       	movw	r22, r12
    1f66:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1f6a:	4b 01       	movw	r8, r22
    1f6c:	5c 01       	movw	r10, r24
    1f6e:	e3 96       	adiw	r28, 0x33	; 51
    1f70:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f72:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f74:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f76:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f78:	e3 97       	sbiw	r28, 0x33	; 51
    1f7a:	c7 01       	movw	r24, r14
    1f7c:	b6 01       	movw	r22, r12
    1f7e:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1f82:	ed 96       	adiw	r28, 0x3d	; 61
    1f84:	6c af       	std	Y+60, r22	; 0x3c
    1f86:	7d af       	std	Y+61, r23	; 0x3d
    1f88:	8e af       	std	Y+62, r24	; 0x3e
    1f8a:	9f af       	std	Y+63, r25	; 0x3f
    1f8c:	ed 97       	sbiw	r28, 0x3d	; 61
    1f8e:	e7 96       	adiw	r28, 0x37	; 55
    1f90:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f92:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f94:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f96:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f98:	e7 97       	sbiw	r28, 0x37	; 55
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	b6 01       	movw	r22, r12
    1f9e:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1fa2:	c3 58       	subi	r28, 0x83	; 131
    1fa4:	df 4f       	sbci	r29, 0xFF	; 255
    1fa6:	68 83       	st	Y, r22
    1fa8:	79 83       	std	Y+1, r23	; 0x01
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	9b 83       	std	Y+3, r25	; 0x03
    1fae:	cd 57       	subi	r28, 0x7D	; 125
    +((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3))*y1
    1fb0:	d0 40       	sbci	r29, 0x00	; 0
    1fb2:	ab 96       	adiw	r28, 0x2b	; 43
    1fb4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fb6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fb8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fba:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fbc:	ab 97       	sbiw	r28, 0x2b	; 43
    1fbe:	c7 01       	movw	r24, r14
    1fc0:	b6 01       	movw	r22, r12
    1fc2:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    1fc6:	6b 01       	movw	r12, r22
    +((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3))*y2
    1fc8:	7c 01       	movw	r14, r24
    1fca:	9b 01       	movw	r18, r22
    1fcc:	ac 01       	movw	r20, r24
    1fce:	c5 01       	movw	r24, r10
    1fd0:	b4 01       	movw	r22, r8
    1fd2:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1fd6:	c9 57       	subi	r28, 0x79	; 121
    1fd8:	df 4f       	sbci	r29, 0xFF	; 255
    1fda:	68 83       	st	Y, r22
    1fdc:	79 83       	std	Y+1, r23	; 0x01
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	9b 83       	std	Y+3, r25	; 0x03
    1fe2:	c7 58       	subi	r28, 0x87	; 135
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    1fe4:	d0 40       	sbci	r29, 0x00	; 0
    1fe6:	ed 96       	adiw	r28, 0x3d	; 61
    1fe8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fea:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fec:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fee:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ff0:	ed 97       	sbiw	r28, 0x3d	; 61
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    1ffa:	c3 58       	subi	r28, 0x83	; 131
    1ffc:	df 4f       	sbci	r29, 0xFF	; 255
    1ffe:	28 81       	ld	r18, Y
    2000:	39 81       	ldd	r19, Y+1	; 0x01
    2002:	4a 81       	ldd	r20, Y+2	; 0x02
    2004:	5b 81       	ldd	r21, Y+3	; 0x03
    2006:	cd 57       	subi	r28, 0x7D	; 125
    2008:	d0 40       	sbci	r29, 0x00	; 0
    200a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    200e:	4b 01       	movw	r8, r22
    2010:	5c 01       	movw	r10, r24
    2012:	af 96       	adiw	r28, 0x2f	; 47
    2014:	2c ad       	ldd	r18, Y+60	; 0x3c
    2016:	3d ad       	ldd	r19, Y+61	; 0x3d
    2018:	4e ad       	ldd	r20, Y+62	; 0x3e
    201a:	5f ad       	ldd	r21, Y+63	; 0x3f
    201c:	af 97       	sbiw	r28, 0x2f	; 47
    201e:	ab 96       	adiw	r28, 0x2b	; 43
    2020:	6c ad       	ldd	r22, Y+60	; 0x3c
    2022:	7d ad       	ldd	r23, Y+61	; 0x3d
    2024:	8e ad       	ldd	r24, Y+62	; 0x3e
    2026:	9f ad       	ldd	r25, Y+63	; 0x3f
    2028:	ab 97       	sbiw	r28, 0x2b	; 43
    202a:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    202e:	2b 01       	movw	r4, r22
    2030:	3c 01       	movw	r6, r24
    2032:	e3 96       	adiw	r28, 0x33	; 51
    2034:	2c ad       	ldd	r18, Y+60	; 0x3c
    2036:	3d ad       	ldd	r19, Y+61	; 0x3d
    2038:	4e ad       	ldd	r20, Y+62	; 0x3e
    203a:	5f ad       	ldd	r21, Y+63	; 0x3f
    203c:	e3 97       	sbiw	r28, 0x33	; 51
    203e:	ab 96       	adiw	r28, 0x2b	; 43
    2040:	6c ad       	ldd	r22, Y+60	; 0x3c
    2042:	7d ad       	ldd	r23, Y+61	; 0x3d
    2044:	8e ad       	ldd	r24, Y+62	; 0x3e
    2046:	9f ad       	ldd	r25, Y+63	; 0x3f
    2048:	ab 97       	sbiw	r28, 0x2b	; 43
    204a:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	c3 01       	movw	r24, r6
    2054:	b2 01       	movw	r22, r4
    2056:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    205a:	2b 01       	movw	r4, r22
    205c:	3c 01       	movw	r6, r24
    205e:	e7 96       	adiw	r28, 0x37	; 55
    2060:	2c ad       	ldd	r18, Y+60	; 0x3c
    2062:	3d ad       	ldd	r19, Y+61	; 0x3d
    2064:	4e ad       	ldd	r20, Y+62	; 0x3e
    2066:	5f ad       	ldd	r21, Y+63	; 0x3f
    2068:	e7 97       	sbiw	r28, 0x37	; 55
    206a:	ab 96       	adiw	r28, 0x2b	; 43
    206c:	6c ad       	ldd	r22, Y+60	; 0x3c
    206e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2070:	8e ad       	ldd	r24, Y+62	; 0x3e
    2072:	9f ad       	ldd	r25, Y+63	; 0x3f
    2074:	ab 97       	sbiw	r28, 0x2b	; 43
    2076:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	c3 01       	movw	r24, r6
    2080:	b2 01       	movw	r22, r4
    2082:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	c5 01       	movw	r24, r10
    208c:	b4 01       	movw	r22, r8
    208e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>

    float x0 = conv_wl(j - 2);
    float x1 = conv_wl(j - 1);
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    2092:	cf 57       	subi	r28, 0x7F	; 127
    2094:	df 4f       	sbci	r29, 0xFF	; 255
    2096:	e8 81       	ld	r30, Y
    2098:	f9 81       	ldd	r31, Y+1	; 0x01
    209a:	c1 58       	subi	r28, 0x81	; 129
    209c:	d0 40       	sbci	r29, 0x00	; 0
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e6 55       	subi	r30, 0x56	; 86
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    20a8:	fb 4f       	sbci	r31, 0xFB	; 251
    20aa:	20 81       	ld	r18, Z
    20ac:	31 81       	ldd	r19, Z+1	; 0x01
    20ae:	42 81       	ldd	r20, Z+2	; 0x02
    20b0:	53 81       	ldd	r21, Z+3	; 0x03
    20b2:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    20b6:	4b 01       	movw	r8, r22
    20b8:	5c 01       	movw	r10, r24
    20ba:	a7 01       	movw	r20, r14
    20bc:	96 01       	movw	r18, r12
    20be:	ed 96       	adiw	r28, 0x3d	; 61
    20c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    20c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    20c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20c8:	ed 97       	sbiw	r28, 0x3d	; 61
    20ca:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    20ce:	c3 58       	subi	r28, 0x83	; 131
    20d0:	df 4f       	sbci	r29, 0xFF	; 255
    20d2:	28 81       	ld	r18, Y
    20d4:	39 81       	ldd	r19, Y+1	; 0x01
    20d6:	4a 81       	ldd	r20, Y+2	; 0x02
    20d8:	5b 81       	ldd	r21, Y+3	; 0x03
    20da:	cd 57       	subi	r28, 0x7D	; 125
    20dc:	d0 40       	sbci	r29, 0x00	; 0
    20de:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    20e2:	6b 01       	movw	r12, r22
    20e4:	7c 01       	movw	r14, r24
    20e6:	ab 96       	adiw	r28, 0x2b	; 43
    20e8:	2c ad       	ldd	r18, Y+60	; 0x3c
    20ea:	3d ad       	ldd	r19, Y+61	; 0x3d
    20ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    20ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    20f0:	ab 97       	sbiw	r28, 0x2b	; 43
    20f2:	af 96       	adiw	r28, 0x2f	; 47
    20f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    20f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    20f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    20fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    20fc:	af 97       	sbiw	r28, 0x2f	; 47
    20fe:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    2102:	2b 01       	movw	r4, r22
    2104:	3c 01       	movw	r6, r24
    2106:	e3 96       	adiw	r28, 0x33	; 51
    2108:	2c ad       	ldd	r18, Y+60	; 0x3c
    210a:	3d ad       	ldd	r19, Y+61	; 0x3d
    210c:	4e ad       	ldd	r20, Y+62	; 0x3e
    210e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2110:	e3 97       	sbiw	r28, 0x33	; 51
    2112:	af 96       	adiw	r28, 0x2f	; 47
    2114:	6c ad       	ldd	r22, Y+60	; 0x3c
    2116:	7d ad       	ldd	r23, Y+61	; 0x3d
    2118:	8e ad       	ldd	r24, Y+62	; 0x3e
    211a:	9f ad       	ldd	r25, Y+63	; 0x3f
    211c:	af 97       	sbiw	r28, 0x2f	; 47
    211e:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	c3 01       	movw	r24, r6
    2128:	b2 01       	movw	r22, r4
    212a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    212e:	2b 01       	movw	r4, r22
    2130:	3c 01       	movw	r6, r24
    2132:	e7 96       	adiw	r28, 0x37	; 55
    2134:	2c ad       	ldd	r18, Y+60	; 0x3c
    2136:	3d ad       	ldd	r19, Y+61	; 0x3d
    2138:	4e ad       	ldd	r20, Y+62	; 0x3e
    213a:	5f ad       	ldd	r21, Y+63	; 0x3f
    213c:	e7 97       	sbiw	r28, 0x37	; 55
    213e:	af 96       	adiw	r28, 0x2f	; 47
    2140:	6c ad       	ldd	r22, Y+60	; 0x3c
    2142:	7d ad       	ldd	r23, Y+61	; 0x3d
    2144:	8e ad       	ldd	r24, Y+62	; 0x3e
    2146:	9f ad       	ldd	r25, Y+63	; 0x3f
    2148:	af 97       	sbiw	r28, 0x2f	; 47
    214a:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    214e:	9b 01       	movw	r18, r22
    2150:	ac 01       	movw	r20, r24
    2152:	c3 01       	movw	r24, r6
    2154:	b2 01       	movw	r22, r4
    2156:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    215a:	9b 01       	movw	r18, r22
    215c:	ac 01       	movw	r20, r24
    215e:	c7 01       	movw	r24, r14
    2160:	b6 01       	movw	r22, r12
    2162:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    float x0 = conv_wl(j - 2);
    float x1 = conv_wl(j - 1);
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    2166:	cd 57       	subi	r28, 0x7D	; 125
    2168:	df 4f       	sbci	r29, 0xFF	; 255
    216a:	e8 81       	ld	r30, Y
    216c:	f9 81       	ldd	r31, Y+1	; 0x01
    216e:	c3 58       	subi	r28, 0x83	; 131
    2170:	d0 40       	sbci	r29, 0x00	; 0
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	e6 55       	subi	r30, 0x56	; 86
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    217c:	fb 4f       	sbci	r31, 0xFB	; 251
    217e:	20 81       	ld	r18, Z
    2180:	31 81       	ldd	r19, Z+1	; 0x01
    2182:	42 81       	ldd	r20, Z+2	; 0x02
    2184:	53 81       	ldd	r21, Z+3	; 0x03
    2186:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    218a:	9b 01       	movw	r18, r22
    218c:	ac 01       	movw	r20, r24
    218e:	c5 01       	movw	r24, r10
    2190:	b4 01       	movw	r22, r8
    2192:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    2196:	6b 01       	movw	r12, r22
    2198:	7c 01       	movw	r14, r24
    219a:	c9 57       	subi	r28, 0x79	; 121
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	28 81       	ld	r18, Y
    21a0:	39 81       	ldd	r19, Y+1	; 0x01
    21a2:	4a 81       	ldd	r20, Y+2	; 0x02
    21a4:	5b 81       	ldd	r21, Y+3	; 0x03
    21a6:	c7 58       	subi	r28, 0x87	; 135
    21a8:	d0 40       	sbci	r29, 0x00	; 0
    21aa:	c3 58       	subi	r28, 0x83	; 131
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	68 81       	ld	r22, Y
    21b0:	79 81       	ldd	r23, Y+1	; 0x01
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	cd 57       	subi	r28, 0x7D	; 125
    21b8:	d0 40       	sbci	r29, 0x00	; 0
    21ba:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    21be:	4b 01       	movw	r8, r22
    21c0:	5c 01       	movw	r10, r24
    21c2:	ab 96       	adiw	r28, 0x2b	; 43
    21c4:	2c ad       	ldd	r18, Y+60	; 0x3c
    21c6:	3d ad       	ldd	r19, Y+61	; 0x3d
    21c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    21ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    21cc:	ab 97       	sbiw	r28, 0x2b	; 43
    21ce:	e3 96       	adiw	r28, 0x33	; 51
    21d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    21d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    21d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    21d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    21d8:	e3 97       	sbiw	r28, 0x33	; 51
    21da:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    21de:	2b 01       	movw	r4, r22
    21e0:	3c 01       	movw	r6, r24
    21e2:	af 96       	adiw	r28, 0x2f	; 47
    21e4:	2c ad       	ldd	r18, Y+60	; 0x3c
    21e6:	3d ad       	ldd	r19, Y+61	; 0x3d
    21e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    21ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ec:	af 97       	sbiw	r28, 0x2f	; 47
    21ee:	e3 96       	adiw	r28, 0x33	; 51
    21f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    21f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    21f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f8:	e3 97       	sbiw	r28, 0x33	; 51
    21fa:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    21fe:	9b 01       	movw	r18, r22
    2200:	ac 01       	movw	r20, r24
    2202:	c3 01       	movw	r24, r6
    2204:	b2 01       	movw	r22, r4
    2206:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    220a:	2b 01       	movw	r4, r22
    220c:	3c 01       	movw	r6, r24
    220e:	e7 96       	adiw	r28, 0x37	; 55
    2210:	2c ad       	ldd	r18, Y+60	; 0x3c
    2212:	3d ad       	ldd	r19, Y+61	; 0x3d
    2214:	4e ad       	ldd	r20, Y+62	; 0x3e
    2216:	5f ad       	ldd	r21, Y+63	; 0x3f
    2218:	e7 97       	sbiw	r28, 0x37	; 55
    221a:	e3 96       	adiw	r28, 0x33	; 51
    221c:	6c ad       	ldd	r22, Y+60	; 0x3c
    221e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2220:	8e ad       	ldd	r24, Y+62	; 0x3e
    2222:	9f ad       	ldd	r25, Y+63	; 0x3f
    2224:	e3 97       	sbiw	r28, 0x33	; 51
    2226:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	c3 01       	movw	r24, r6
    2230:	b2 01       	movw	r22, r4
    2232:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    2236:	9b 01       	movw	r18, r22
    2238:	ac 01       	movw	r20, r24
    223a:	c5 01       	movw	r24, r10
    223c:	b4 01       	movw	r22, r8
    223e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    float x1 = conv_wl(j - 1);
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    2242:	00 0f       	add	r16, r16
    2244:	11 1f       	adc	r17, r17
    2246:	00 0f       	add	r16, r16
    2248:	11 1f       	adc	r17, r17
    224a:	f8 01       	movw	r30, r16
    224c:	e6 55       	subi	r30, 0x56	; 86
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    224e:	fb 4f       	sbci	r31, 0xFB	; 251
    2250:	20 81       	ld	r18, Z
    2252:	31 81       	ldd	r19, Z+1	; 0x01
    2254:	42 81       	ldd	r20, Z+2	; 0x02
    2256:	53 81       	ldd	r21, Z+3	; 0x03
    2258:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    225c:	9b 01       	movw	r18, r22
    225e:	ac 01       	movw	r20, r24
    2260:	c7 01       	movw	r24, r14
    2262:	b6 01       	movw	r22, r12
    2264:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    2268:	6b 01       	movw	r12, r22
    226a:	7c 01       	movw	r14, r24
    226c:	c9 57       	subi	r28, 0x79	; 121
    226e:	df 4f       	sbci	r29, 0xFF	; 255
    2270:	28 81       	ld	r18, Y
    2272:	39 81       	ldd	r19, Y+1	; 0x01
    2274:	4a 81       	ldd	r20, Y+2	; 0x02
    2276:	5b 81       	ldd	r21, Y+3	; 0x03
    2278:	c7 58       	subi	r28, 0x87	; 135
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	ed 96       	adiw	r28, 0x3d	; 61
    227e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2280:	7d ad       	ldd	r23, Y+61	; 0x3d
    2282:	8e ad       	ldd	r24, Y+62	; 0x3e
    2284:	9f ad       	ldd	r25, Y+63	; 0x3f
    2286:	ed 97       	sbiw	r28, 0x3d	; 61
    2288:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    228c:	4b 01       	movw	r8, r22
    228e:	5c 01       	movw	r10, r24
    2290:	ab 96       	adiw	r28, 0x2b	; 43
    2292:	2c ad       	ldd	r18, Y+60	; 0x3c
    2294:	3d ad       	ldd	r19, Y+61	; 0x3d
    2296:	4e ad       	ldd	r20, Y+62	; 0x3e
    2298:	5f ad       	ldd	r21, Y+63	; 0x3f
    229a:	ab 97       	sbiw	r28, 0x2b	; 43
    229c:	e7 96       	adiw	r28, 0x37	; 55
    229e:	6c ad       	ldd	r22, Y+60	; 0x3c
    22a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    22a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    22a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    22a6:	e7 97       	sbiw	r28, 0x37	; 55
    22a8:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    22ac:	2b 01       	movw	r4, r22
    22ae:	3c 01       	movw	r6, r24
    22b0:	af 96       	adiw	r28, 0x2f	; 47
    22b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    22b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    22b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    22b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    22ba:	af 97       	sbiw	r28, 0x2f	; 47
    22bc:	e7 96       	adiw	r28, 0x37	; 55
    22be:	6c ad       	ldd	r22, Y+60	; 0x3c
    22c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    22c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    22c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    22c6:	e7 97       	sbiw	r28, 0x37	; 55
    22c8:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    22cc:	9b 01       	movw	r18, r22
    22ce:	ac 01       	movw	r20, r24
    22d0:	c3 01       	movw	r24, r6
    22d2:	b2 01       	movw	r22, r4
    22d4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    22d8:	2b 01       	movw	r4, r22
    22da:	3c 01       	movw	r6, r24
    22dc:	e3 96       	adiw	r28, 0x33	; 51
    22de:	2c ad       	ldd	r18, Y+60	; 0x3c
    22e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    22e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    22e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    22e6:	e3 97       	sbiw	r28, 0x33	; 51
    22e8:	e7 96       	adiw	r28, 0x37	; 55
    22ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    22ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    22ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    22f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    22f2:	e7 97       	sbiw	r28, 0x37	; 55
    22f4:	0e 94 0e 1b 	call	0x361c	; 0x361c <__subsf3>
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	c3 01       	movw	r24, r6
    22fe:	b2 01       	movw	r22, r4
    2300:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    2304:	9b 01       	movw	r18, r22
    2306:	ac 01       	movw	r20, r24
    2308:	c5 01       	movw	r24, r10
    230a:	b4 01       	movw	r22, r8
    230c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__divsf3>
    float x2 = conv_wl(j);
    float x3 = conv_wl(j + 1);
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];
    2310:	cb 57       	subi	r28, 0x7B	; 123
    2312:	df 4f       	sbci	r29, 0xFF	; 255
    2314:	e8 81       	ld	r30, Y
    2316:	f9 81       	ldd	r31, Y+1	; 0x01
    2318:	c5 58       	subi	r28, 0x85	; 133
    231a:	d0 40       	sbci	r29, 0x00	; 0
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	e6 55       	subi	r30, 0x56	; 86

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    2326:	fb 4f       	sbci	r31, 0xFB	; 251
    2328:	20 81       	ld	r18, Z
    232a:	31 81       	ldd	r19, Z+1	; 0x01
    232c:	42 81       	ldd	r20, Z+2	; 0x02
    232e:	53 81       	ldd	r21, Z+3	; 0x03
    2330:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <__mulsf3>
    2334:	9b 01       	movw	r18, r22
    2336:	ac 01       	movw	r20, r24
    2338:	c7 01       	movw	r24, r14
    233a:	b6 01       	movw	r22, r12
    233c:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3>
    2340:	16 2f       	mov	r17, r22
    2342:	07 2f       	mov	r16, r23
    2344:	f8 2e       	mov	r15, r24
    +((x-x0)*(x-x2)*(x-x3))/((x1-x0)*(x1-x2)*(x1-x3))*y1
    +((x-x0)*(x-x1)*(x-x3))/((x2-x0)*(x2-x1)*(x2-x3))*y2
    +((x-x0)*(x-x1)*(x-x2))/((x3-x0)*(x3-x1)*(x3-x2))*y3;

    if(y < 0)
    2346:	e9 2e       	mov	r14, r25
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	a9 01       	movw	r20, r18
    234e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__cmpsf2>
    2352:	87 ff       	sbrs	r24, 7
    {
        y = 0;
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <CDC_Recive_Event_Process+0x604>
    2356:	d1 2c       	mov	r13, r1
    2358:	c1 2c       	mov	r12, r1
    235a:	f1 2c       	mov	r15, r1
    235c:	e1 2c       	mov	r14, r1
    float y0 = opticalPower[j - 2];
    float y1 = opticalPower[j - 1];
    float y2 = opticalPower[j];
    float y3 = opticalPower[j + 1];

    float y = ((x-x1)*(x-x2)*(x-x3))/((x0-x1)*(x0-x2)*(x0-x3))*y0
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <CDC_Recive_Event_Process+0x606>
    2360:	68 01       	movw	r12, r16
    2362:	81 01       	movw	r16, r2
    2364:	0e 5f       	subi	r16, 0xFE	; 254
                    // if (op < 0.0f)
                    // {
                    //     op = 0.0f;
                    // }
                    float op = lagrange(i);
                    float wl = wl_1nm[i];
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	f1 01       	movw	r30, r2
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	07 2e       	mov	r0, r23
    2370:	00 0c       	add	r0, r0
    2372:	88 0b       	sbc	r24, r24
    2374:	99 0b       	sbc	r25, r25
    2376:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
                    char msg[32] = {0};
    237a:	a7 96       	adiw	r28, 0x27	; 39
    237c:	ae ad       	ldd	r26, Y+62	; 0x3e
    237e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2380:	a7 97       	sbiw	r28, 0x27	; 39
    2382:	e0 e2       	ldi	r30, 0x20	; 32
    2384:	1d 92       	st	X+, r1
    2386:	ea 95       	dec	r30
                    sprintf(msg, "%d:%g\r", wl, op);
    2388:	e9 f7       	brne	.-6      	; 0x2384 <CDC_Recive_Event_Process+0x628>
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	9f 93       	push	r25
    2394:	8f 93       	push	r24
    2396:	7f 93       	push	r23
    2398:	6f 93       	push	r22
    239a:	83 e7       	ldi	r24, 0x73	; 115
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	9f 93       	push	r25
    23a0:	8f 93       	push	r24
    23a2:	e1 e0       	ldi	r30, 0x01	; 1
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	ec 0f       	add	r30, r28
    23a8:	fd 1f       	adc	r31, r29
    23aa:	ff 93       	push	r31
    23ac:	ef 93       	push	r30
                    CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    23ae:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <sprintf>
    23b2:	be 01       	movw	r22, r28
    23b4:	6f 5f       	subi	r22, 0xFF	; 255
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	8d d7       	rcall	.+3866   	; 0x32d8 <CDC_Device_SendString>
    23be:	e9 96       	adiw	r28, 0x39	; 57
    23c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    23c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    23c4:	e9 97       	sbiw	r28, 0x39	; 57
    23c6:	02 96       	adiw	r24, 0x02	; 2
    23c8:	e9 96       	adiw	r28, 0x39	; 57
    23ca:	9f af       	std	Y+63, r25	; 0x3f
    23cc:	8e af       	std	Y+62, r24	; 0x3e
    23ce:	e9 97       	sbiw	r28, 0x39	; 57
            correct();
#ifdef CP150
            for (int i = 0; i < 471; i++)
#endif
#ifdef CP160
                for (int i = 0; i < 491; i++)
    23d0:	18 01       	movw	r2, r16
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	0a 56       	subi	r16, 0x6A	; 106
    23de:	1e 40       	sbci	r17, 0x0E	; 14
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <CDC_Recive_Event_Process+0x688>
                    CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
                    wl += 1;
                }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else if (strncmp(message, "RAW", 3) == 0)
    23e2:	67 cd       	rjmp	.-1330   	; 0x1eb2 <CDC_Recive_Event_Process+0x156>
    23e4:	43 cd       	rjmp	.-1402   	; 0x1e6c <CDC_Recive_Event_Process+0x110>
    23e6:	43 e0       	ldi	r20, 0x03	; 3
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	6a e7       	ldi	r22, 0x7A	; 122
    23ec:	71 e0       	ldi	r23, 0x01	; 1
    23ee:	8c e2       	ldi	r24, 0x2C	; 44
    23f0:	99 e0       	ldi	r25, 0x09	; 9
    23f2:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {
            measure();
    23f6:	89 2b       	or	r24, r25
    23f8:	99 f5       	brne	.+102    	; 0x2460 <CDC_Recive_Event_Process+0x704>
    23fa:	ec d8       	rcall	.-3624   	; 0x15d4 <measure>
    23fc:	0a ea       	ldi	r16, 0xAA	; 170
    23fe:	14 e0       	ldi	r17, 0x04	; 4
    2400:	8a e2       	ldi	r24, 0x2A	; 42
    2402:	a8 2e       	mov	r10, r24

            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
                char msg[16] = {0};
    2404:	89 e0       	ldi	r24, 0x09	; 9
    2406:	b8 2e       	mov	r11, r24
    2408:	90 e1       	ldi	r25, 0x10	; 16
    240a:	99 2e       	mov	r9, r25
    240c:	fe 01       	movw	r30, r28
                sprintf(msg, "%d\r", (int)opticalPower[i]);
    240e:	31 96       	adiw	r30, 0x01	; 1
    2410:	7f 01       	movw	r14, r30
    2412:	2e e7       	ldi	r18, 0x7E	; 126
    2414:	c2 2e       	mov	r12, r18
        {
            measure();

            for (int i = 0; i < C12880MA_CHANELS; i++)
            {
                char msg[16] = {0};
    2416:	21 e0       	ldi	r18, 0x01	; 1
    2418:	d2 2e       	mov	r13, r18
    241a:	d7 01       	movw	r26, r14
    241c:	e9 2d       	mov	r30, r9
    241e:	1d 92       	st	X+, r1
                sprintf(msg, "%d\r", (int)opticalPower[i]);
    2420:	ea 95       	dec	r30
    2422:	e9 f7       	brne	.-6      	; 0x241e <CDC_Recive_Event_Process+0x6c2>
    2424:	d8 01       	movw	r26, r16
    2426:	6d 91       	ld	r22, X+
    2428:	7d 91       	ld	r23, X+
    242a:	8d 91       	ld	r24, X+
    242c:	9d 91       	ld	r25, X+
    242e:	8d 01       	movw	r16, r26
    2430:	0e 94 df 1b 	call	0x37be	; 0x37be <__fixsfsi>
    2434:	7f 93       	push	r23
    2436:	6f 93       	push	r22
    2438:	df 92       	push	r13
    243a:	cf 92       	push	r12
    243c:	ff 92       	push	r15
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    243e:	ef 92       	push	r14
    2440:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <sprintf>
    2444:	b7 01       	movw	r22, r14
    2446:	80 e0       	ldi	r24, 0x00	; 0
        }
        else if (strncmp(message, "RAW", 3) == 0)
        {
            measure();

            for (int i = 0; i < C12880MA_CHANELS; i++)
    2448:	91 e0       	ldi	r25, 0x01	; 1
    244a:	46 d7       	rcall	.+3724   	; 0x32d8 <CDC_Device_SendString>
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	a0 16       	cp	r10, r16
                sprintf(msg, "%d\r", (int)opticalPower[i]);
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
            }
            CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        }
        else if (strncmp(message, "DARK", 4) == 0)
    245a:	b1 06       	cpc	r11, r17
    245c:	f1 f6       	brne	.-68     	; 0x241a <CDC_Recive_Event_Process+0x6be>
    245e:	06 cd       	rjmp	.-1524   	; 0x1e6c <CDC_Recive_Event_Process+0x110>
    2460:	44 e0       	ldi	r20, 0x04	; 4
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	62 e8       	ldi	r22, 0x82	; 130
    2466:	71 e0       	ldi	r23, 0x01	; 1
    2468:	8c e2       	ldi	r24, 0x2C	; 44
    246a:	99 e0       	ldi	r25, 0x09	; 9
    246c:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {
            dark();
    2470:	89 2b       	or	r24, r25
    2472:	11 f4       	brne	.+4      	; 0x2478 <CDC_Recive_Event_Process+0x71c>
        //         sprintf(msg, "%g\r", pgm_read_float(&spectralsensitivitycoeff[i]));
        //         CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
        //     }
        //     CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
        // }
        else if (strncmp(message, "MODEL?", 6) == 0)
    2474:	4e d9       	rcall	.-3428   	; 0x1712 <dark>
    2476:	c4 c1       	rjmp	.+904    	; 0x2800 <CDC_Recive_Event_Process+0xaa4>
    2478:	46 e0       	ldi	r20, 0x06	; 6
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	6c e8       	ldi	r22, 0x8C	; 140
    247e:	71 e0       	ldi	r23, 0x01	; 1
    2480:	8c e2       	ldi	r24, 0x2C	; 44
    2482:	99 e0       	ldi	r25, 0x09	; 9
    2484:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {

            char msg[32] = {0};
    2488:	89 2b       	or	r24, r25
    248a:	89 f4       	brne	.+34     	; 0x24ae <CDC_Recive_Event_Process+0x752>
    248c:	8e 01       	movw	r16, r28
    248e:	0f 5f       	subi	r16, 0xFF	; 255
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	80 e2       	ldi	r24, 0x20	; 32
    2494:	f8 01       	movw	r30, r16
    2496:	11 92       	st	Z+, r1
            sprintf(msg, "MODEL/%s\n", (char*)pgm_read_word(&model[0]));
    2498:	8a 95       	dec	r24
    249a:	e9 f7       	brne	.-6      	; 0x2496 <CDC_Recive_Event_Process+0x73a>
    249c:	ee e8       	ldi	r30, 0x8E	; 142
    249e:	fa e0       	ldi	r31, 0x0A	; 10
    24a0:	85 91       	lpm	r24, Z+
    24a2:	94 91       	lpm	r25, Z
    24a4:	9f 93       	push	r25
    24a6:	8f 93       	push	r24
    24a8:	83 e9       	ldi	r24, 0x93	; 147
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
        }
        else if (strncmp(message, "NAME?", 5) == 0)
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	35 c0       	rjmp	.+106    	; 0x2518 <CDC_Recive_Event_Process+0x7bc>
    24ae:	45 e0       	ldi	r20, 0x05	; 5
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	6d e9       	ldi	r22, 0x9D	; 157
    24b4:	71 e0       	ldi	r23, 0x01	; 1
    24b6:	8c e2       	ldi	r24, 0x2C	; 44
    24b8:	99 e0       	ldi	r25, 0x09	; 9
    24ba:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {

            char msg[32] = {0};
    24be:	89 2b       	or	r24, r25
    24c0:	89 f4       	brne	.+34     	; 0x24e4 <CDC_Recive_Event_Process+0x788>
    24c2:	8e 01       	movw	r16, r28
    24c4:	0f 5f       	subi	r16, 0xFF	; 255
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	80 e2       	ldi	r24, 0x20	; 32
    24ca:	d8 01       	movw	r26, r16
    24cc:	1d 92       	st	X+, r1
            sprintf(msg, "NAME/%s\n", (char*)pgm_read_word(&name[0]));
    24ce:	8a 95       	dec	r24
    24d0:	e9 f7       	brne	.-6      	; 0x24cc <CDC_Recive_Event_Process+0x770>
    24d2:	e4 e8       	ldi	r30, 0x84	; 132
    24d4:	fa e0       	ldi	r31, 0x0A	; 10
    24d6:	85 91       	lpm	r24, Z+
    24d8:	94 91       	lpm	r25, Z
    24da:	9f 93       	push	r25
    24dc:	8f 93       	push	r24
    24de:	83 ea       	ldi	r24, 0xA3	; 163
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
        }
        else if (strncmp(message, "SN?", 3) == 0)
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	1a c0       	rjmp	.+52     	; 0x2518 <CDC_Recive_Event_Process+0x7bc>
    24e4:	43 e0       	ldi	r20, 0x03	; 3
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	6c ea       	ldi	r22, 0xAC	; 172
    24ea:	71 e0       	ldi	r23, 0x01	; 1
    24ec:	8c e2       	ldi	r24, 0x2C	; 44
    24ee:	99 e0       	ldi	r25, 0x09	; 9
    24f0:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {

            char msg[32] = {0};
    24f4:	89 2b       	or	r24, r25
    24f6:	09 f5       	brne	.+66     	; 0x253a <CDC_Recive_Event_Process+0x7de>
    24f8:	8e 01       	movw	r16, r28
    24fa:	0f 5f       	subi	r16, 0xFF	; 255
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	80 e2       	ldi	r24, 0x20	; 32
    2500:	f8 01       	movw	r30, r16
    2502:	11 92       	st	Z+, r1
            sprintf(msg, "SN/%s\n", (char*)pgm_read_word(&serialnumber[0]));
    2504:	8a 95       	dec	r24
    2506:	e9 f7       	brne	.-6      	; 0x2502 <CDC_Recive_Event_Process+0x7a6>
    2508:	e6 e7       	ldi	r30, 0x76	; 118
    250a:	fa e0       	ldi	r31, 0x0A	; 10
    250c:	85 91       	lpm	r24, Z+
    250e:	94 91       	lpm	r25, Z
    2510:	9f 93       	push	r25
    2512:	8f 93       	push	r24
    2514:	80 eb       	ldi	r24, 0xB0	; 176
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	9f 93       	push	r25
    251a:	8f 93       	push	r24
    251c:	1f 93       	push	r17
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    251e:	0f 93       	push	r16
    2520:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <sprintf>
    2524:	b8 01       	movw	r22, r16
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	d6 d6       	rcall	.+3500   	; 0x32d8 <CDC_Device_SendString>
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
        }
        else if (strncmp(message, "WCCF", 3) == 0)
    2536:	0f 90       	pop	r0
    2538:	6b c1       	rjmp	.+726    	; 0x2810 <CDC_Recive_Event_Process+0xab4>
    253a:	43 e0       	ldi	r20, 0x03	; 3
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	67 eb       	ldi	r22, 0xB7	; 183
    2540:	71 e0       	ldi	r23, 0x01	; 1
    2542:	8c e2       	ldi	r24, 0x2C	; 44
    2544:	99 e0       	ldi	r25, 0x09	; 9
    2546:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
    254a:	89 2b       	or	r24, r25
        {

            char msg[100] = {0};
    254c:	09 f0       	breq	.+2      	; 0x2550 <CDC_Recive_Event_Process+0x7f4>
    254e:	4e c0       	rjmp	.+156    	; 0x25ec <CDC_Recive_Event_Process+0x890>
    2550:	ce 01       	movw	r24, r28
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	1c 01       	movw	r2, r24
    2556:	84 e6       	ldi	r24, 0x64	; 100
    2558:	d1 01       	movw	r26, r2
    255a:	1d 92       	st	X+, r1
            sprintf(msg, "WCCF/%g:%g:%g:%g:%g:%g\n", pgm_read_float(&wccoeff[0]), pgm_read_float(&wccoeff[1]), pgm_read_float(&wccoeff[2]), pgm_read_float(&wccoeff[3]), pgm_read_float(&wccoeff[4]), pgm_read_float(&wccoeff[5]));
    255c:	8a 95       	dec	r24
    255e:	e9 f7       	brne	.-6      	; 0x255a <CDC_Recive_Event_Process+0x7fe>
    2560:	e2 e7       	ldi	r30, 0x72	; 114
    2562:	fa e0       	ldi	r31, 0x0A	; 10
    2564:	05 91       	lpm	r16, Z+
    2566:	15 91       	lpm	r17, Z+
    2568:	25 91       	lpm	r18, Z+
    256a:	34 91       	lpm	r19, Z
    256c:	ee e6       	ldi	r30, 0x6E	; 110
    256e:	fa e0       	ldi	r31, 0x0A	; 10
    2570:	45 90       	lpm	r4, Z+
    2572:	55 90       	lpm	r5, Z+
    2574:	65 90       	lpm	r6, Z+
    2576:	74 90       	lpm	r7, Z
    2578:	ea e6       	ldi	r30, 0x6A	; 106
    257a:	fa e0       	ldi	r31, 0x0A	; 10
    257c:	85 90       	lpm	r8, Z+
    257e:	95 90       	lpm	r9, Z+
    2580:	a5 90       	lpm	r10, Z+
    2582:	b4 90       	lpm	r11, Z
    2584:	e6 e6       	ldi	r30, 0x66	; 102
    2586:	fa e0       	ldi	r31, 0x0A	; 10
    2588:	c5 90       	lpm	r12, Z+
    258a:	d5 90       	lpm	r13, Z+
    258c:	e5 90       	lpm	r14, Z+
    258e:	f4 90       	lpm	r15, Z
    2590:	e2 e6       	ldi	r30, 0x62	; 98
    2592:	fa e0       	ldi	r31, 0x0A	; 10
    2594:	45 91       	lpm	r20, Z+
    2596:	55 91       	lpm	r21, Z+
    2598:	65 91       	lpm	r22, Z+
    259a:	74 91       	lpm	r23, Z
    259c:	ee e5       	ldi	r30, 0x5E	; 94
    259e:	fa e0       	ldi	r31, 0x0A	; 10
    25a0:	85 91       	lpm	r24, Z+
    25a2:	95 91       	lpm	r25, Z+
    25a4:	a5 91       	lpm	r26, Z+
    25a6:	b4 91       	lpm	r27, Z
    25a8:	3f 93       	push	r19
    25aa:	2f 93       	push	r18
    25ac:	1f 93       	push	r17
    25ae:	0f 93       	push	r16
    25b0:	7f 92       	push	r7
    25b2:	6f 92       	push	r6
    25b4:	5f 92       	push	r5
    25b6:	4f 92       	push	r4
    25b8:	bf 92       	push	r11
    25ba:	af 92       	push	r10
    25bc:	9f 92       	push	r9
    25be:	8f 92       	push	r8
    25c0:	ff 92       	push	r15
    25c2:	ef 92       	push	r14
    25c4:	df 92       	push	r13
    25c6:	cf 92       	push	r12
    25c8:	7f 93       	push	r23
    25ca:	6f 93       	push	r22
    25cc:	5f 93       	push	r21
    25ce:	4f 93       	push	r20
    25d0:	bf 93       	push	r27
    25d2:	af 93       	push	r26
    25d4:	9f 93       	push	r25
    25d6:	8f 93       	push	r24
    25d8:	8c eb       	ldi	r24, 0xBC	; 188
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	3f 92       	push	r3
    25e2:	2f 92       	push	r2
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    25e4:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <sprintf>
        }
        else if (strncmp(message, "ST?", 3) == 0)
    25e8:	b1 01       	movw	r22, r2
    25ea:	36 c0       	rjmp	.+108    	; 0x2658 <CDC_Recive_Event_Process+0x8fc>
    25ec:	43 e0       	ldi	r20, 0x03	; 3
    25ee:	50 e0       	ldi	r21, 0x00	; 0
    25f0:	64 ed       	ldi	r22, 0xD4	; 212
    25f2:	71 e0       	ldi	r23, 0x01	; 1
    25f4:	8c e2       	ldi	r24, 0x2C	; 44
    25f6:	99 e0       	ldi	r25, 0x09	; 9
    25f8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
        {

            int msg[32] = {0};
    25fc:	89 2b       	or	r24, r25
    25fe:	a9 f5       	brne	.+106    	; 0x266a <CDC_Recive_Event_Process+0x90e>
    2600:	8e 01       	movw	r16, r28
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	80 e4       	ldi	r24, 0x40	; 64
    2608:	d8 01       	movw	r26, r16
    260a:	1d 92       	st	X+, r1
            char st = status == STATUS_RUN ? 'R' : status == STATUS_WARN ? 'W'
    260c:	8a 95       	dec	r24
    260e:	e9 f7       	brne	.-6      	; 0x260a <CDC_Recive_Event_Process+0x8ae>
    2610:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <status>
    2614:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <status+0x1>
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	21 f0       	breq	.+8      	; 0x2624 <CDC_Recive_Event_Process+0x8c8>
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	21 f0       	breq	.+8      	; 0x2628 <CDC_Recive_Event_Process+0x8cc>
    2620:	85 e4       	ldi	r24, 0x45	; 69
    2622:	03 c0       	rjmp	.+6      	; 0x262a <CDC_Recive_Event_Process+0x8ce>
    2624:	82 e5       	ldi	r24, 0x52	; 82
                                                                         : 'E';
            sprintf(msg, "ST/%c:%.3f\n", st, temperature);
    2626:	01 c0       	rjmp	.+2      	; 0x262a <CDC_Recive_Event_Process+0x8ce>
    2628:	87 e5       	ldi	r24, 0x57	; 87
    262a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <temperature+0x3>
    262e:	9f 93       	push	r25
    2630:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temperature+0x2>
    2634:	9f 93       	push	r25
    2636:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <temperature+0x1>
    263a:	9f 93       	push	r25
    263c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <temperature>
    2640:	9f 93       	push	r25
    2642:	1f 92       	push	r1
    2644:	8f 93       	push	r24
    2646:	88 ed       	ldi	r24, 0xD8	; 216
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	9f 93       	push	r25
    264c:	8f 93       	push	r24
    264e:	1f 93       	push	r17
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, msg);
    2650:	0f 93       	push	r16
    2652:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <sprintf>
    2656:	b8 01       	movw	r22, r16
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	3d d6       	rcall	.+3194   	; 0x32d8 <CDC_Device_SendString>
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
        }
        else if (strncmp(message, "EXP/", 4) == 0)
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	d3 c0       	rjmp	.+422    	; 0x2810 <CDC_Recive_Event_Process+0xab4>
    266a:	44 e0       	ldi	r20, 0x04	; 4
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	64 ee       	ldi	r22, 0xE4	; 228
    2670:	71 e0       	ldi	r23, 0x01	; 1
    2672:	8c e2       	ldi	r24, 0x2C	; 44
    2674:	99 e0       	ldi	r25, 0x09	; 9
    2676:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
    267a:	89 2b       	or	r24, r25
        {
            if (strncmp(message, "EXP/AUTO", 8) == 0)
    267c:	09 f0       	breq	.+2      	; 0x2680 <CDC_Recive_Event_Process+0x924>
    267e:	c3 c0       	rjmp	.+390    	; 0x2806 <CDC_Recive_Event_Process+0xaaa>
    2680:	48 e0       	ldi	r20, 0x08	; 8
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	69 ee       	ldi	r22, 0xE9	; 233
    2686:	71 e0       	ldi	r23, 0x01	; 1
    2688:	8c e2       	ldi	r24, 0x2C	; 44
    268a:	99 e0       	ldi	r25, 0x09	; 9
    268c:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 1;
    2690:	89 2b       	or	r24, r25
    2692:	39 f4       	brne	.+14     	; 0x26a2 <CDC_Recive_Event_Process+0x946>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <auto_exposure+0x1>
    269c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <auto_exposure>
            }
            else if (strncmp(message, "EXP/100us", 9) == 0)
    26a0:	af c0       	rjmp	.+350    	; 0x2800 <CDC_Recive_Event_Process+0xaa4>
    26a2:	49 e0       	ldi	r20, 0x09	; 9
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	62 ef       	ldi	r22, 0xF2	; 242
    26a8:	71 e0       	ldi	r23, 0x01	; 1
    26aa:	8c e2       	ldi	r24, 0x2C	; 44
    26ac:	99 e0       	ldi	r25, 0x09	; 9
    26ae:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    26b2:	89 2b       	or	r24, r25
    26b4:	49 f4       	brne	.+18     	; 0x26c8 <CDC_Recive_Event_Process+0x96c>
    26b6:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_100us;
    26ba:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    26be:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <exposure_time_sel+0x1>
    26c2:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <exposure_time_sel>
            }
            else if (strncmp(message, "EXP/200us", 9) == 0)
    26c6:	9c c0       	rjmp	.+312    	; 0x2800 <CDC_Recive_Event_Process+0xaa4>
    26c8:	49 e0       	ldi	r20, 0x09	; 9
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	6c ef       	ldi	r22, 0xFC	; 252
    26ce:	71 e0       	ldi	r23, 0x01	; 1
    26d0:	8c e2       	ldi	r24, 0x2C	; 44
    26d2:	99 e0       	ldi	r25, 0x09	; 9
    26d4:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    26d8:	89 2b       	or	r24, r25
    26da:	39 f4       	brne	.+14     	; 0x26ea <CDC_Recive_Event_Process+0x98e>
    26dc:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_200us;
    26e0:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    26e4:	81 e0       	ldi	r24, 0x01	; 1
            }
            else if (strncmp(message, "EXP/500us", 9) == 0)
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	87 c0       	rjmp	.+270    	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    26ea:	49 e0       	ldi	r20, 0x09	; 9
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	66 e0       	ldi	r22, 0x06	; 6
    26f0:	72 e0       	ldi	r23, 0x02	; 2
    26f2:	8c e2       	ldi	r24, 0x2C	; 44
    26f4:	99 e0       	ldi	r25, 0x09	; 9
    26f6:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    26fa:	89 2b       	or	r24, r25
    26fc:	39 f4       	brne	.+14     	; 0x270c <CDC_Recive_Event_Process+0x9b0>
    26fe:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_500us;
    2702:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    2706:	82 e0       	ldi	r24, 0x02	; 2
            }
            else if (strncmp(message, "EXP/1ms", 7) == 0)
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	76 c0       	rjmp	.+236    	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    270c:	47 e0       	ldi	r20, 0x07	; 7
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	60 e1       	ldi	r22, 0x10	; 16
    2712:	72 e0       	ldi	r23, 0x02	; 2
    2714:	8c e2       	ldi	r24, 0x2C	; 44
    2716:	99 e0       	ldi	r25, 0x09	; 9
    2718:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    271c:	89 2b       	or	r24, r25
    271e:	39 f4       	brne	.+14     	; 0x272e <CDC_Recive_Event_Process+0x9d2>
    2720:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_1ms;
    2724:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    2728:	83 e0       	ldi	r24, 0x03	; 3
            }
            else if (strncmp(message, "EXP/2ms", 7) == 0)
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	65 c0       	rjmp	.+202    	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    272e:	47 e0       	ldi	r20, 0x07	; 7
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	68 e1       	ldi	r22, 0x18	; 24
    2734:	72 e0       	ldi	r23, 0x02	; 2
    2736:	8c e2       	ldi	r24, 0x2C	; 44
    2738:	99 e0       	ldi	r25, 0x09	; 9
    273a:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    273e:	89 2b       	or	r24, r25
    2740:	39 f4       	brne	.+14     	; 0x2750 <CDC_Recive_Event_Process+0x9f4>
    2742:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_2ms;
    2746:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    274a:	84 e0       	ldi	r24, 0x04	; 4
            }
            else if (strncmp(message, "EXP/5ms", 7) == 0)
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	54 c0       	rjmp	.+168    	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    2750:	47 e0       	ldi	r20, 0x07	; 7
    2752:	50 e0       	ldi	r21, 0x00	; 0
    2754:	60 e2       	ldi	r22, 0x20	; 32
    2756:	72 e0       	ldi	r23, 0x02	; 2
    2758:	8c e2       	ldi	r24, 0x2C	; 44
    275a:	99 e0       	ldi	r25, 0x09	; 9
    275c:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    2760:	89 2b       	or	r24, r25
    2762:	39 f4       	brne	.+14     	; 0x2772 <CDC_Recive_Event_Process+0xa16>
    2764:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_5ms;
    2768:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    276c:	85 e0       	ldi	r24, 0x05	; 5
            }
            else if (strncmp(message, "EXP/10ms", 8) == 0)
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	43 c0       	rjmp	.+134    	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    2772:	48 e0       	ldi	r20, 0x08	; 8
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	68 e2       	ldi	r22, 0x28	; 40
    2778:	72 e0       	ldi	r23, 0x02	; 2
    277a:	8c e2       	ldi	r24, 0x2C	; 44
    277c:	99 e0       	ldi	r25, 0x09	; 9
    277e:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    2782:	89 2b       	or	r24, r25
    2784:	39 f4       	brne	.+14     	; 0x2794 <CDC_Recive_Event_Process+0xa38>
    2786:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_10ms;
    278a:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    278e:	86 e0       	ldi	r24, 0x06	; 6
            }
            else if (strncmp(message, "EXP/20ms", 8) == 0)
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	32 c0       	rjmp	.+100    	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    2794:	48 e0       	ldi	r20, 0x08	; 8
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	61 e3       	ldi	r22, 0x31	; 49
    279a:	72 e0       	ldi	r23, 0x02	; 2
    279c:	8c e2       	ldi	r24, 0x2C	; 44
    279e:	99 e0       	ldi	r25, 0x09	; 9
    27a0:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    27a4:	89 2b       	or	r24, r25
    27a6:	39 f4       	brne	.+14     	; 0x27b6 <CDC_Recive_Event_Process+0xa5a>
    27a8:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_20ms;
    27ac:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    27b0:	87 e0       	ldi	r24, 0x07	; 7
            }
            else if (strncmp(message, "EXP/50ms", 8) == 0)
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	21 c0       	rjmp	.+66     	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    27b6:	48 e0       	ldi	r20, 0x08	; 8
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	6a e3       	ldi	r22, 0x3A	; 58
    27bc:	72 e0       	ldi	r23, 0x02	; 2
    27be:	8c e2       	ldi	r24, 0x2C	; 44
    27c0:	99 e0       	ldi	r25, 0x09	; 9
    27c2:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    27c6:	89 2b       	or	r24, r25
    27c8:	39 f4       	brne	.+14     	; 0x27d8 <CDC_Recive_Event_Process+0xa7c>
    27ca:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_50ms;
    27ce:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    27d2:	88 e0       	ldi	r24, 0x08	; 8
            }
            else if (strncmp(message, "EXP/100ms", 9) == 0)
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	10 c0       	rjmp	.+32     	; 0x27f8 <CDC_Recive_Event_Process+0xa9c>
    27d8:	49 e0       	ldi	r20, 0x09	; 9
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	63 e4       	ldi	r22, 0x43	; 67
    27de:	72 e0       	ldi	r23, 0x02	; 2
    27e0:	8c e2       	ldi	r24, 0x2C	; 44
    27e2:	99 e0       	ldi	r25, 0x09	; 9
    27e4:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strncmp>
            {
                auto_exposure = 0;
    27e8:	89 2b       	or	r24, r25
    27ea:	51 f4       	brne	.+20     	; 0x2800 <CDC_Recive_Event_Process+0xaa4>
    27ec:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <auto_exposure+0x1>
                exposure_time_sel = EXPOSURE_TIME_SEL_100ms;
    27f0:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <auto_exposure>
    27f4:	89 e0       	ldi	r24, 0x09	; 9
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <exposure_time_sel+0x1>
            }
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "ACK\n");
    27fc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <exposure_time_sel>
        }
        else
        {
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "NAK\n");
    2800:	67 e8       	ldi	r22, 0x87	; 135
    2802:	71 e0       	ldi	r23, 0x01	; 1
    2804:	02 c0       	rjmp	.+4      	; 0x280a <CDC_Recive_Event_Process+0xaae>
    2806:	6d e4       	ldi	r22, 0x4D	; 77
    2808:	72 e0       	ldi	r23, 0x02	; 2
    280a:	80 e0       	ldi	r24, 0x00	; 0
        }
        memset(cdc_recive_buffer, 0, 32);
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	64 d5       	rcall	.+2760   	; 0x32d8 <CDC_Device_SendString>
    2810:	80 e2       	ldi	r24, 0x20	; 32
    2812:	ec e2       	ldi	r30, 0x2C	; 44
    2814:	f9 e0       	ldi	r31, 0x09	; 9
    2816:	df 01       	movw	r26, r30
    2818:	1d 92       	st	X+, r1
        cdc_recive_index = 0;
    281a:	8a 95       	dec	r24
    281c:	e9 f7       	brne	.-6      	; 0x2818 <CDC_Recive_Event_Process+0xabc>
    281e:	10 92 2b 09 	sts	0x092B, r1	; 0x80092b <cdc_recive_index+0x1>
    }
}
    2822:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <cdc_recive_index>
    2826:	c6 57       	subi	r28, 0x76	; 118
    2828:	df 4f       	sbci	r29, 0xFF	; 255
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	ef 90       	pop	r14
    2840:	df 90       	pop	r13
    2842:	cf 90       	pop	r12
    2844:	bf 90       	pop	r11
    2846:	af 90       	pop	r10
    2848:	9f 90       	pop	r9
    284a:	8f 90       	pop	r8
    284c:	7f 90       	pop	r7
    284e:	6f 90       	pop	r6
    2850:	5f 90       	pop	r5
    2852:	4f 90       	pop	r4
    2854:	3f 90       	pop	r3
    2856:	2f 90       	pop	r2
    2858:	08 95       	ret

0000285a <main>:
//     CDC_Device_SendByte(&VirtualSerial_CDC_Interface, '\n');
// }

int main(void)
{
    SetupHardware();
    285a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <SetupHardware>

    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    285e:	62 e5       	ldi	r22, 0x52	; 82
    2860:	72 e0       	ldi	r23, 0x02	; 2
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	91 e0       	ldi	r25, 0x01	; 1
    2866:	15 d6       	rcall	.+3114   	; 0x3492 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2868:	78 94       	sei

    GlobalInterruptEnable();

    c12880ma_read();
    286a:	0e 94 98 09 	call	0x1330	; 0x1330 <c12880ma_read>

    temperature = adc_temp_read();
    286e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <adc_temp_read>

    for (;;)
    {
        temperature = adc_temp_read();
    2872:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <adc_temp_read>
    2876:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <temperature>
    287a:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <temperature+0x1>
    287e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temperature+0x2>
    2882:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <temperature+0x3>
        status = check_status();
    2886:	0e 94 18 0a 	call	0x1430	; 0x1430 <check_status>
    288a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <status+0x1>

        CDC_Recive_Event_Process();
    288e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <status>
        CDC_Recive_Event();

        CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    2892:	64 da       	rcall	.-2872   	; 0x1d5c <CDC_Recive_Event_Process>
    2894:	48 da       	rcall	.-2928   	; 0x1d26 <CDC_Recive_Event>
        USB_USBTask();
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	a7 d5       	rcall	.+2894   	; 0x33ea <CDC_Device_USBTask>
    289c:	de d4       	rcall	.+2492   	; 0x325a <USB_USBTask>
    289e:	e9 cf       	rjmp	.-46     	; 0x2872 <main+0x18>

000028a0 <spi_init>:
#define DD_MOSI DDB2
#define DD_SCK DDB1

void spi_init()
{
    DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK);
    28a0:	84 b1       	in	r24, 0x04	; 4
    28a2:	86 60       	ori	r24, 0x06	; 6
    28a4:	84 b9       	out	0x04, r24	; 4
    SPCR = (1 << SPE) | (1 << MSTR);// | (1 << SPR0);// | (1 << CPOL) | (1 << CPHA);
    28a6:	80 e5       	ldi	r24, 0x50	; 80
    28a8:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X);
    28aa:	8d b5       	in	r24, 0x2d	; 45
    28ac:	81 60       	ori	r24, 0x01	; 1
    28ae:	8d bd       	out	0x2d, r24	; 45
    28b0:	08 95       	ret

000028b2 <spi_transfer>:
}

uint8_t spi_transfer(uint8_t value)
{
    SPDR = value;
    28b2:	8e bd       	out	0x2e, r24	; 46
    asm volatile("nop");
    28b4:	00 00       	nop
    while (!(SPSR & (1 << SPIF)));
    28b6:	0d b4       	in	r0, 0x2d	; 45
    28b8:	07 fe       	sbrs	r0, 7
    28ba:	fd cf       	rjmp	.-6      	; 0x28b6 <spi_transfer+0x4>

    return SPDR;
    28bc:	8e b5       	in	r24, 0x2e	; 46
    28be:	08 95       	ret

000028c0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    28c0:	29 2f       	mov	r18, r25
    28c2:	33 27       	eor	r19, r19
    28c4:	22 30       	cpi	r18, 0x02	; 2
    28c6:	31 05       	cpc	r19, r1
    28c8:	59 f0       	breq	.+22     	; 0x28e0 <CALLBACK_USB_GetDescriptor+0x20>
    28ca:	23 30       	cpi	r18, 0x03	; 3
    28cc:	31 05       	cpc	r19, r1
    28ce:	69 f0       	breq	.+26     	; 0x28ea <CALLBACK_USB_GetDescriptor+0x2a>
    28d0:	21 30       	cpi	r18, 0x01	; 1
    28d2:	31 05       	cpc	r19, r1
    28d4:	e9 f4       	brne	.+58     	; 0x2910 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    28d6:	82 e1       	ldi	r24, 0x12	; 18
    28d8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    28da:	2e e5       	ldi	r18, 0x5E	; 94
    28dc:	3f e0       	ldi	r19, 0x0F	; 15
    28de:	1c c0       	rjmp	.+56     	; 0x2918 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    28e0:	8e e3       	ldi	r24, 0x3E	; 62
    28e2:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    28e4:	20 e2       	ldi	r18, 0x20	; 32
    28e6:	3f e0       	ldi	r19, 0x0F	; 15
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    28e8:	17 c0       	rjmp	.+46     	; 0x2918 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
    28ea:	99 27       	eor	r25, r25
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	49 f0       	breq	.+18     	; 0x2904 <CALLBACK_USB_GetDescriptor+0x44>
    28f2:	28 f0       	brcs	.+10     	; 0x28fe <CALLBACK_USB_GetDescriptor+0x3e>
    28f4:	02 97       	sbiw	r24, 0x02	; 2
    28f6:	61 f4       	brne	.+24     	; 0x2910 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    28f8:	e6 ef       	ldi	r30, 0xF6	; 246
    28fa:	fe e0       	ldi	r31, 0x0E	; 14
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    28fe:	ec e1       	ldi	r30, 0x1C	; 28
    2900:	ff e0       	ldi	r31, 0x0F	; 15
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2904:	ec e0       	ldi	r30, 0x0C	; 12
    2906:	ff e0       	ldi	r31, 0x0F	; 15
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    2908:	84 91       	lpm	r24, Z
    290a:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    290c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    290e:	04 c0       	rjmp	.+8      	; 0x2918 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    2918:	fa 01       	movw	r30, r20
    291a:	31 83       	std	Z+1, r19	; 0x01
    291c:	20 83       	st	Z, r18
	return Size;
}
    291e:	08 95       	ret

00002920 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2920:	cf 92       	push	r12
    2922:	df 92       	push	r13
    2924:	ef 92       	push	r14
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	ec 01       	movw	r28, r24
    2932:	8b 01       	movw	r16, r22
    2934:	7a 01       	movw	r14, r20
    2936:	8d d1       	rcall	.+794    	; 0x2c52 <Endpoint_WaitUntilReady>
    2938:	81 11       	cpse	r24, r1
    293a:	32 c0       	rjmp	.+100    	; 0x29a0 <Endpoint_Write_Stream_LE+0x80>
    293c:	e1 14       	cp	r14, r1
    293e:	f1 04       	cpc	r15, r1
    2940:	39 f0       	breq	.+14     	; 0x2950 <Endpoint_Write_Stream_LE+0x30>
    2942:	f7 01       	movw	r30, r14
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	08 1b       	sub	r16, r24
    294a:	19 0b       	sbc	r17, r25
    294c:	c8 0f       	add	r28, r24
    294e:	d9 1f       	adc	r29, r25
    2950:	c1 2c       	mov	r12, r1
    2952:	d1 2c       	mov	r13, r1
    2954:	01 15       	cp	r16, r1
    2956:	11 05       	cpc	r17, r1
    2958:	11 f1       	breq	.+68     	; 0x299e <Endpoint_Write_Stream_LE+0x7e>
    295a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    295e:	85 fd       	sbrc	r24, 5
    2960:	15 c0       	rjmp	.+42     	; 0x298c <Endpoint_Write_Stream_LE+0x6c>
    2962:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2966:	8e 77       	andi	r24, 0x7E	; 126
    2968:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    296c:	e1 14       	cp	r14, r1
    296e:	f1 04       	cpc	r15, r1
    2970:	49 f0       	breq	.+18     	; 0x2984 <Endpoint_Write_Stream_LE+0x64>
    2972:	f7 01       	movw	r30, r14
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	c8 0e       	add	r12, r24
    297a:	d9 1e       	adc	r13, r25
    297c:	d1 82       	std	Z+1, r13	; 0x01
    297e:	c0 82       	st	Z, r12
    2980:	85 e0       	ldi	r24, 0x05	; 5
    2982:	0e c0       	rjmp	.+28     	; 0x29a0 <Endpoint_Write_Stream_LE+0x80>
    2984:	66 d1       	rcall	.+716    	; 0x2c52 <Endpoint_WaitUntilReady>
    2986:	88 23       	and	r24, r24
    2988:	29 f3       	breq	.-54     	; 0x2954 <Endpoint_Write_Stream_LE+0x34>
    298a:	0a c0       	rjmp	.+20     	; 0x29a0 <Endpoint_Write_Stream_LE+0x80>
    298c:	89 91       	ld	r24, Y+
    298e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2992:	01 50       	subi	r16, 0x01	; 1
    2994:	11 09       	sbc	r17, r1
    2996:	ff ef       	ldi	r31, 0xFF	; 255
    2998:	cf 1a       	sub	r12, r31
    299a:	df 0a       	sbc	r13, r31
    299c:	db cf       	rjmp	.-74     	; 0x2954 <Endpoint_Write_Stream_LE+0x34>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	08 95       	ret

000029b2 <Endpoint_Write_Control_Stream_LE>:
    29b2:	20 91 58 09 	lds	r18, 0x0958	; 0x800958 <USB_ControlRequest+0x6>
    29b6:	30 91 59 09 	lds	r19, 0x0959	; 0x800959 <USB_ControlRequest+0x7>
    29ba:	26 17       	cp	r18, r22
    29bc:	37 07       	cpc	r19, r23
    29be:	48 f0       	brcs	.+18     	; 0x29d2 <Endpoint_Write_Control_Stream_LE+0x20>
    29c0:	61 15       	cp	r22, r1
    29c2:	71 05       	cpc	r23, r1
    29c4:	39 f4       	brne	.+14     	; 0x29d4 <Endpoint_Write_Control_Stream_LE+0x22>
    29c6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29ca:	2e 77       	andi	r18, 0x7E	; 126
    29cc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <Endpoint_Write_Control_Stream_LE+0x22>
    29d2:	b9 01       	movw	r22, r18
    29d4:	fc 01       	movw	r30, r24
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	61 15       	cp	r22, r1
    29da:	71 05       	cpc	r23, r1
    29dc:	79 f1       	breq	.+94     	; 0x2a3c <Endpoint_Write_Control_Stream_LE+0x8a>
    29de:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>
    29e2:	88 23       	and	r24, r24
    29e4:	f1 f1       	breq	.+124    	; 0x2a62 <Endpoint_Write_Control_Stream_LE+0xb0>
    29e6:	85 30       	cpi	r24, 0x05	; 5
    29e8:	f1 f1       	breq	.+124    	; 0x2a66 <Endpoint_Write_Control_Stream_LE+0xb4>
    29ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29ee:	83 fd       	sbrc	r24, 3
    29f0:	3c c0       	rjmp	.+120    	; 0x2a6a <Endpoint_Write_Control_Stream_LE+0xb8>
    29f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29f6:	82 fd       	sbrc	r24, 2
    29f8:	2e c0       	rjmp	.+92     	; 0x2a56 <Endpoint_Write_Control_Stream_LE+0xa4>
    29fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29fe:	80 ff       	sbrs	r24, 0
    2a00:	eb cf       	rjmp	.-42     	; 0x29d8 <Endpoint_Write_Control_Stream_LE+0x26>
    2a02:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2a06:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	92 2b       	or	r25, r18
    2a0e:	61 15       	cp	r22, r1
    2a10:	71 05       	cpc	r23, r1
    2a12:	51 f0       	breq	.+20     	; 0x2a28 <Endpoint_Write_Control_Stream_LE+0x76>
    2a14:	88 30       	cpi	r24, 0x08	; 8
    2a16:	91 05       	cpc	r25, r1
    2a18:	38 f4       	brcc	.+14     	; 0x2a28 <Endpoint_Write_Control_Stream_LE+0x76>
    2a1a:	21 91       	ld	r18, Z+
    2a1c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a20:	61 50       	subi	r22, 0x01	; 1
    2a22:	71 09       	sbc	r23, r1
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	f3 cf       	rjmp	.-26     	; 0x2a0e <Endpoint_Write_Control_Stream_LE+0x5c>
    2a28:	21 e0       	ldi	r18, 0x01	; 1
    2a2a:	08 97       	sbiw	r24, 0x08	; 8
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <Endpoint_Write_Control_Stream_LE+0x7e>
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a34:	8e 77       	andi	r24, 0x7E	; 126
    2a36:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a3a:	ce cf       	rjmp	.-100    	; 0x29d8 <Endpoint_Write_Control_Stream_LE+0x26>
    2a3c:	21 11       	cpse	r18, r1
    2a3e:	cf cf       	rjmp	.-98     	; 0x29de <Endpoint_Write_Control_Stream_LE+0x2c>
    2a40:	0a c0       	rjmp	.+20     	; 0x2a56 <Endpoint_Write_Control_Stream_LE+0xa4>
    2a42:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>
    2a46:	88 23       	and	r24, r24
    2a48:	61 f0       	breq	.+24     	; 0x2a62 <Endpoint_Write_Control_Stream_LE+0xb0>
    2a4a:	85 30       	cpi	r24, 0x05	; 5
    2a4c:	61 f0       	breq	.+24     	; 0x2a66 <Endpoint_Write_Control_Stream_LE+0xb4>
    2a4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a52:	83 fd       	sbrc	r24, 3
    2a54:	0a c0       	rjmp	.+20     	; 0x2a6a <Endpoint_Write_Control_Stream_LE+0xb8>
    2a56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a5a:	82 ff       	sbrs	r24, 2
    2a5c:	f2 cf       	rjmp	.-28     	; 0x2a42 <Endpoint_Write_Control_Stream_LE+0x90>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	08 95       	ret
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	08 95       	ret
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	08 95       	ret
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	08 95       	ret

00002a6e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2a6e:	20 91 58 09 	lds	r18, 0x0958	; 0x800958 <USB_ControlRequest+0x6>
    2a72:	30 91 59 09 	lds	r19, 0x0959	; 0x800959 <USB_ControlRequest+0x7>
    2a76:	26 17       	cp	r18, r22
    2a78:	37 07       	cpc	r19, r23
    2a7a:	48 f0       	brcs	.+18     	; 0x2a8e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2a7c:	61 15       	cp	r22, r1
    2a7e:	71 05       	cpc	r23, r1
    2a80:	39 f4       	brne	.+14     	; 0x2a90 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2a82:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a86:	2e 77       	andi	r18, 0x7E	; 126
    2a88:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <Endpoint_Write_Control_PStream_LE+0x22>
    2a8e:	b9 01       	movw	r22, r18
    2a90:	fc 01       	movw	r30, r24
    2a92:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2a94:	61 15       	cp	r22, r1
    2a96:	71 05       	cpc	r23, r1
    2a98:	91 f1       	breq	.+100    	; 0x2afe <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2a9a:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <Endpoint_Write_Control_PStream_LE+0x36>
    2aa2:	40 c0       	rjmp	.+128    	; 0x2b24 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2aa4:	85 30       	cpi	r24, 0x05	; 5
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <Endpoint_Write_Control_PStream_LE+0x3c>
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2aae:	83 fd       	sbrc	r24, 3
    2ab0:	3d c0       	rjmp	.+122    	; 0x2b2c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ab2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2ab6:	82 fd       	sbrc	r24, 2
    2ab8:	2f c0       	rjmp	.+94     	; 0x2b18 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2aba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    2abe:	80 ff       	sbrs	r24, 0
    2ac0:	e9 cf       	rjmp	.-46     	; 0x2a94 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2ac2:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    2ac6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2ace:	61 15       	cp	r22, r1
    2ad0:	71 05       	cpc	r23, r1
    2ad2:	59 f0       	breq	.+22     	; 0x2aea <Endpoint_Write_Control_PStream_LE+0x7c>
    2ad4:	88 30       	cpi	r24, 0x08	; 8
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	40 f4       	brcc	.+16     	; 0x2aea <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2ada:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2adc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2ae0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2ae2:	61 50       	subi	r22, 0x01	; 1
    2ae4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	f2 cf       	rjmp	.-28     	; 0x2ace <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2aea:	21 e0       	ldi	r18, 0x01	; 1
    2aec:	08 97       	sbiw	r24, 0x08	; 8
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <Endpoint_Write_Control_PStream_LE+0x84>
    2af0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2af2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2af6:	8e 77       	andi	r24, 0x7E	; 126
    2af8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2afc:	cb cf       	rjmp	.-106    	; 0x2a94 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2afe:	21 11       	cpse	r18, r1
    2b00:	cc cf       	rjmp	.-104    	; 0x2a9a <Endpoint_Write_Control_PStream_LE+0x2c>
    2b02:	0a c0       	rjmp	.+20     	; 0x2b18 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2b04:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2b08:	88 23       	and	r24, r24
    2b0a:	61 f0       	breq	.+24     	; 0x2b24 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2b0c:	85 30       	cpi	r24, 0x05	; 5
    2b0e:	61 f0       	breq	.+24     	; 0x2b28 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2b10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2b14:	83 fd       	sbrc	r24, 3
    2b16:	0a c0       	rjmp	.+20     	; 0x2b2c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2b18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2b1c:	82 ff       	sbrs	r24, 2
    2b1e:	f2 cf       	rjmp	.-28     	; 0x2b04 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2b2e:	08 95       	ret

00002b30 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    2b30:	98 2f       	mov	r25, r24
    2b32:	97 30       	cpi	r25, 0x07	; 7
    2b34:	68 f5       	brcc	.+90     	; 0x2b90 <Endpoint_ConfigureEndpoint_Prv+0x60>
    2b36:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2b3a:	98 17       	cp	r25, r24
    2b3c:	39 f0       	breq	.+14     	; 0x2b4c <Endpoint_ConfigureEndpoint_Prv+0x1c>
    2b3e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2b42:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2b46:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2b4a:	03 c0       	rjmp	.+6      	; 0x2b52 <Endpoint_ConfigureEndpoint_Prv+0x22>
    2b4c:	24 2f       	mov	r18, r20
    2b4e:	76 2f       	mov	r23, r22
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	21 fd       	sbrc	r18, 1
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <Endpoint_ConfigureEndpoint_Prv+0x2a>
    2b56:	9f 5f       	subi	r25, 0xFF	; 255
    2b58:	ec cf       	rjmp	.-40     	; 0x2b32 <Endpoint_ConfigureEndpoint_Prv+0x2>
    2b5a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b5e:	3e 7f       	andi	r19, 0xFE	; 254
    2b60:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b64:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2b68:	3d 7f       	andi	r19, 0xFD	; 253
    2b6a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2b6e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b72:	31 60       	ori	r19, 0x01	; 1
    2b74:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b78:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2b7c:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2b80:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2b84:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    2b88:	27 fd       	sbrc	r18, 7
    2b8a:	e5 cf       	rjmp	.-54     	; 0x2b56 <Endpoint_ConfigureEndpoint_Prv+0x26>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	08 95       	ret
    2b90:	8f 70       	andi	r24, 0x0F	; 15
    2b92:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	08 95       	ret

00002b9a <Endpoint_ConfigureEndpointTable>:
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	06 2f       	mov	r16, r22
    2ba4:	ec 01       	movw	r28, r24
    2ba6:	10 e0       	ldi	r17, 0x00	; 0
    2ba8:	10 17       	cp	r17, r16
    2baa:	71 f1       	breq	.+92     	; 0x2c08 <Endpoint_ConfigureEndpointTable+0x6e>
    2bac:	68 81       	ld	r22, Y
    2bae:	61 11       	cpse	r22, r1
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <Endpoint_ConfigureEndpointTable+0x1e>
    2bb2:	1f 5f       	subi	r17, 0xFF	; 255
    2bb4:	25 96       	adiw	r28, 0x05	; 5
    2bb6:	f8 cf       	rjmp	.-16     	; 0x2ba8 <Endpoint_ConfigureEndpointTable+0xe>
    2bb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bba:	a9 81       	ldd	r26, Y+1	; 0x01
    2bbc:	ba 81       	ldd	r27, Y+2	; 0x02
    2bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc0:	86 2f       	mov	r24, r22
    2bc2:	8f 70       	andi	r24, 0x0F	; 15
    2bc4:	87 30       	cpi	r24, 0x07	; 7
    2bc6:	10 f0       	brcs	.+4      	; 0x2bcc <Endpoint_ConfigureEndpointTable+0x32>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	1f c0       	rjmp	.+62     	; 0x2c0a <Endpoint_ConfigureEndpointTable+0x70>
    2bcc:	22 30       	cpi	r18, 0x02	; 2
    2bce:	10 f4       	brcc	.+4      	; 0x2bd4 <Endpoint_ConfigureEndpointTable+0x3a>
    2bd0:	42 e0       	ldi	r20, 0x02	; 2
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <Endpoint_ConfigureEndpointTable+0x3c>
    2bd4:	46 e0       	ldi	r20, 0x06	; 6
    2bd6:	e8 e0       	ldi	r30, 0x08	; 8
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	ea 17       	cp	r30, r26
    2bde:	fb 07       	cpc	r31, r27
    2be0:	20 f4       	brcc	.+8      	; 0x2bea <Endpoint_ConfigureEndpointTable+0x50>
    2be2:	2f 5f       	subi	r18, 0xFF	; 255
    2be4:	ee 0f       	add	r30, r30
    2be6:	ff 1f       	adc	r31, r31
    2be8:	f9 cf       	rjmp	.-14     	; 0x2bdc <Endpoint_ConfigureEndpointTable+0x42>
    2bea:	22 95       	swap	r18
    2bec:	20 7f       	andi	r18, 0xF0	; 240
    2bee:	42 2b       	or	r20, r18
    2bf0:	50 e4       	ldi	r21, 0x40	; 64
    2bf2:	95 9f       	mul	r25, r21
    2bf4:	90 01       	movw	r18, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	66 1f       	adc	r22, r22
    2bfa:	66 27       	eor	r22, r22
    2bfc:	66 1f       	adc	r22, r22
    2bfe:	62 2b       	or	r22, r18
    2c00:	97 df       	rcall	.-210    	; 0x2b30 <Endpoint_ConfigureEndpoint_Prv>
    2c02:	81 11       	cpse	r24, r1
    2c04:	d6 cf       	rjmp	.-84     	; 0x2bb2 <Endpoint_ConfigureEndpointTable+0x18>
    2c06:	e0 cf       	rjmp	.-64     	; 0x2bc8 <Endpoint_ConfigureEndpointTable+0x2e>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	08 95       	ret

00002c14 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2c14:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <USB_ControlRequest>
    2c18:	87 ff       	sbrs	r24, 7
    2c1a:	11 c0       	rjmp	.+34     	; 0x2c3e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    2c20:	82 fd       	sbrc	r24, 2
    2c22:	05 c0       	rjmp	.+10     	; 0x2c2e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2c24:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>
    2c28:	81 11       	cpse	r24, r1
    2c2a:	f8 cf       	rjmp	.-16     	; 0x2c1c <Endpoint_ClearStatusStage+0x8>
    2c2c:	11 c0       	rjmp	.+34     	; 0x2c50 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2c2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c32:	8b 77       	andi	r24, 0x7B	; 123
    2c34:	0b c0       	rjmp	.+22     	; 0x2c4c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2c36:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>
    2c3a:	88 23       	and	r24, r24
    2c3c:	49 f0       	breq	.+18     	; 0x2c50 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2c3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2c42:	80 ff       	sbrs	r24, 0
    2c44:	f8 cf       	rjmp	.-16     	; 0x2c36 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c4a:	8e 77       	andi	r24, 0x7E	; 126
    2c4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c50:	08 95       	ret

00002c52 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2c52:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2c56:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    2c5a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2c5c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2c60:	84 2f       	mov	r24, r20
    2c62:	81 70       	andi	r24, 0x01	; 1
    2c64:	40 ff       	sbrs	r20, 0
    2c66:	23 c0       	rjmp	.+70     	; 0x2cae <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2c68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2c6c:	80 fd       	sbrc	r24, 0
    2c6e:	1d c0       	rjmp	.+58     	; 0x2caa <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2c70:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2c74:	88 23       	and	r24, r24
    2c76:	99 f0       	breq	.+38     	; 0x2c9e <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2c78:	85 30       	cpi	r24, 0x05	; 5
    2c7a:	99 f0       	breq	.+38     	; 0x2ca2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2c7c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2c80:	85 fd       	sbrc	r24, 5
    2c82:	11 c0       	rjmp	.+34     	; 0x2ca6 <Endpoint_WaitUntilReady+0x54>
    2c84:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2c88:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2c8c:	24 17       	cp	r18, r20
    2c8e:	35 07       	cpc	r19, r21
    2c90:	29 f3       	breq	.-54     	; 0x2c5c <Endpoint_WaitUntilReady+0xa>
    2c92:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2c94:	11 f0       	breq	.+4      	; 0x2c9a <Endpoint_WaitUntilReady+0x48>
    2c96:	9a 01       	movw	r18, r20
    2c98:	e1 cf       	rjmp	.-62     	; 0x2c5c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    2c9a:	84 e0       	ldi	r24, 0x04	; 4
    2c9c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2cae:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2cb2:	42 ff       	sbrs	r20, 2
    2cb4:	dd cf       	rjmp	.-70     	; 0x2c70 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2cb6:	08 95       	ret

00002cb8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    2cbe:	df 93       	push	r29
    2cc0:	4b d0       	rcall	.+150    	; 0x2d58 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2cc2:	52 d0       	rcall	.+164    	; 0x2d68 <USB_INT_ClearAllInterrupts>
    2cc4:	c8 ed       	ldi	r28, 0xD8	; 216
    2cc6:	d0 e0       	ldi	r29, 0x00	; 0
    2cc8:	88 81       	ld	r24, Y
    2cca:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
    2ccc:	88 83       	st	Y, r24
    2cce:	88 81       	ld	r24, Y
    2cd0:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2cd2:	88 83       	st	Y, r24
    2cd4:	88 81       	ld	r24, Y
    2cd6:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2cd8:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2cda:	19 bc       	out	0x29, r1	; 41
    2cdc:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    2ce0:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2ce4:	10 92 4f 09 	sts	0x094F, r1	; 0x80094f <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2ce8:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2cec:	00 ee       	ldi	r16, 0xE0	; 224
    2cee:	10 e0       	ldi	r17, 0x00	; 0
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2cf6:	80 83       	st	Z, r24
    2cf8:	88 81       	ld	r24, Y
    2cfa:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2cfc:	88 83       	st	Y, r24
    2cfe:	42 e0       	ldi	r20, 0x02	; 2
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2d04:	15 df       	rcall	.-470    	; 0x2b30 <Endpoint_ConfigureEndpoint_Prv>
    2d06:	e1 ee       	ldi	r30, 0xE1	; 225
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2d0e:	80 83       	st	Z, r24
    2d10:	e2 ee       	ldi	r30, 0xE2	; 226
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2d18:	80 83       	st	Z, r24
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2d1e:	80 83       	st	Z, r24
    2d20:	f8 01       	movw	r30, r16
    2d22:	80 81       	ld	r24, Z
    2d24:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2d26:	80 83       	st	Z, r24
    2d28:	88 81       	ld	r24, Y
    2d2a:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2d2c:	88 83       	st	Y, r24
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	08 95       	ret

00002d38 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2d38:	e8 ed       	ldi	r30, 0xD8	; 216
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	8f 7e       	andi	r24, 0xEF	; 239
    2d40:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2d42:	e7 ed       	ldi	r30, 0xD7	; 215
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	81 60       	ori	r24, 0x01	; 1
    2d4a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2d4c:	84 e0       	ldi	r24, 0x04	; 4
    2d4e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <USB_IsInitialized>
    2d56:	b0 cf       	rjmp	.-160    	; 0x2cb8 <USB_ResetInterface>

00002d58 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2d58:	e8 ed       	ldi	r30, 0xD8	; 216
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	8e 7f       	andi	r24, 0xFE	; 254
    2d60:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2d62:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d66:	08 95       	ret

00002d68 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2d68:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2d6c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d70:	08 95       	ret

00002d72 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2d72:	1f 92       	push	r1
    2d74:	0f 92       	push	r0
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	0f 92       	push	r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	2f 93       	push	r18
    2d7e:	3f 93       	push	r19
    2d80:	4f 93       	push	r20
    2d82:	5f 93       	push	r21
    2d84:	6f 93       	push	r22
    2d86:	7f 93       	push	r23
    2d88:	8f 93       	push	r24
    2d8a:	9f 93       	push	r25
    2d8c:	af 93       	push	r26
    2d8e:	bf 93       	push	r27
    2d90:	ef 93       	push	r30
    2d92:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2d94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2d98:	82 ff       	sbrs	r24, 2
    2d9a:	0a c0       	rjmp	.+20     	; 0x2db0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2d9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2da0:	82 ff       	sbrs	r24, 2
    2da2:	06 c0       	rjmp	.+12     	; 0x2db0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2da4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2da8:	8b 7f       	andi	r24, 0xFB	; 251
    2daa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2dae:	54 d2       	rcall	.+1192   	; 0x3258 <USB_Event_Stub>
    2db0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2db4:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2db6:	1f c0       	rjmp	.+62     	; 0x2df6 <__vector_10+0x84>
    2db8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2dbc:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2dbe:	1b c0       	rjmp	.+54     	; 0x2df6 <__vector_10+0x84>
    2dc0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    2dc4:	8e 7f       	andi	r24, 0xFE	; 254
    2dc6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2dca:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2dce:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2dd0:	0d c0       	rjmp	.+26     	; 0x2dec <__vector_10+0x7a>
    2dd2:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2dd4:	89 bd       	out	0x29, r24	; 41
    2dd6:	82 e1       	ldi	r24, 0x12	; 18
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2dd8:	89 bd       	out	0x29, r24	; 41
    2dda:	09 b4       	in	r0, 0x29	; 41
    2ddc:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2dde:	fd cf       	rjmp	.-6      	; 0x2dda <__vector_10+0x68>
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2de6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <EVENT_USB_Device_Connect>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <__vector_10+0x84>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2dec:	19 bc       	out	0x29, r1	; 41
    2dee:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    2df2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2df6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2dfa:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2dfc:	18 c0       	rjmp	.+48     	; 0x2e2e <__vector_10+0xbc>
    2dfe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e02:	80 ff       	sbrs	r24, 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <__vector_10+0xbc>
    2e06:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e0a:	8e 7f       	andi	r24, 0xFE	; 254
    2e0c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2e10:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e14:	80 61       	ori	r24, 0x10	; 16
    2e16:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2e1a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2e1e:	80 62       	ori	r24, 0x20	; 32
    2e20:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2e24:	19 bc       	out	0x29, r1	; 41
    2e26:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    2e28:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <USB_DeviceState>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2e2c:	15 d2       	rcall	.+1066   	; 0x3258 <USB_Event_Stub>
    2e2e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2e32:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2e34:	2f c0       	rjmp	.+94     	; 0x2e94 <__vector_10+0x122>
    2e36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e3a:	84 ff       	sbrs	r24, 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2e3c:	2b c0       	rjmp	.+86     	; 0x2e94 <__vector_10+0x122>
    2e3e:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2e40:	89 bd       	out	0x29, r24	; 41
    2e42:	82 e1       	ldi	r24, 0x12	; 18
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2e44:	89 bd       	out	0x29, r24	; 41
    2e46:	09 b4       	in	r0, 0x29	; 41
    2e48:	00 fe       	sbrs	r0, 0
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2e4a:	fd cf       	rjmp	.-6      	; 0x2e46 <__vector_10+0xd4>
    2e4c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2e50:	8f 7d       	andi	r24, 0xDF	; 223
    2e52:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2e56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e5a:	8f 7e       	andi	r24, 0xEF	; 239
    2e5c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2e60:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e64:	8f 7e       	andi	r24, 0xEF	; 239
    2e66:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2e6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e6e:	81 60       	ori	r24, 0x01	; 1
    2e70:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2e74:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <USB_Device_ConfigurationNumber>
    2e78:	88 23       	and	r24, r24
		  USB_DeviceState = DEVICE_STATE_Configured;
    2e7a:	11 f0       	breq	.+4      	; 0x2e80 <__vector_10+0x10e>
    2e7c:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2e7e:	07 c0       	rjmp	.+14     	; 0x2e8e <__vector_10+0x11c>
    2e80:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2e84:	87 fd       	sbrc	r24, 7
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <__vector_10+0x11a>
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <__vector_10+0x11c>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2e8c:	83 e0       	ldi	r24, 0x03	; 3
    2e8e:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <USB_DeviceState>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2e92:	e2 d1       	rcall	.+964    	; 0x3258 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2e94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2e98:	83 ff       	sbrs	r24, 3
    2e9a:	27 c0       	rjmp	.+78     	; 0x2eea <__vector_10+0x178>
    2e9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2ea0:	83 ff       	sbrs	r24, 3
    2ea2:	23 c0       	rjmp	.+70     	; 0x2eea <__vector_10+0x178>
    2ea4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ea8:	87 7f       	andi	r24, 0xF7	; 247
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2eaa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2eae:	82 e0       	ldi	r24, 0x02	; 2
		USB_Device_ConfigurationNumber = 0;
    2eb0:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2eb4:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <USB_Device_ConfigurationNumber>
    2eb8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ebc:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2ebe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ec2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ec6:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2ec8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ecc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2ed0:	80 61       	ori	r24, 0x10	; 16
    2ed2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ed6:	42 e0       	ldi	r20, 0x02	; 2
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	29 de       	rcall	.-942    	; 0x2b30 <Endpoint_ConfigureEndpoint_Prv>
    2ede:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2ee2:	88 60       	ori	r24, 0x08	; 8
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2ee4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2ee8:	b7 d1       	rcall	.+878    	; 0x3258 <USB_Event_Stub>
    2eea:	ff 91       	pop	r31
    2eec:	ef 91       	pop	r30
    2eee:	bf 91       	pop	r27
    2ef0:	af 91       	pop	r26
    2ef2:	9f 91       	pop	r25
    2ef4:	8f 91       	pop	r24
    2ef6:	7f 91       	pop	r23
    2ef8:	6f 91       	pop	r22
    2efa:	5f 91       	pop	r21
    2efc:	4f 91       	pop	r20
    2efe:	3f 91       	pop	r19
    2f00:	2f 91       	pop	r18
    2f02:	0f 90       	pop	r0
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	0f 90       	pop	r0
    2f08:	1f 90       	pop	r1
    2f0a:	18 95       	reti

00002f0c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	2f 93       	push	r18
    2f18:	3f 93       	push	r19
    2f1a:	4f 93       	push	r20
    2f1c:	5f 93       	push	r21
    2f1e:	6f 93       	push	r22
    2f20:	7f 93       	push	r23
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	af 93       	push	r26
    2f28:	bf 93       	push	r27
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	ef 93       	push	r30
    2f30:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2f32:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f36:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2f38:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2f3c:	d8 2f       	mov	r29, r24
    2f3e:	d1 70       	andi	r29, 0x01	; 1
    2f40:	80 fd       	sbrc	r24, 0
    2f42:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f44:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2f48:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f4c:	87 7f       	andi	r24, 0xF7	; 247
    2f4e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
    2f52:	78 94       	sei
    2f54:	1e d0       	rcall	.+60     	; 0x2f92 <USB_Device_ProcessControlRequest>
    2f56:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f5a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f5e:	88 60       	ori	r24, 0x08	; 8
    2f60:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f64:	cd 2b       	or	r28, r29
    2f66:	cf 70       	andi	r28, 0x0F	; 15
    2f68:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f6c:	ff 91       	pop	r31
    2f6e:	ef 91       	pop	r30
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	bf 91       	pop	r27
    2f76:	af 91       	pop	r26
    2f78:	9f 91       	pop	r25
    2f7a:	8f 91       	pop	r24
    2f7c:	7f 91       	pop	r23
    2f7e:	6f 91       	pop	r22
    2f80:	5f 91       	pop	r21
    2f82:	4f 91       	pop	r20
    2f84:	3f 91       	pop	r19
    2f86:	2f 91       	pop	r18
    2f88:	0f 90       	pop	r0
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	0f 90       	pop	r0
    2f8e:	1f 90       	pop	r1
    2f90:	18 95       	reti

00002f92 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	aa 97       	sbiw	r28, 0x2a	; 42
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	e2 e5       	ldi	r30, 0x52	; 82
    2faa:	f9 e0       	ldi	r31, 0x09	; 9
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2fac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2fb0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2fb2:	29 e0       	ldi	r18, 0x09	; 9
    2fb4:	ea 35       	cpi	r30, 0x5A	; 90
    2fb6:	f2 07       	cpc	r31, r18
    2fb8:	c9 f7       	brne	.-14     	; 0x2fac <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2fba:	0e 94 df 08 	call	0x11be	; 0x11be <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2fbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    2fc2:	83 ff       	sbrs	r24, 3
    2fc4:	31 c1       	rjmp	.+610    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2fc6:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    2fca:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <USB_ControlRequest+0x1>
    2fce:	95 30       	cpi	r25, 0x05	; 5
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <USB_Device_ProcessControlRequest+0x42>
    2fd2:	83 c0       	rjmp	.+262    	; 0x30da <USB_Device_ProcessControlRequest+0x148>
    2fd4:	30 f4       	brcc	.+12     	; 0x2fe2 <USB_Device_ProcessControlRequest+0x50>
    2fd6:	91 30       	cpi	r25, 0x01	; 1
    2fd8:	a9 f1       	breq	.+106    	; 0x3044 <USB_Device_ProcessControlRequest+0xb2>
    2fda:	68 f0       	brcs	.+26     	; 0x2ff6 <USB_Device_ProcessControlRequest+0x64>
    2fdc:	93 30       	cpi	r25, 0x03	; 3
    2fde:	91 f1       	breq	.+100    	; 0x3044 <USB_Device_ProcessControlRequest+0xb2>
    2fe0:	23 c1       	rjmp	.+582    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    2fe2:	98 30       	cpi	r25, 0x08	; 8
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <USB_Device_ProcessControlRequest+0x56>
    2fe6:	ef c0       	rjmp	.+478    	; 0x31c6 <USB_Device_ProcessControlRequest+0x234>
    2fe8:	99 30       	cpi	r25, 0x09	; 9
    2fea:	09 f4       	brne	.+2      	; 0x2fee <USB_Device_ProcessControlRequest+0x5c>
    2fec:	fb c0       	rjmp	.+502    	; 0x31e4 <USB_Device_ProcessControlRequest+0x252>
    2fee:	96 30       	cpi	r25, 0x06	; 6
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <USB_Device_ProcessControlRequest+0x62>
    2ff2:	1a c1       	rjmp	.+564    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    2ff4:	94 c0       	rjmp	.+296    	; 0x311e <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2ff6:	80 38       	cpi	r24, 0x80	; 128
    2ff8:	21 f0       	breq	.+8      	; 0x3002 <USB_Device_ProcessControlRequest+0x70>
    2ffa:	82 38       	cpi	r24, 0x82	; 130
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <USB_Device_ProcessControlRequest+0x6e>
    2ffe:	14 c1       	rjmp	.+552    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    3000:	08 c0       	rjmp	.+16     	; 0x3012 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3002:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3006:	90 91 4f 09 	lds	r25, 0x094F	; 0x80094f <USB_Device_RemoteWakeupEnabled>
    300a:	99 23       	and	r25, r25
    300c:	89 f0       	breq	.+34     	; 0x3030 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    300e:	82 60       	ori	r24, 0x02	; 2
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <USB_Device_ProcessControlRequest+0x9e>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3012:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <USB_ControlRequest+0x4>
    3016:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3018:	87 30       	cpi	r24, 0x07	; 7
    301a:	08 f0       	brcs	.+2      	; 0x301e <USB_Device_ProcessControlRequest+0x8c>
    301c:	05 c1       	rjmp	.+522    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    301e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3022:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    3026:	85 fb       	bst	r24, 5
    3028:	88 27       	eor	r24, r24
    302a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    302c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3030:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3034:	97 7f       	andi	r25, 0xF7	; 247
    3036:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    303a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    303e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3042:	cc c0       	rjmp	.+408    	; 0x31dc <USB_Device_ProcessControlRequest+0x24a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3044:	28 2f       	mov	r18, r24
    3046:	2d 7f       	andi	r18, 0xFD	; 253
    3048:	09 f0       	breq	.+2      	; 0x304c <USB_Device_ProcessControlRequest+0xba>
    304a:	ee c0       	rjmp	.+476    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    304c:	88 23       	and	r24, r24
    304e:	19 f0       	breq	.+6      	; 0x3056 <USB_Device_ProcessControlRequest+0xc4>
    3050:	82 30       	cpi	r24, 0x02	; 2
    3052:	61 f0       	breq	.+24     	; 0x306c <USB_Device_ProcessControlRequest+0xda>
    3054:	e9 c0       	rjmp	.+466    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3056:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	09 f0       	breq	.+2      	; 0x3060 <USB_Device_ProcessControlRequest+0xce>
    305e:	e4 c0       	rjmp	.+456    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3060:	93 30       	cpi	r25, 0x03	; 3
    3062:	09 f0       	breq	.+2      	; 0x3066 <USB_Device_ProcessControlRequest+0xd4>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <USB_Device_RemoteWakeupEnabled>
    306a:	2e c0       	rjmp	.+92     	; 0x30c8 <USB_Device_ProcessControlRequest+0x136>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    306c:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
    3070:	81 11       	cpse	r24, r1
    3072:	2a c0       	rjmp	.+84     	; 0x30c8 <USB_Device_ProcessControlRequest+0x136>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3074:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <USB_ControlRequest+0x4>
    3078:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    307a:	2f ef       	ldi	r18, 0xFF	; 255
    307c:	28 0f       	add	r18, r24
    307e:	26 30       	cpi	r18, 0x06	; 6
    3080:	08 f0       	brcs	.+2      	; 0x3084 <USB_Device_ProcessControlRequest+0xf2>
    3082:	d2 c0       	rjmp	.+420    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3084:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3088:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    308c:	20 ff       	sbrs	r18, 0
    308e:	1c c0       	rjmp	.+56     	; 0x30c8 <USB_Device_ProcessControlRequest+0x136>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3090:	93 30       	cpi	r25, 0x03	; 3
    3092:	21 f4       	brne	.+8      	; 0x309c <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3094:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3098:	80 62       	ori	r24, 0x20	; 32
    309a:	14 c0       	rjmp	.+40     	; 0x30c4 <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    309c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30a0:	90 61       	ori	r25, 0x10	; 16
    30a2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    30a6:	21 e0       	ldi	r18, 0x01	; 1
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	a9 01       	movw	r20, r18
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <USB_Device_ProcessControlRequest+0x120>
    30ae:	44 0f       	add	r20, r20
    30b0:	55 1f       	adc	r21, r21
    30b2:	8a 95       	dec	r24
    30b4:	e2 f7       	brpl	.-8      	; 0x30ae <USB_Device_ProcessControlRequest+0x11c>
    30b6:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    30ba:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    30be:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30c2:	88 60       	ori	r24, 0x08	; 8
    30c4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30c8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    30cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    30d0:	87 7f       	andi	r24, 0xF7	; 247
    30d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    30d6:	9e dd       	rcall	.-1220   	; 0x2c14 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    30d8:	a7 c0       	rjmp	.+334    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    30da:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    30dc:	a5 c0       	rjmp	.+330    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    30de:	10 91 54 09 	lds	r17, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    30e2:	1f 77       	andi	r17, 0x7F	; 127
    30e4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    30e8:	80 78       	andi	r24, 0x80	; 128
    30ea:	81 2b       	or	r24, r17
    30ec:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    30f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    30f4:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    30f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    30fa:	8c dd       	rcall	.-1256   	; 0x2c14 <Endpoint_ClearStatusStage>
    30fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    3100:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3102:	fc cf       	rjmp	.-8      	; 0x30fc <USB_Device_ProcessControlRequest+0x16a>
    3104:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3108:	80 68       	ori	r24, 0x80	; 128
    310a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    310e:	11 11       	cpse	r17, r1
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <USB_Device_ProcessControlRequest+0x184>
    3112:	82 e0       	ldi	r24, 0x02	; 2
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <USB_Device_ProcessControlRequest+0x186>
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    311c:	85 c0       	rjmp	.+266    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    311e:	80 58       	subi	r24, 0x80	; 128
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	08 f0       	brcs	.+2      	; 0x3126 <USB_Device_ProcessControlRequest+0x194>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3124:	81 c0       	rjmp	.+258    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    3126:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
    312a:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <USB_ControlRequest+0x3>
    312e:	8c 3d       	cpi	r24, 0xDC	; 220
    3130:	53 e0       	ldi	r21, 0x03	; 3
    3132:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3134:	71 f5       	brne	.+92     	; 0x3192 <USB_Device_ProcessControlRequest+0x200>
    3136:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3138:	8a 83       	std	Y+2, r24	; 0x02
    313a:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    313c:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    313e:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3140:	f8 94       	cli
    3142:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3144:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3146:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3148:	3e e0       	ldi	r19, 0x0E	; 14
    314a:	51 e2       	ldi	r21, 0x21	; 33
    314c:	e3 2f       	mov	r30, r19
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
    3154:	e4 91       	lpm	r30, Z
    3156:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <USB_Device_ProcessControlRequest+0x1ce>
    315a:	e2 95       	swap	r30
						SigReadAddress++;
    315c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
    315e:	3f 5f       	subi	r19, 0xFF	; 255
    3160:	ef 70       	andi	r30, 0x0F	; 15
    3162:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	ea 30       	cpi	r30, 0x0A	; 10
    3168:	10 f0       	brcs	.+4      	; 0x316e <USB_Device_ProcessControlRequest+0x1dc>
    316a:	c7 96       	adiw	r24, 0x37	; 55
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <USB_Device_ProcessControlRequest+0x1de>
    316e:	c0 96       	adiw	r24, 0x30	; 48
    3170:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3172:	9d 93       	st	X+, r25
    3174:	2f 5f       	subi	r18, 0xFF	; 255
    3176:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3178:	49 f7       	brne	.-46     	; 0x314c <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    317a:	4f bf       	out	0x3f, r20	; 63
    317c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3180:	87 7f       	andi	r24, 0xF7	; 247
    3182:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3186:	6a e2       	ldi	r22, 0x2A	; 42
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	ce 01       	movw	r24, r28
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	11 dc       	rcall	.-2014   	; 0x29b2 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3190:	14 c0       	rjmp	.+40     	; 0x31ba <USB_Device_ProcessControlRequest+0x228>
    3192:	60 91 56 09 	lds	r22, 0x0956	; 0x800956 <USB_ControlRequest+0x4>
    3196:	70 91 57 09 	lds	r23, 0x0957	; 0x800957 <USB_ControlRequest+0x5>
    319a:	ae 01       	movw	r20, r28
    319c:	4f 5f       	subi	r20, 0xFF	; 255
    319e:	5f 4f       	sbci	r21, 0xFF	; 255
    31a0:	8f db       	rcall	.-2274   	; 0x28c0 <CALLBACK_USB_GetDescriptor>
    31a2:	bc 01       	movw	r22, r24
    31a4:	89 2b       	or	r24, r25
    31a6:	09 f4       	brne	.+2      	; 0x31aa <USB_Device_ProcessControlRequest+0x218>
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    31aa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31ae:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    31b0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    31b8:	5a dc       	rcall	.-1868   	; 0x2a6e <Endpoint_Write_Control_PStream_LE>
    31ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31be:	8b 77       	andi	r24, 0x7B	; 123
    31c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    31c4:	31 c0       	rjmp	.+98     	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    31c6:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    31c8:	79 f5       	brne	.+94     	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    31ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31ce:	87 7f       	andi	r24, 0xF7	; 247
    31d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    31d4:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    31d8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    31dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31e0:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    31e2:	77 cf       	rjmp	.-274    	; 0x30d2 <USB_Device_ProcessControlRequest+0x140>
    31e4:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    31e6:	20 c0       	rjmp	.+64     	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    31e8:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
    31ec:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <USB_ControlRequest+0x3>
    31f0:	99 27       	eor	r25, r25
    31f2:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    31f4:	cc f4       	brge	.+50     	; 0x3228 <USB_Device_ProcessControlRequest+0x296>
    31f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31fa:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    31fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3200:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
    3204:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
    3208:	05 dd       	rcall	.-1526   	; 0x2c14 <Endpoint_ClearStatusStage>
    320a:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <USB_Device_ConfigurationNumber>
    320e:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3210:	06 c0       	rjmp	.+12     	; 0x321e <USB_Device_ProcessControlRequest+0x28c>
    3212:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3216:	87 fd       	sbrc	r24, 7
    3218:	02 c0       	rjmp	.+4      	; 0x321e <USB_Device_ProcessControlRequest+0x28c>
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	01 c0       	rjmp	.+2      	; 0x3220 <USB_Device_ProcessControlRequest+0x28e>
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    3224:	0e 94 db 08 	call	0x11b6	; 0x11b6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3228:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    322c:	83 ff       	sbrs	r24, 3
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    322e:	0a c0       	rjmp	.+20     	; 0x3244 <USB_Device_ProcessControlRequest+0x2b2>
    3230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3234:	87 7f       	andi	r24, 0xF7	; 247
    3236:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    323a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    323e:	80 62       	ori	r24, 0x20	; 32
    3240:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3244:	aa 96       	adiw	r28, 0x2a	; 42
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	08 95       	ret

00003258 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3258:	08 95       	ret

0000325a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    325a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    325c:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>
    3260:	88 23       	and	r24, r24
    3262:	99 f0       	breq	.+38     	; 0x328a <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3264:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3268:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    326a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    326e:	89 2f       	mov	r24, r25
    3270:	81 70       	andi	r24, 0x01	; 1
    3272:	90 fd       	sbrc	r25, 0
    3274:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3276:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3278:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    327c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    3280:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3282:	87 de       	rcall	.-754    	; 0x2f92 <USB_Device_ProcessControlRequest>
    3284:	cf 70       	andi	r28, 0x0F	; 15
    3286:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    328a:	cf 91       	pop	r28
    328c:	08 95       	ret

0000328e <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	ec 01       	movw	r28, r24
    3294:	fc 01       	movw	r30, r24
    3296:	70 96       	adiw	r30, 0x10	; 16
    3298:	8b e0       	ldi	r24, 0x0B	; 11
    329a:	df 01       	movw	r26, r30
    329c:	1d 92       	st	X+, r1
    329e:	8a 95       	dec	r24
    32a0:	e9 f7       	brne	.-6      	; 0x329c <CDC_Device_ConfigureEndpoints+0xe>
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	8c 83       	std	Y+4, r24	; 0x04
    32a6:	89 87       	std	Y+9, r24	; 0x09
    32a8:	83 e0       	ldi	r24, 0x03	; 3
    32aa:	8e 87       	std	Y+14, r24	; 0x0e
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	ce 01       	movw	r24, r28
    32b0:	01 96       	adiw	r24, 0x01	; 1
    32b2:	73 dc       	rcall	.-1818   	; 0x2b9a <Endpoint_ConfigureEndpointTable>
    32b4:	88 23       	and	r24, r24
    32b6:	61 f0       	breq	.+24     	; 0x32d0 <CDC_Device_ConfigureEndpoints+0x42>
    32b8:	61 e0       	ldi	r22, 0x01	; 1
    32ba:	ce 01       	movw	r24, r28
    32bc:	06 96       	adiw	r24, 0x06	; 6
    32be:	6d dc       	rcall	.-1830   	; 0x2b9a <Endpoint_ConfigureEndpointTable>
    32c0:	88 23       	and	r24, r24
    32c2:	31 f0       	breq	.+12     	; 0x32d0 <CDC_Device_ConfigureEndpoints+0x42>
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	ce 01       	movw	r24, r28
    32c8:	0b 96       	adiw	r24, 0x0b	; 11
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	65 cc       	rjmp	.-1846   	; 0x2b9a <Endpoint_ConfigureEndpointTable>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	08 95       	ret

000032d8 <CDC_Device_SendString>:
    32d8:	db 01       	movw	r26, r22
    32da:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <USB_DeviceState>
    32de:	24 30       	cpi	r18, 0x04	; 4
    32e0:	c9 f4       	brne	.+50     	; 0x3314 <CDC_Device_SendString+0x3c>
    32e2:	fc 01       	movw	r30, r24
    32e4:	44 89       	ldd	r20, Z+20	; 0x14
    32e6:	55 89       	ldd	r21, Z+21	; 0x15
    32e8:	66 89       	ldd	r22, Z+22	; 0x16
    32ea:	77 89       	ldd	r23, Z+23	; 0x17
    32ec:	45 2b       	or	r20, r21
    32ee:	46 2b       	or	r20, r22
    32f0:	47 2b       	or	r20, r23
    32f2:	81 f0       	breq	.+32     	; 0x3314 <CDC_Device_SendString+0x3c>
    32f4:	81 81       	ldd	r24, Z+1	; 0x01
    32f6:	8f 70       	andi	r24, 0x0F	; 15
    32f8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    32fc:	fd 01       	movw	r30, r26
    32fe:	01 90       	ld	r0, Z+
    3300:	00 20       	and	r0, r0
    3302:	e9 f7       	brne	.-6      	; 0x32fe <CDC_Device_SendString+0x26>
    3304:	31 97       	sbiw	r30, 0x01	; 1
    3306:	bf 01       	movw	r22, r30
    3308:	6a 1b       	sub	r22, r26
    330a:	7b 0b       	sbc	r23, r27
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	cd 01       	movw	r24, r26
    3312:	06 cb       	rjmp	.-2548   	; 0x2920 <Endpoint_Write_Stream_LE>
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	08 95       	ret

00003318 <CDC_Device_SendByte>:
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <USB_DeviceState>
    3322:	24 30       	cpi	r18, 0x04	; 4
    3324:	f9 f4       	brne	.+62     	; 0x3364 <CDC_Device_SendByte+0x4c>
    3326:	fc 01       	movw	r30, r24
    3328:	04 89       	ldd	r16, Z+20	; 0x14
    332a:	15 89       	ldd	r17, Z+21	; 0x15
    332c:	26 89       	ldd	r18, Z+22	; 0x16
    332e:	37 89       	ldd	r19, Z+23	; 0x17
    3330:	01 2b       	or	r16, r17
    3332:	02 2b       	or	r16, r18
    3334:	03 2b       	or	r16, r19
    3336:	b1 f0       	breq	.+44     	; 0x3364 <CDC_Device_SendByte+0x4c>
    3338:	c6 2f       	mov	r28, r22
    333a:	81 81       	ldd	r24, Z+1	; 0x01
    333c:	8f 70       	andi	r24, 0x0F	; 15
    333e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3346:	85 ff       	sbrs	r24, 5
    3348:	04 c0       	rjmp	.+8      	; 0x3352 <CDC_Device_SendByte+0x3a>
    334a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	0a c0       	rjmp	.+20     	; 0x3366 <CDC_Device_SendByte+0x4e>
    3352:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3356:	8e 77       	andi	r24, 0x7E	; 126
    3358:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    335c:	7a dc       	rcall	.-1804   	; 0x2c52 <Endpoint_WaitUntilReady>
    335e:	88 23       	and	r24, r24
    3360:	a1 f3       	breq	.-24     	; 0x334a <CDC_Device_SendByte+0x32>
    3362:	01 c0       	rjmp	.+2      	; 0x3366 <CDC_Device_SendByte+0x4e>
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	cf 91       	pop	r28
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	08 95       	ret

0000336e <CDC_Device_putchar>:
    336e:	fb 01       	movw	r30, r22
    3370:	68 2f       	mov	r22, r24
    3372:	84 85       	ldd	r24, Z+12	; 0x0c
    3374:	95 85       	ldd	r25, Z+13	; 0x0d
    3376:	d0 df       	rcall	.-96     	; 0x3318 <CDC_Device_SendByte>
    3378:	21 e0       	ldi	r18, 0x01	; 1
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	81 11       	cpse	r24, r1
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <CDC_Device_putchar+0x16>
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	88 27       	eor	r24, r24
    3386:	99 27       	eor	r25, r25
    3388:	82 1b       	sub	r24, r18
    338a:	93 0b       	sbc	r25, r19
    338c:	08 95       	ret

0000338e <CDC_Device_Flush>:
    338e:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <USB_DeviceState>
    3392:	24 30       	cpi	r18, 0x04	; 4
    3394:	41 f5       	brne	.+80     	; 0x33e6 <CDC_Device_Flush+0x58>
    3396:	fc 01       	movw	r30, r24
    3398:	44 89       	ldd	r20, Z+20	; 0x14
    339a:	55 89       	ldd	r21, Z+21	; 0x15
    339c:	66 89       	ldd	r22, Z+22	; 0x16
    339e:	77 89       	ldd	r23, Z+23	; 0x17
    33a0:	45 2b       	or	r20, r21
    33a2:	46 2b       	or	r20, r22
    33a4:	47 2b       	or	r20, r23
    33a6:	f9 f0       	breq	.+62     	; 0x33e6 <CDC_Device_Flush+0x58>
    33a8:	81 81       	ldd	r24, Z+1	; 0x01
    33aa:	8f 70       	andi	r24, 0x0F	; 15
    33ac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    33b0:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    33b4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	92 2b       	or	r25, r18
    33bc:	89 2b       	or	r24, r25
    33be:	89 f0       	breq	.+34     	; 0x33e2 <CDC_Device_Flush+0x54>
    33c0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33c8:	8e 77       	andi	r24, 0x7E	; 126
    33ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33ce:	95 fd       	sbrc	r25, 5
    33d0:	08 c0       	rjmp	.+16     	; 0x33e2 <CDC_Device_Flush+0x54>
    33d2:	3f dc       	rcall	.-1922   	; 0x2c52 <Endpoint_WaitUntilReady>
    33d4:	81 11       	cpse	r24, r1
    33d6:	08 c0       	rjmp	.+16     	; 0x33e8 <CDC_Device_Flush+0x5a>
    33d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33dc:	8e 77       	andi	r24, 0x7E	; 126
    33de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	08 95       	ret
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	08 95       	ret

000033ea <CDC_Device_USBTask>:
    33ea:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <USB_DeviceState>
    33ee:	24 30       	cpi	r18, 0x04	; 4
    33f0:	89 f4       	brne	.+34     	; 0x3414 <CDC_Device_USBTask+0x2a>
    33f2:	fc 01       	movw	r30, r24
    33f4:	44 89       	ldd	r20, Z+20	; 0x14
    33f6:	55 89       	ldd	r21, Z+21	; 0x15
    33f8:	66 89       	ldd	r22, Z+22	; 0x16
    33fa:	77 89       	ldd	r23, Z+23	; 0x17
    33fc:	45 2b       	or	r20, r21
    33fe:	46 2b       	or	r20, r22
    3400:	47 2b       	or	r20, r23
    3402:	41 f0       	breq	.+16     	; 0x3414 <CDC_Device_USBTask+0x2a>
    3404:	21 81       	ldd	r18, Z+1	; 0x01
    3406:	2f 70       	andi	r18, 0x0F	; 15
    3408:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    340c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3410:	20 fd       	sbrc	r18, 0
    3412:	bd cf       	rjmp	.-134    	; 0x338e <CDC_Device_Flush>
    3414:	08 95       	ret

00003416 <CDC_Device_ReceiveByte>:
    3416:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <USB_DeviceState>
    341a:	24 30       	cpi	r18, 0x04	; 4
    341c:	19 f0       	breq	.+6      	; 0x3424 <CDC_Device_ReceiveByte+0xe>
    341e:	8f ef       	ldi	r24, 0xFF	; 255
    3420:	9f ef       	ldi	r25, 0xFF	; 255
    3422:	08 95       	ret
    3424:	fc 01       	movw	r30, r24
    3426:	44 89       	ldd	r20, Z+20	; 0x14
    3428:	55 89       	ldd	r21, Z+21	; 0x15
    342a:	66 89       	ldd	r22, Z+22	; 0x16
    342c:	77 89       	ldd	r23, Z+23	; 0x17
    342e:	45 2b       	or	r20, r21
    3430:	46 2b       	or	r20, r22
    3432:	47 2b       	or	r20, r23
    3434:	a1 f3       	breq	.-24     	; 0x341e <CDC_Device_ReceiveByte+0x8>
    3436:	86 81       	ldd	r24, Z+6	; 0x06
    3438:	8f 70       	andi	r24, 0x0F	; 15
    343a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    343e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3442:	82 ff       	sbrs	r24, 2
    3444:	ec cf       	rjmp	.-40     	; 0x341e <CDC_Device_ReceiveByte+0x8>
    3446:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    344a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	92 2b       	or	r25, r18
    3452:	89 2b       	or	r24, r25
    3454:	21 f0       	breq	.+8      	; 0x345e <CDC_Device_ReceiveByte+0x48>
    3456:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <CDC_Device_ReceiveByte+0x4c>
    345e:	2f ef       	ldi	r18, 0xFF	; 255
    3460:	3f ef       	ldi	r19, 0xFF	; 255
    3462:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    3466:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	94 2b       	or	r25, r20
    346e:	89 2b       	or	r24, r25
    3470:	29 f4       	brne	.+10     	; 0x347c <CDC_Device_ReceiveByte+0x66>
    3472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3476:	8b 77       	andi	r24, 0x7B	; 123
    3478:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    347c:	c9 01       	movw	r24, r18
    347e:	08 95       	ret

00003480 <CDC_Device_getchar>:
    3480:	fc 01       	movw	r30, r24
    3482:	84 85       	ldd	r24, Z+12	; 0x0c
    3484:	95 85       	ldd	r25, Z+13	; 0x0d
    3486:	c7 df       	rcall	.-114    	; 0x3416 <CDC_Device_ReceiveByte>
    3488:	97 ff       	sbrs	r25, 7
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <CDC_Device_getchar+0x10>
    348c:	8e ef       	ldi	r24, 0xFE	; 254
    348e:	9f ef       	ldi	r25, 0xFF	; 255
    3490:	08 95       	ret

00003492 <CDC_Device_CreateStream>:
    3492:	fb 01       	movw	r30, r22
    3494:	2e e0       	ldi	r18, 0x0E	; 14
    3496:	db 01       	movw	r26, r22
    3498:	1d 92       	st	X+, r1
    349a:	2a 95       	dec	r18
    349c:	e9 f7       	brne	.-6      	; 0x3498 <CDC_Device_CreateStream+0x6>
    349e:	23 e0       	ldi	r18, 0x03	; 3
    34a0:	23 83       	std	Z+3, r18	; 0x03
    34a2:	27 eb       	ldi	r18, 0xB7	; 183
    34a4:	39 e1       	ldi	r19, 0x19	; 25
    34a6:	31 87       	std	Z+9, r19	; 0x09
    34a8:	20 87       	std	Z+8, r18	; 0x08
    34aa:	20 e4       	ldi	r18, 0x40	; 64
    34ac:	3a e1       	ldi	r19, 0x1A	; 26
    34ae:	33 87       	std	Z+11, r19	; 0x0b
    34b0:	22 87       	std	Z+10, r18	; 0x0a
    34b2:	95 87       	std	Z+13, r25	; 0x0d
    34b4:	84 87       	std	Z+12, r24	; 0x0c
    34b6:	08 95       	ret

000034b8 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    34b8:	08 95       	ret

000034ba <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    34c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    34c4:	83 ff       	sbrs	r24, 3
    34c6:	a7 c0       	rjmp	.+334    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    34c8:	88 81       	ld	r24, Y
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	20 91 56 09 	lds	r18, 0x0956	; 0x800956 <USB_ControlRequest+0x4>
    34d0:	30 91 57 09 	lds	r19, 0x0957	; 0x800957 <USB_ControlRequest+0x5>
    34d4:	28 17       	cp	r18, r24
    34d6:	39 07       	cpc	r19, r25
    34d8:	09 f0       	breq	.+2      	; 0x34dc <CDC_Device_ProcessControlRequest+0x22>
    34da:	9d c0       	rjmp	.+314    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
	  return;

	switch (USB_ControlRequest.bRequest)
    34dc:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <USB_ControlRequest+0x1>
    34e0:	81 32       	cpi	r24, 0x21	; 33
    34e2:	61 f0       	breq	.+24     	; 0x34fc <CDC_Device_ProcessControlRequest+0x42>
    34e4:	20 f4       	brcc	.+8      	; 0x34ee <CDC_Device_ProcessControlRequest+0x34>
    34e6:	80 32       	cpi	r24, 0x20	; 32
    34e8:	09 f4       	brne	.+2      	; 0x34ec <CDC_Device_ProcessControlRequest+0x32>
    34ea:	3e c0       	rjmp	.+124    	; 0x3568 <CDC_Device_ProcessControlRequest+0xae>
    34ec:	94 c0       	rjmp	.+296    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
    34ee:	82 32       	cpi	r24, 0x22	; 34
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <CDC_Device_ProcessControlRequest+0x3a>
    34f2:	6c c0       	rjmp	.+216    	; 0x35cc <CDC_Device_ProcessControlRequest+0x112>
    34f4:	83 32       	cpi	r24, 0x23	; 35
    34f6:	09 f4       	brne	.+2      	; 0x34fa <CDC_Device_ProcessControlRequest+0x40>
    34f8:	7e c0       	rjmp	.+252    	; 0x35f6 <CDC_Device_ProcessControlRequest+0x13c>
    34fa:	8d c0       	rjmp	.+282    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    34fc:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <USB_ControlRequest>
    3500:	81 3a       	cpi	r24, 0xA1	; 161
    3502:	09 f0       	breq	.+2      	; 0x3506 <CDC_Device_ProcessControlRequest+0x4c>
    3504:	88 c0       	rjmp	.+272    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3506:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    350a:	87 7f       	andi	r24, 0xF7	; 247
    350c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    3514:	80 ff       	sbrs	r24, 0
    3516:	fc cf       	rjmp	.-8      	; 0x3510 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    3518:	8c 89       	ldd	r24, Y+20	; 0x14
    351a:	9d 89       	ldd	r25, Y+21	; 0x15
    351c:	ae 89       	ldd	r26, Y+22	; 0x16
    351e:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    3520:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    3524:	49 2f       	mov	r20, r25
    3526:	5a 2f       	mov	r21, r26
    3528:	6b 2f       	mov	r22, r27
    352a:	77 27       	eor	r23, r23
    352c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
    3530:	ad 01       	movw	r20, r26
    3532:	66 27       	eor	r22, r22
    3534:	77 27       	eor	r23, r23
    3536:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
    353a:	8b 2f       	mov	r24, r27
    353c:	99 27       	eor	r25, r25
    353e:	aa 27       	eor	r26, r26
    3540:	bb 27       	eor	r27, r27
    3542:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    3546:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3548:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    354c:	89 8d       	ldd	r24, Y+25	; 0x19
    354e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    3552:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3554:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3558:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    355c:	8e 77       	andi	r24, 0x7E	; 126
    355e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    3562:	df 91       	pop	r29
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3564:	cf 91       	pop	r28
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3566:	56 cb       	rjmp	.-2388   	; 0x2c14 <Endpoint_ClearStatusStage>
    3568:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <USB_ControlRequest>
    356c:	81 32       	cpi	r24, 0x21	; 33
    356e:	09 f0       	breq	.+2      	; 0x3572 <CDC_Device_ProcessControlRequest+0xb8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3570:	52 c0       	rjmp	.+164    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
    3572:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3576:	87 7f       	andi	r24, 0xF7	; 247
    3578:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    357c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    3580:	82 fd       	sbrc	r24, 2
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    3582:	05 c0       	rjmp	.+10     	; 0x358e <CDC_Device_ProcessControlRequest+0xd4>
    3584:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <USB_DeviceState>
    3588:	81 11       	cpse	r24, r1
    358a:	f8 cf       	rjmp	.-16     	; 0x357c <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    358c:	44 c0       	rjmp	.+136    	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
    358e:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
    3592:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
    3596:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
    359a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    359e:	3c 8b       	std	Y+20, r19	; 0x14
    35a0:	2d 8b       	std	Y+21, r18	; 0x15
    35a2:	9e 8b       	std	Y+22, r25	; 0x16
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    35a4:	8f 8b       	std	Y+23, r24	; 0x17
    35a6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    35aa:	88 8f       	std	Y+24, r24	; 0x18
    35ac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    35b0:	89 8f       	std	Y+25, r24	; 0x19
    35b2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35b6:	8a 8f       	std	Y+26, r24	; 0x1a
    35b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    35bc:	8b 77       	andi	r24, 0x7B	; 123
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    35be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    35c2:	28 db       	rcall	.-2480   	; 0x2c14 <Endpoint_ClearStatusStage>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    35c4:	ce 01       	movw	r24, r28
    35c6:	df 91       	pop	r29
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    35c8:	cf 91       	pop	r28
    35ca:	76 cf       	rjmp	.-276    	; 0x34b8 <CDC_Device_Event_Stub>
    35cc:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <USB_ControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35d0:	81 32       	cpi	r24, 0x21	; 33
    35d2:	09 f5       	brne	.+66     	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
    35d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    35d8:	87 7f       	andi	r24, 0xF7	; 247
    35da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    35de:	1a db       	rcall	.-2508   	; 0x2c14 <Endpoint_ClearStatusStage>
    35e0:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
    35e4:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <USB_ControlRequest+0x3>

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    35e8:	99 8b       	std	Y+17, r25	; 0x11
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    35ea:	88 8b       	std	Y+16, r24	; 0x10
    35ec:	ce 01       	movw	r24, r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    35f2:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <EVENT_CDC_Device_ControLineStateChanged>
    35f6:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <USB_ControlRequest>
    35fa:	81 32       	cpi	r24, 0x21	; 33
    35fc:	61 f4       	brne	.+24     	; 0x3616 <CDC_Device_ProcessControlRequest+0x15c>
    35fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3602:	87 7f       	andi	r24, 0xF7	; 247

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    3604:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}

			break;
	}
}
    3608:	05 db       	rcall	.-2550   	; 0x2c14 <Endpoint_ClearStatusStage>
    360a:	60 91 54 09 	lds	r22, 0x0954	; 0x800954 <USB_ControlRequest+0x2>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    360e:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	51 cf       	rjmp	.-350    	; 0x34b8 <CDC_Device_Event_Stub>
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	08 95       	ret

0000361c <__subsf3>:
    361c:	50 58       	subi	r21, 0x80	; 128

0000361e <__addsf3>:
    361e:	bb 27       	eor	r27, r27
    3620:	aa 27       	eor	r26, r26
    3622:	0e d0       	rcall	.+28     	; 0x3640 <__addsf3x>
    3624:	75 c1       	rjmp	.+746    	; 0x3910 <__fp_round>
    3626:	66 d1       	rcall	.+716    	; 0x38f4 <__fp_pscA>
    3628:	30 f0       	brcs	.+12     	; 0x3636 <__addsf3+0x18>
    362a:	6b d1       	rcall	.+726    	; 0x3902 <__fp_pscB>
    362c:	20 f0       	brcs	.+8      	; 0x3636 <__addsf3+0x18>
    362e:	31 f4       	brne	.+12     	; 0x363c <__addsf3+0x1e>
    3630:	9f 3f       	cpi	r25, 0xFF	; 255
    3632:	11 f4       	brne	.+4      	; 0x3638 <__addsf3+0x1a>
    3634:	1e f4       	brtc	.+6      	; 0x363c <__addsf3+0x1e>
    3636:	5b c1       	rjmp	.+694    	; 0x38ee <__fp_nan>
    3638:	0e f4       	brtc	.+2      	; 0x363c <__addsf3+0x1e>
    363a:	e0 95       	com	r30
    363c:	e7 fb       	bst	r30, 7
    363e:	51 c1       	rjmp	.+674    	; 0x38e2 <__fp_inf>

00003640 <__addsf3x>:
    3640:	e9 2f       	mov	r30, r25
    3642:	77 d1       	rcall	.+750    	; 0x3932 <__fp_split3>
    3644:	80 f3       	brcs	.-32     	; 0x3626 <__addsf3+0x8>
    3646:	ba 17       	cp	r27, r26
    3648:	62 07       	cpc	r22, r18
    364a:	73 07       	cpc	r23, r19
    364c:	84 07       	cpc	r24, r20
    364e:	95 07       	cpc	r25, r21
    3650:	18 f0       	brcs	.+6      	; 0x3658 <__addsf3x+0x18>
    3652:	71 f4       	brne	.+28     	; 0x3670 <__addsf3x+0x30>
    3654:	9e f5       	brtc	.+102    	; 0x36bc <__addsf3x+0x7c>
    3656:	8f c1       	rjmp	.+798    	; 0x3976 <__fp_zero>
    3658:	0e f4       	brtc	.+2      	; 0x365c <__addsf3x+0x1c>
    365a:	e0 95       	com	r30
    365c:	0b 2e       	mov	r0, r27
    365e:	ba 2f       	mov	r27, r26
    3660:	a0 2d       	mov	r26, r0
    3662:	0b 01       	movw	r0, r22
    3664:	b9 01       	movw	r22, r18
    3666:	90 01       	movw	r18, r0
    3668:	0c 01       	movw	r0, r24
    366a:	ca 01       	movw	r24, r20
    366c:	a0 01       	movw	r20, r0
    366e:	11 24       	eor	r1, r1
    3670:	ff 27       	eor	r31, r31
    3672:	59 1b       	sub	r21, r25
    3674:	99 f0       	breq	.+38     	; 0x369c <__addsf3x+0x5c>
    3676:	59 3f       	cpi	r21, 0xF9	; 249
    3678:	50 f4       	brcc	.+20     	; 0x368e <__addsf3x+0x4e>
    367a:	50 3e       	cpi	r21, 0xE0	; 224
    367c:	68 f1       	brcs	.+90     	; 0x36d8 <__addsf3x+0x98>
    367e:	1a 16       	cp	r1, r26
    3680:	f0 40       	sbci	r31, 0x00	; 0
    3682:	a2 2f       	mov	r26, r18
    3684:	23 2f       	mov	r18, r19
    3686:	34 2f       	mov	r19, r20
    3688:	44 27       	eor	r20, r20
    368a:	58 5f       	subi	r21, 0xF8	; 248
    368c:	f3 cf       	rjmp	.-26     	; 0x3674 <__addsf3x+0x34>
    368e:	46 95       	lsr	r20
    3690:	37 95       	ror	r19
    3692:	27 95       	ror	r18
    3694:	a7 95       	ror	r26
    3696:	f0 40       	sbci	r31, 0x00	; 0
    3698:	53 95       	inc	r21
    369a:	c9 f7       	brne	.-14     	; 0x368e <__addsf3x+0x4e>
    369c:	7e f4       	brtc	.+30     	; 0x36bc <__addsf3x+0x7c>
    369e:	1f 16       	cp	r1, r31
    36a0:	ba 0b       	sbc	r27, r26
    36a2:	62 0b       	sbc	r22, r18
    36a4:	73 0b       	sbc	r23, r19
    36a6:	84 0b       	sbc	r24, r20
    36a8:	ba f0       	brmi	.+46     	; 0x36d8 <__addsf3x+0x98>
    36aa:	91 50       	subi	r25, 0x01	; 1
    36ac:	a1 f0       	breq	.+40     	; 0x36d6 <__addsf3x+0x96>
    36ae:	ff 0f       	add	r31, r31
    36b0:	bb 1f       	adc	r27, r27
    36b2:	66 1f       	adc	r22, r22
    36b4:	77 1f       	adc	r23, r23
    36b6:	88 1f       	adc	r24, r24
    36b8:	c2 f7       	brpl	.-16     	; 0x36aa <__addsf3x+0x6a>
    36ba:	0e c0       	rjmp	.+28     	; 0x36d8 <__addsf3x+0x98>
    36bc:	ba 0f       	add	r27, r26
    36be:	62 1f       	adc	r22, r18
    36c0:	73 1f       	adc	r23, r19
    36c2:	84 1f       	adc	r24, r20
    36c4:	48 f4       	brcc	.+18     	; 0x36d8 <__addsf3x+0x98>
    36c6:	87 95       	ror	r24
    36c8:	77 95       	ror	r23
    36ca:	67 95       	ror	r22
    36cc:	b7 95       	ror	r27
    36ce:	f7 95       	ror	r31
    36d0:	9e 3f       	cpi	r25, 0xFE	; 254
    36d2:	08 f0       	brcs	.+2      	; 0x36d6 <__addsf3x+0x96>
    36d4:	b3 cf       	rjmp	.-154    	; 0x363c <__addsf3+0x1e>
    36d6:	93 95       	inc	r25
    36d8:	88 0f       	add	r24, r24
    36da:	08 f0       	brcs	.+2      	; 0x36de <__addsf3x+0x9e>
    36dc:	99 27       	eor	r25, r25
    36de:	ee 0f       	add	r30, r30
    36e0:	97 95       	ror	r25
    36e2:	87 95       	ror	r24
    36e4:	08 95       	ret

000036e6 <__cmpsf2>:
    36e6:	d9 d0       	rcall	.+434    	; 0x389a <__fp_cmp>
    36e8:	08 f4       	brcc	.+2      	; 0x36ec <__cmpsf2+0x6>
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	08 95       	ret

000036ee <__divsf3>:
    36ee:	0c d0       	rcall	.+24     	; 0x3708 <__divsf3x>
    36f0:	0f c1       	rjmp	.+542    	; 0x3910 <__fp_round>
    36f2:	07 d1       	rcall	.+526    	; 0x3902 <__fp_pscB>
    36f4:	40 f0       	brcs	.+16     	; 0x3706 <__divsf3+0x18>
    36f6:	fe d0       	rcall	.+508    	; 0x38f4 <__fp_pscA>
    36f8:	30 f0       	brcs	.+12     	; 0x3706 <__divsf3+0x18>
    36fa:	21 f4       	brne	.+8      	; 0x3704 <__divsf3+0x16>
    36fc:	5f 3f       	cpi	r21, 0xFF	; 255
    36fe:	19 f0       	breq	.+6      	; 0x3706 <__divsf3+0x18>
    3700:	f0 c0       	rjmp	.+480    	; 0x38e2 <__fp_inf>
    3702:	51 11       	cpse	r21, r1
    3704:	39 c1       	rjmp	.+626    	; 0x3978 <__fp_szero>
    3706:	f3 c0       	rjmp	.+486    	; 0x38ee <__fp_nan>

00003708 <__divsf3x>:
    3708:	14 d1       	rcall	.+552    	; 0x3932 <__fp_split3>
    370a:	98 f3       	brcs	.-26     	; 0x36f2 <__divsf3+0x4>

0000370c <__divsf3_pse>:
    370c:	99 23       	and	r25, r25
    370e:	c9 f3       	breq	.-14     	; 0x3702 <__divsf3+0x14>
    3710:	55 23       	and	r21, r21
    3712:	b1 f3       	breq	.-20     	; 0x3700 <__divsf3+0x12>
    3714:	95 1b       	sub	r25, r21
    3716:	55 0b       	sbc	r21, r21
    3718:	bb 27       	eor	r27, r27
    371a:	aa 27       	eor	r26, r26
    371c:	62 17       	cp	r22, r18
    371e:	73 07       	cpc	r23, r19
    3720:	84 07       	cpc	r24, r20
    3722:	38 f0       	brcs	.+14     	; 0x3732 <__divsf3_pse+0x26>
    3724:	9f 5f       	subi	r25, 0xFF	; 255
    3726:	5f 4f       	sbci	r21, 0xFF	; 255
    3728:	22 0f       	add	r18, r18
    372a:	33 1f       	adc	r19, r19
    372c:	44 1f       	adc	r20, r20
    372e:	aa 1f       	adc	r26, r26
    3730:	a9 f3       	breq	.-22     	; 0x371c <__divsf3_pse+0x10>
    3732:	33 d0       	rcall	.+102    	; 0x379a <__divsf3_pse+0x8e>
    3734:	0e 2e       	mov	r0, r30
    3736:	3a f0       	brmi	.+14     	; 0x3746 <__divsf3_pse+0x3a>
    3738:	e0 e8       	ldi	r30, 0x80	; 128
    373a:	30 d0       	rcall	.+96     	; 0x379c <__divsf3_pse+0x90>
    373c:	91 50       	subi	r25, 0x01	; 1
    373e:	50 40       	sbci	r21, 0x00	; 0
    3740:	e6 95       	lsr	r30
    3742:	00 1c       	adc	r0, r0
    3744:	ca f7       	brpl	.-14     	; 0x3738 <__divsf3_pse+0x2c>
    3746:	29 d0       	rcall	.+82     	; 0x379a <__divsf3_pse+0x8e>
    3748:	fe 2f       	mov	r31, r30
    374a:	27 d0       	rcall	.+78     	; 0x379a <__divsf3_pse+0x8e>
    374c:	66 0f       	add	r22, r22
    374e:	77 1f       	adc	r23, r23
    3750:	88 1f       	adc	r24, r24
    3752:	bb 1f       	adc	r27, r27
    3754:	26 17       	cp	r18, r22
    3756:	37 07       	cpc	r19, r23
    3758:	48 07       	cpc	r20, r24
    375a:	ab 07       	cpc	r26, r27
    375c:	b0 e8       	ldi	r27, 0x80	; 128
    375e:	09 f0       	breq	.+2      	; 0x3762 <__divsf3_pse+0x56>
    3760:	bb 0b       	sbc	r27, r27
    3762:	80 2d       	mov	r24, r0
    3764:	bf 01       	movw	r22, r30
    3766:	ff 27       	eor	r31, r31
    3768:	93 58       	subi	r25, 0x83	; 131
    376a:	5f 4f       	sbci	r21, 0xFF	; 255
    376c:	2a f0       	brmi	.+10     	; 0x3778 <__divsf3_pse+0x6c>
    376e:	9e 3f       	cpi	r25, 0xFE	; 254
    3770:	51 05       	cpc	r21, r1
    3772:	68 f0       	brcs	.+26     	; 0x378e <__divsf3_pse+0x82>
    3774:	b6 c0       	rjmp	.+364    	; 0x38e2 <__fp_inf>
    3776:	00 c1       	rjmp	.+512    	; 0x3978 <__fp_szero>
    3778:	5f 3f       	cpi	r21, 0xFF	; 255
    377a:	ec f3       	brlt	.-6      	; 0x3776 <__divsf3_pse+0x6a>
    377c:	98 3e       	cpi	r25, 0xE8	; 232
    377e:	dc f3       	brlt	.-10     	; 0x3776 <__divsf3_pse+0x6a>
    3780:	86 95       	lsr	r24
    3782:	77 95       	ror	r23
    3784:	67 95       	ror	r22
    3786:	b7 95       	ror	r27
    3788:	f7 95       	ror	r31
    378a:	9f 5f       	subi	r25, 0xFF	; 255
    378c:	c9 f7       	brne	.-14     	; 0x3780 <__divsf3_pse+0x74>
    378e:	88 0f       	add	r24, r24
    3790:	91 1d       	adc	r25, r1
    3792:	96 95       	lsr	r25
    3794:	87 95       	ror	r24
    3796:	97 f9       	bld	r25, 7
    3798:	08 95       	ret
    379a:	e1 e0       	ldi	r30, 0x01	; 1
    379c:	66 0f       	add	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	88 1f       	adc	r24, r24
    37a2:	bb 1f       	adc	r27, r27
    37a4:	62 17       	cp	r22, r18
    37a6:	73 07       	cpc	r23, r19
    37a8:	84 07       	cpc	r24, r20
    37aa:	ba 07       	cpc	r27, r26
    37ac:	20 f0       	brcs	.+8      	; 0x37b6 <__divsf3_pse+0xaa>
    37ae:	62 1b       	sub	r22, r18
    37b0:	73 0b       	sbc	r23, r19
    37b2:	84 0b       	sbc	r24, r20
    37b4:	ba 0b       	sbc	r27, r26
    37b6:	ee 1f       	adc	r30, r30
    37b8:	88 f7       	brcc	.-30     	; 0x379c <__divsf3_pse+0x90>
    37ba:	e0 95       	com	r30
    37bc:	08 95       	ret

000037be <__fixsfsi>:
    37be:	04 d0       	rcall	.+8      	; 0x37c8 <__fixunssfsi>
    37c0:	68 94       	set
    37c2:	b1 11       	cpse	r27, r1
    37c4:	d9 c0       	rjmp	.+434    	; 0x3978 <__fp_szero>
    37c6:	08 95       	ret

000037c8 <__fixunssfsi>:
    37c8:	bc d0       	rcall	.+376    	; 0x3942 <__fp_splitA>
    37ca:	88 f0       	brcs	.+34     	; 0x37ee <__fixunssfsi+0x26>
    37cc:	9f 57       	subi	r25, 0x7F	; 127
    37ce:	90 f0       	brcs	.+36     	; 0x37f4 <__fixunssfsi+0x2c>
    37d0:	b9 2f       	mov	r27, r25
    37d2:	99 27       	eor	r25, r25
    37d4:	b7 51       	subi	r27, 0x17	; 23
    37d6:	a0 f0       	brcs	.+40     	; 0x3800 <__fixunssfsi+0x38>
    37d8:	d1 f0       	breq	.+52     	; 0x380e <__fixunssfsi+0x46>
    37da:	66 0f       	add	r22, r22
    37dc:	77 1f       	adc	r23, r23
    37de:	88 1f       	adc	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	1a f0       	brmi	.+6      	; 0x37ea <__fixunssfsi+0x22>
    37e4:	ba 95       	dec	r27
    37e6:	c9 f7       	brne	.-14     	; 0x37da <__fixunssfsi+0x12>
    37e8:	12 c0       	rjmp	.+36     	; 0x380e <__fixunssfsi+0x46>
    37ea:	b1 30       	cpi	r27, 0x01	; 1
    37ec:	81 f0       	breq	.+32     	; 0x380e <__fixunssfsi+0x46>
    37ee:	c3 d0       	rcall	.+390    	; 0x3976 <__fp_zero>
    37f0:	b1 e0       	ldi	r27, 0x01	; 1
    37f2:	08 95       	ret
    37f4:	c0 c0       	rjmp	.+384    	; 0x3976 <__fp_zero>
    37f6:	67 2f       	mov	r22, r23
    37f8:	78 2f       	mov	r23, r24
    37fa:	88 27       	eor	r24, r24
    37fc:	b8 5f       	subi	r27, 0xF8	; 248
    37fe:	39 f0       	breq	.+14     	; 0x380e <__fixunssfsi+0x46>
    3800:	b9 3f       	cpi	r27, 0xF9	; 249
    3802:	cc f3       	brlt	.-14     	; 0x37f6 <__fixunssfsi+0x2e>
    3804:	86 95       	lsr	r24
    3806:	77 95       	ror	r23
    3808:	67 95       	ror	r22
    380a:	b3 95       	inc	r27
    380c:	d9 f7       	brne	.-10     	; 0x3804 <__fixunssfsi+0x3c>
    380e:	3e f4       	brtc	.+14     	; 0x381e <__fixunssfsi+0x56>
    3810:	90 95       	com	r25
    3812:	80 95       	com	r24
    3814:	70 95       	com	r23
    3816:	61 95       	neg	r22
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	8f 4f       	sbci	r24, 0xFF	; 255
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	08 95       	ret

00003820 <__floatunsisf>:
    3820:	e8 94       	clt
    3822:	09 c0       	rjmp	.+18     	; 0x3836 <__floatsisf+0x12>

00003824 <__floatsisf>:
    3824:	97 fb       	bst	r25, 7
    3826:	3e f4       	brtc	.+14     	; 0x3836 <__floatsisf+0x12>
    3828:	90 95       	com	r25
    382a:	80 95       	com	r24
    382c:	70 95       	com	r23
    382e:	61 95       	neg	r22
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	8f 4f       	sbci	r24, 0xFF	; 255
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	99 23       	and	r25, r25
    3838:	a9 f0       	breq	.+42     	; 0x3864 <__floatsisf+0x40>
    383a:	f9 2f       	mov	r31, r25
    383c:	96 e9       	ldi	r25, 0x96	; 150
    383e:	bb 27       	eor	r27, r27
    3840:	93 95       	inc	r25
    3842:	f6 95       	lsr	r31
    3844:	87 95       	ror	r24
    3846:	77 95       	ror	r23
    3848:	67 95       	ror	r22
    384a:	b7 95       	ror	r27
    384c:	f1 11       	cpse	r31, r1
    384e:	f8 cf       	rjmp	.-16     	; 0x3840 <__floatsisf+0x1c>
    3850:	fa f4       	brpl	.+62     	; 0x3890 <__floatsisf+0x6c>
    3852:	bb 0f       	add	r27, r27
    3854:	11 f4       	brne	.+4      	; 0x385a <__floatsisf+0x36>
    3856:	60 ff       	sbrs	r22, 0
    3858:	1b c0       	rjmp	.+54     	; 0x3890 <__floatsisf+0x6c>
    385a:	6f 5f       	subi	r22, 0xFF	; 255
    385c:	7f 4f       	sbci	r23, 0xFF	; 255
    385e:	8f 4f       	sbci	r24, 0xFF	; 255
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	16 c0       	rjmp	.+44     	; 0x3890 <__floatsisf+0x6c>
    3864:	88 23       	and	r24, r24
    3866:	11 f0       	breq	.+4      	; 0x386c <__floatsisf+0x48>
    3868:	96 e9       	ldi	r25, 0x96	; 150
    386a:	11 c0       	rjmp	.+34     	; 0x388e <__floatsisf+0x6a>
    386c:	77 23       	and	r23, r23
    386e:	21 f0       	breq	.+8      	; 0x3878 <__floatsisf+0x54>
    3870:	9e e8       	ldi	r25, 0x8E	; 142
    3872:	87 2f       	mov	r24, r23
    3874:	76 2f       	mov	r23, r22
    3876:	05 c0       	rjmp	.+10     	; 0x3882 <__floatsisf+0x5e>
    3878:	66 23       	and	r22, r22
    387a:	71 f0       	breq	.+28     	; 0x3898 <__floatsisf+0x74>
    387c:	96 e8       	ldi	r25, 0x86	; 134
    387e:	86 2f       	mov	r24, r22
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	2a f0       	brmi	.+10     	; 0x3890 <__floatsisf+0x6c>
    3886:	9a 95       	dec	r25
    3888:	66 0f       	add	r22, r22
    388a:	77 1f       	adc	r23, r23
    388c:	88 1f       	adc	r24, r24
    388e:	da f7       	brpl	.-10     	; 0x3886 <__floatsisf+0x62>
    3890:	88 0f       	add	r24, r24
    3892:	96 95       	lsr	r25
    3894:	87 95       	ror	r24
    3896:	97 f9       	bld	r25, 7
    3898:	08 95       	ret

0000389a <__fp_cmp>:
    389a:	99 0f       	add	r25, r25
    389c:	00 08       	sbc	r0, r0
    389e:	55 0f       	add	r21, r21
    38a0:	aa 0b       	sbc	r26, r26
    38a2:	e0 e8       	ldi	r30, 0x80	; 128
    38a4:	fe ef       	ldi	r31, 0xFE	; 254
    38a6:	16 16       	cp	r1, r22
    38a8:	17 06       	cpc	r1, r23
    38aa:	e8 07       	cpc	r30, r24
    38ac:	f9 07       	cpc	r31, r25
    38ae:	c0 f0       	brcs	.+48     	; 0x38e0 <__fp_cmp+0x46>
    38b0:	12 16       	cp	r1, r18
    38b2:	13 06       	cpc	r1, r19
    38b4:	e4 07       	cpc	r30, r20
    38b6:	f5 07       	cpc	r31, r21
    38b8:	98 f0       	brcs	.+38     	; 0x38e0 <__fp_cmp+0x46>
    38ba:	62 1b       	sub	r22, r18
    38bc:	73 0b       	sbc	r23, r19
    38be:	84 0b       	sbc	r24, r20
    38c0:	95 0b       	sbc	r25, r21
    38c2:	39 f4       	brne	.+14     	; 0x38d2 <__fp_cmp+0x38>
    38c4:	0a 26       	eor	r0, r26
    38c6:	61 f0       	breq	.+24     	; 0x38e0 <__fp_cmp+0x46>
    38c8:	23 2b       	or	r18, r19
    38ca:	24 2b       	or	r18, r20
    38cc:	25 2b       	or	r18, r21
    38ce:	21 f4       	brne	.+8      	; 0x38d8 <__fp_cmp+0x3e>
    38d0:	08 95       	ret
    38d2:	0a 26       	eor	r0, r26
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <__fp_cmp+0x3e>
    38d6:	a1 40       	sbci	r26, 0x01	; 1
    38d8:	a6 95       	lsr	r26
    38da:	8f ef       	ldi	r24, 0xFF	; 255
    38dc:	81 1d       	adc	r24, r1
    38de:	81 1d       	adc	r24, r1
    38e0:	08 95       	ret

000038e2 <__fp_inf>:
    38e2:	97 f9       	bld	r25, 7
    38e4:	9f 67       	ori	r25, 0x7F	; 127
    38e6:	80 e8       	ldi	r24, 0x80	; 128
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	08 95       	ret

000038ee <__fp_nan>:
    38ee:	9f ef       	ldi	r25, 0xFF	; 255
    38f0:	80 ec       	ldi	r24, 0xC0	; 192
    38f2:	08 95       	ret

000038f4 <__fp_pscA>:
    38f4:	00 24       	eor	r0, r0
    38f6:	0a 94       	dec	r0
    38f8:	16 16       	cp	r1, r22
    38fa:	17 06       	cpc	r1, r23
    38fc:	18 06       	cpc	r1, r24
    38fe:	09 06       	cpc	r0, r25
    3900:	08 95       	ret

00003902 <__fp_pscB>:
    3902:	00 24       	eor	r0, r0
    3904:	0a 94       	dec	r0
    3906:	12 16       	cp	r1, r18
    3908:	13 06       	cpc	r1, r19
    390a:	14 06       	cpc	r1, r20
    390c:	05 06       	cpc	r0, r21
    390e:	08 95       	ret

00003910 <__fp_round>:
    3910:	09 2e       	mov	r0, r25
    3912:	03 94       	inc	r0
    3914:	00 0c       	add	r0, r0
    3916:	11 f4       	brne	.+4      	; 0x391c <__fp_round+0xc>
    3918:	88 23       	and	r24, r24
    391a:	52 f0       	brmi	.+20     	; 0x3930 <__fp_round+0x20>
    391c:	bb 0f       	add	r27, r27
    391e:	40 f4       	brcc	.+16     	; 0x3930 <__fp_round+0x20>
    3920:	bf 2b       	or	r27, r31
    3922:	11 f4       	brne	.+4      	; 0x3928 <__fp_round+0x18>
    3924:	60 ff       	sbrs	r22, 0
    3926:	04 c0       	rjmp	.+8      	; 0x3930 <__fp_round+0x20>
    3928:	6f 5f       	subi	r22, 0xFF	; 255
    392a:	7f 4f       	sbci	r23, 0xFF	; 255
    392c:	8f 4f       	sbci	r24, 0xFF	; 255
    392e:	9f 4f       	sbci	r25, 0xFF	; 255
    3930:	08 95       	ret

00003932 <__fp_split3>:
    3932:	57 fd       	sbrc	r21, 7
    3934:	90 58       	subi	r25, 0x80	; 128
    3936:	44 0f       	add	r20, r20
    3938:	55 1f       	adc	r21, r21
    393a:	59 f0       	breq	.+22     	; 0x3952 <__fp_splitA+0x10>
    393c:	5f 3f       	cpi	r21, 0xFF	; 255
    393e:	71 f0       	breq	.+28     	; 0x395c <__fp_splitA+0x1a>
    3940:	47 95       	ror	r20

00003942 <__fp_splitA>:
    3942:	88 0f       	add	r24, r24
    3944:	97 fb       	bst	r25, 7
    3946:	99 1f       	adc	r25, r25
    3948:	61 f0       	breq	.+24     	; 0x3962 <__fp_splitA+0x20>
    394a:	9f 3f       	cpi	r25, 0xFF	; 255
    394c:	79 f0       	breq	.+30     	; 0x396c <__fp_splitA+0x2a>
    394e:	87 95       	ror	r24
    3950:	08 95       	ret
    3952:	12 16       	cp	r1, r18
    3954:	13 06       	cpc	r1, r19
    3956:	14 06       	cpc	r1, r20
    3958:	55 1f       	adc	r21, r21
    395a:	f2 cf       	rjmp	.-28     	; 0x3940 <__fp_split3+0xe>
    395c:	46 95       	lsr	r20
    395e:	f1 df       	rcall	.-30     	; 0x3942 <__fp_splitA>
    3960:	08 c0       	rjmp	.+16     	; 0x3972 <__fp_splitA+0x30>
    3962:	16 16       	cp	r1, r22
    3964:	17 06       	cpc	r1, r23
    3966:	18 06       	cpc	r1, r24
    3968:	99 1f       	adc	r25, r25
    396a:	f1 cf       	rjmp	.-30     	; 0x394e <__fp_splitA+0xc>
    396c:	86 95       	lsr	r24
    396e:	71 05       	cpc	r23, r1
    3970:	61 05       	cpc	r22, r1
    3972:	08 94       	sec
    3974:	08 95       	ret

00003976 <__fp_zero>:
    3976:	e8 94       	clt

00003978 <__fp_szero>:
    3978:	bb 27       	eor	r27, r27
    397a:	66 27       	eor	r22, r22
    397c:	77 27       	eor	r23, r23
    397e:	cb 01       	movw	r24, r22
    3980:	97 f9       	bld	r25, 7
    3982:	08 95       	ret

00003984 <__gesf2>:
    3984:	8a df       	rcall	.-236    	; 0x389a <__fp_cmp>
    3986:	08 f4       	brcc	.+2      	; 0x398a <__gesf2+0x6>
    3988:	8f ef       	ldi	r24, 0xFF	; 255
    398a:	08 95       	ret
    398c:	0e f0       	brts	.+2      	; 0x3990 <__gesf2+0xc>
    398e:	a6 c0       	rjmp	.+332    	; 0x3adc <__fp_mpack>
    3990:	ae cf       	rjmp	.-164    	; 0x38ee <__fp_nan>
    3992:	68 94       	set
    3994:	a6 cf       	rjmp	.-180    	; 0x38e2 <__fp_inf>

00003996 <log>:
    3996:	d5 df       	rcall	.-86     	; 0x3942 <__fp_splitA>
    3998:	c8 f3       	brcs	.-14     	; 0x398c <__gesf2+0x8>
    399a:	99 23       	and	r25, r25
    399c:	d1 f3       	breq	.-12     	; 0x3992 <__gesf2+0xe>
    399e:	c6 f3       	brts	.-16     	; 0x3990 <__gesf2+0xc>
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	1f 93       	push	r17
    39a6:	0f 93       	push	r16
    39a8:	ff 92       	push	r15
    39aa:	c9 2f       	mov	r28, r25
    39ac:	dd 27       	eor	r29, r29
    39ae:	88 23       	and	r24, r24
    39b0:	2a f0       	brmi	.+10     	; 0x39bc <log+0x26>
    39b2:	21 97       	sbiw	r28, 0x01	; 1
    39b4:	66 0f       	add	r22, r22
    39b6:	77 1f       	adc	r23, r23
    39b8:	88 1f       	adc	r24, r24
    39ba:	da f7       	brpl	.-10     	; 0x39b2 <log+0x1c>
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e8       	ldi	r20, 0x80	; 128
    39c2:	5f eb       	ldi	r21, 0xBF	; 191
    39c4:	9f e3       	ldi	r25, 0x3F	; 63
    39c6:	88 39       	cpi	r24, 0x98	; 152
    39c8:	20 f0       	brcs	.+8      	; 0x39d2 <log+0x3c>
    39ca:	80 3e       	cpi	r24, 0xE0	; 224
    39cc:	30 f0       	brcs	.+12     	; 0x39da <log+0x44>
    39ce:	21 96       	adiw	r28, 0x01	; 1
    39d0:	8f 77       	andi	r24, 0x7F	; 127
    39d2:	25 de       	rcall	.-950    	; 0x361e <__addsf3>
    39d4:	ec ea       	ldi	r30, 0xAC	; 172
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	03 c0       	rjmp	.+6      	; 0x39e0 <log+0x4a>
    39da:	21 de       	rcall	.-958    	; 0x361e <__addsf3>
    39dc:	e9 ed       	ldi	r30, 0xD9	; 217
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	8b d0       	rcall	.+278    	; 0x3af8 <__fp_powser>
    39e2:	8b 01       	movw	r16, r22
    39e4:	be 01       	movw	r22, r28
    39e6:	ec 01       	movw	r28, r24
    39e8:	fb 2e       	mov	r15, r27
    39ea:	6f 57       	subi	r22, 0x7F	; 127
    39ec:	71 09       	sbc	r23, r1
    39ee:	75 95       	asr	r23
    39f0:	77 1f       	adc	r23, r23
    39f2:	88 0b       	sbc	r24, r24
    39f4:	99 0b       	sbc	r25, r25
    39f6:	16 df       	rcall	.-468    	; 0x3824 <__floatsisf>
    39f8:	28 e1       	ldi	r18, 0x18	; 24
    39fa:	32 e7       	ldi	r19, 0x72	; 114
    39fc:	41 e3       	ldi	r20, 0x31	; 49
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	16 d0       	rcall	.+44     	; 0x3a2e <__mulsf3x>
    3a02:	af 2d       	mov	r26, r15
    3a04:	98 01       	movw	r18, r16
    3a06:	ae 01       	movw	r20, r28
    3a08:	ff 90       	pop	r15
    3a0a:	0f 91       	pop	r16
    3a0c:	1f 91       	pop	r17
    3a0e:	cf 91       	pop	r28
    3a10:	df 91       	pop	r29
    3a12:	16 de       	rcall	.-980    	; 0x3640 <__addsf3x>
    3a14:	7d cf       	rjmp	.-262    	; 0x3910 <__fp_round>

00003a16 <__mulsf3>:
    3a16:	0b d0       	rcall	.+22     	; 0x3a2e <__mulsf3x>
    3a18:	7b cf       	rjmp	.-266    	; 0x3910 <__fp_round>
    3a1a:	6c df       	rcall	.-296    	; 0x38f4 <__fp_pscA>
    3a1c:	28 f0       	brcs	.+10     	; 0x3a28 <__mulsf3+0x12>
    3a1e:	71 df       	rcall	.-286    	; 0x3902 <__fp_pscB>
    3a20:	18 f0       	brcs	.+6      	; 0x3a28 <__mulsf3+0x12>
    3a22:	95 23       	and	r25, r21
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <__mulsf3+0x12>
    3a26:	5d cf       	rjmp	.-326    	; 0x38e2 <__fp_inf>
    3a28:	62 cf       	rjmp	.-316    	; 0x38ee <__fp_nan>
    3a2a:	11 24       	eor	r1, r1
    3a2c:	a5 cf       	rjmp	.-182    	; 0x3978 <__fp_szero>

00003a2e <__mulsf3x>:
    3a2e:	81 df       	rcall	.-254    	; 0x3932 <__fp_split3>
    3a30:	a0 f3       	brcs	.-24     	; 0x3a1a <__mulsf3+0x4>

00003a32 <__mulsf3_pse>:
    3a32:	95 9f       	mul	r25, r21
    3a34:	d1 f3       	breq	.-12     	; 0x3a2a <__mulsf3+0x14>
    3a36:	95 0f       	add	r25, r21
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	55 1f       	adc	r21, r21
    3a3c:	62 9f       	mul	r22, r18
    3a3e:	f0 01       	movw	r30, r0
    3a40:	72 9f       	mul	r23, r18
    3a42:	bb 27       	eor	r27, r27
    3a44:	f0 0d       	add	r31, r0
    3a46:	b1 1d       	adc	r27, r1
    3a48:	63 9f       	mul	r22, r19
    3a4a:	aa 27       	eor	r26, r26
    3a4c:	f0 0d       	add	r31, r0
    3a4e:	b1 1d       	adc	r27, r1
    3a50:	aa 1f       	adc	r26, r26
    3a52:	64 9f       	mul	r22, r20
    3a54:	66 27       	eor	r22, r22
    3a56:	b0 0d       	add	r27, r0
    3a58:	a1 1d       	adc	r26, r1
    3a5a:	66 1f       	adc	r22, r22
    3a5c:	82 9f       	mul	r24, r18
    3a5e:	22 27       	eor	r18, r18
    3a60:	b0 0d       	add	r27, r0
    3a62:	a1 1d       	adc	r26, r1
    3a64:	62 1f       	adc	r22, r18
    3a66:	73 9f       	mul	r23, r19
    3a68:	b0 0d       	add	r27, r0
    3a6a:	a1 1d       	adc	r26, r1
    3a6c:	62 1f       	adc	r22, r18
    3a6e:	83 9f       	mul	r24, r19
    3a70:	a0 0d       	add	r26, r0
    3a72:	61 1d       	adc	r22, r1
    3a74:	22 1f       	adc	r18, r18
    3a76:	74 9f       	mul	r23, r20
    3a78:	33 27       	eor	r19, r19
    3a7a:	a0 0d       	add	r26, r0
    3a7c:	61 1d       	adc	r22, r1
    3a7e:	23 1f       	adc	r18, r19
    3a80:	84 9f       	mul	r24, r20
    3a82:	60 0d       	add	r22, r0
    3a84:	21 1d       	adc	r18, r1
    3a86:	82 2f       	mov	r24, r18
    3a88:	76 2f       	mov	r23, r22
    3a8a:	6a 2f       	mov	r22, r26
    3a8c:	11 24       	eor	r1, r1
    3a8e:	9f 57       	subi	r25, 0x7F	; 127
    3a90:	50 40       	sbci	r21, 0x00	; 0
    3a92:	8a f0       	brmi	.+34     	; 0x3ab6 <__mulsf3_pse+0x84>
    3a94:	e1 f0       	breq	.+56     	; 0x3ace <__mulsf3_pse+0x9c>
    3a96:	88 23       	and	r24, r24
    3a98:	4a f0       	brmi	.+18     	; 0x3aac <__mulsf3_pse+0x7a>
    3a9a:	ee 0f       	add	r30, r30
    3a9c:	ff 1f       	adc	r31, r31
    3a9e:	bb 1f       	adc	r27, r27
    3aa0:	66 1f       	adc	r22, r22
    3aa2:	77 1f       	adc	r23, r23
    3aa4:	88 1f       	adc	r24, r24
    3aa6:	91 50       	subi	r25, 0x01	; 1
    3aa8:	50 40       	sbci	r21, 0x00	; 0
    3aaa:	a9 f7       	brne	.-22     	; 0x3a96 <__mulsf3_pse+0x64>
    3aac:	9e 3f       	cpi	r25, 0xFE	; 254
    3aae:	51 05       	cpc	r21, r1
    3ab0:	70 f0       	brcs	.+28     	; 0x3ace <__mulsf3_pse+0x9c>
    3ab2:	17 cf       	rjmp	.-466    	; 0x38e2 <__fp_inf>
    3ab4:	61 cf       	rjmp	.-318    	; 0x3978 <__fp_szero>
    3ab6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ab8:	ec f3       	brlt	.-6      	; 0x3ab4 <__mulsf3_pse+0x82>
    3aba:	98 3e       	cpi	r25, 0xE8	; 232
    3abc:	dc f3       	brlt	.-10     	; 0x3ab4 <__mulsf3_pse+0x82>
    3abe:	86 95       	lsr	r24
    3ac0:	77 95       	ror	r23
    3ac2:	67 95       	ror	r22
    3ac4:	b7 95       	ror	r27
    3ac6:	f7 95       	ror	r31
    3ac8:	e7 95       	ror	r30
    3aca:	9f 5f       	subi	r25, 0xFF	; 255
    3acc:	c1 f7       	brne	.-16     	; 0x3abe <__mulsf3_pse+0x8c>
    3ace:	fe 2b       	or	r31, r30
    3ad0:	88 0f       	add	r24, r24
    3ad2:	91 1d       	adc	r25, r1
    3ad4:	96 95       	lsr	r25
    3ad6:	87 95       	ror	r24
    3ad8:	97 f9       	bld	r25, 7
    3ada:	08 95       	ret

00003adc <__fp_mpack>:
    3adc:	9f 3f       	cpi	r25, 0xFF	; 255
    3ade:	31 f0       	breq	.+12     	; 0x3aec <__fp_mpack_finite+0xc>

00003ae0 <__fp_mpack_finite>:
    3ae0:	91 50       	subi	r25, 0x01	; 1
    3ae2:	20 f4       	brcc	.+8      	; 0x3aec <__fp_mpack_finite+0xc>
    3ae4:	87 95       	ror	r24
    3ae6:	77 95       	ror	r23
    3ae8:	67 95       	ror	r22
    3aea:	b7 95       	ror	r27
    3aec:	88 0f       	add	r24, r24
    3aee:	91 1d       	adc	r25, r1
    3af0:	96 95       	lsr	r25
    3af2:	87 95       	ror	r24
    3af4:	97 f9       	bld	r25, 7
    3af6:	08 95       	ret

00003af8 <__fp_powser>:
    3af8:	df 93       	push	r29
    3afa:	cf 93       	push	r28
    3afc:	1f 93       	push	r17
    3afe:	0f 93       	push	r16
    3b00:	ff 92       	push	r15
    3b02:	ef 92       	push	r14
    3b04:	df 92       	push	r13
    3b06:	7b 01       	movw	r14, r22
    3b08:	8c 01       	movw	r16, r24
    3b0a:	68 94       	set
    3b0c:	05 c0       	rjmp	.+10     	; 0x3b18 <__fp_powser+0x20>
    3b0e:	da 2e       	mov	r13, r26
    3b10:	ef 01       	movw	r28, r30
    3b12:	8d df       	rcall	.-230    	; 0x3a2e <__mulsf3x>
    3b14:	fe 01       	movw	r30, r28
    3b16:	e8 94       	clt
    3b18:	a5 91       	lpm	r26, Z+
    3b1a:	25 91       	lpm	r18, Z+
    3b1c:	35 91       	lpm	r19, Z+
    3b1e:	45 91       	lpm	r20, Z+
    3b20:	55 91       	lpm	r21, Z+
    3b22:	ae f3       	brts	.-22     	; 0x3b0e <__fp_powser+0x16>
    3b24:	ef 01       	movw	r28, r30
    3b26:	8c dd       	rcall	.-1256   	; 0x3640 <__addsf3x>
    3b28:	fe 01       	movw	r30, r28
    3b2a:	97 01       	movw	r18, r14
    3b2c:	a8 01       	movw	r20, r16
    3b2e:	da 94       	dec	r13
    3b30:	79 f7       	brne	.-34     	; 0x3b10 <__fp_powser+0x18>
    3b32:	df 90       	pop	r13
    3b34:	ef 90       	pop	r14
    3b36:	ff 90       	pop	r15
    3b38:	0f 91       	pop	r16
    3b3a:	1f 91       	pop	r17
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <vfprintf>:
    3b42:	a0 e1       	ldi	r26, 0x10	; 16
    3b44:	b0 e0       	ldi	r27, 0x00	; 0
    3b46:	e6 ea       	ldi	r30, 0xA6	; 166
    3b48:	fd e1       	ldi	r31, 0x1D	; 29
    3b4a:	37 c7       	rjmp	.+3694   	; 0x49ba <__prologue_saves__>
    3b4c:	7c 01       	movw	r14, r24
    3b4e:	1b 01       	movw	r2, r22
    3b50:	6a 01       	movw	r12, r20
    3b52:	fc 01       	movw	r30, r24
    3b54:	17 82       	std	Z+7, r1	; 0x07
    3b56:	16 82       	std	Z+6, r1	; 0x06
    3b58:	83 81       	ldd	r24, Z+3	; 0x03
    3b5a:	81 ff       	sbrs	r24, 1
    3b5c:	2b c3       	rjmp	.+1622   	; 0x41b4 <vfprintf+0x672>
    3b5e:	9e 01       	movw	r18, r28
    3b60:	2f 5f       	subi	r18, 0xFF	; 255
    3b62:	3f 4f       	sbci	r19, 0xFF	; 255
    3b64:	39 01       	movw	r6, r18
    3b66:	f7 01       	movw	r30, r14
    3b68:	93 81       	ldd	r25, Z+3	; 0x03
    3b6a:	f1 01       	movw	r30, r2
    3b6c:	93 fd       	sbrc	r25, 3
    3b6e:	85 91       	lpm	r24, Z+
    3b70:	93 ff       	sbrs	r25, 3
    3b72:	81 91       	ld	r24, Z+
    3b74:	1f 01       	movw	r2, r30
    3b76:	88 23       	and	r24, r24
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <vfprintf+0x3a>
    3b7a:	18 c3       	rjmp	.+1584   	; 0x41ac <vfprintf+0x66a>
    3b7c:	85 32       	cpi	r24, 0x25	; 37
    3b7e:	39 f4       	brne	.+14     	; 0x3b8e <vfprintf+0x4c>
    3b80:	93 fd       	sbrc	r25, 3
    3b82:	85 91       	lpm	r24, Z+
    3b84:	93 ff       	sbrs	r25, 3
    3b86:	81 91       	ld	r24, Z+
    3b88:	1f 01       	movw	r2, r30
    3b8a:	85 32       	cpi	r24, 0x25	; 37
    3b8c:	39 f4       	brne	.+14     	; 0x3b9c <vfprintf+0x5a>
    3b8e:	b7 01       	movw	r22, r14
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <fputc>
    3b96:	56 01       	movw	r10, r12
    3b98:	65 01       	movw	r12, r10
    3b9a:	e5 cf       	rjmp	.-54     	; 0x3b66 <vfprintf+0x24>
    3b9c:	10 e0       	ldi	r17, 0x00	; 0
    3b9e:	51 2c       	mov	r5, r1
    3ba0:	91 2c       	mov	r9, r1
    3ba2:	ff e1       	ldi	r31, 0x1F	; 31
    3ba4:	f9 15       	cp	r31, r9
    3ba6:	d8 f0       	brcs	.+54     	; 0x3bde <vfprintf+0x9c>
    3ba8:	8b 32       	cpi	r24, 0x2B	; 43
    3baa:	79 f0       	breq	.+30     	; 0x3bca <vfprintf+0x88>
    3bac:	38 f4       	brcc	.+14     	; 0x3bbc <vfprintf+0x7a>
    3bae:	80 32       	cpi	r24, 0x20	; 32
    3bb0:	79 f0       	breq	.+30     	; 0x3bd0 <vfprintf+0x8e>
    3bb2:	83 32       	cpi	r24, 0x23	; 35
    3bb4:	a1 f4       	brne	.+40     	; 0x3bde <vfprintf+0x9c>
    3bb6:	f9 2d       	mov	r31, r9
    3bb8:	f0 61       	ori	r31, 0x10	; 16
    3bba:	2e c0       	rjmp	.+92     	; 0x3c18 <vfprintf+0xd6>
    3bbc:	8d 32       	cpi	r24, 0x2D	; 45
    3bbe:	61 f0       	breq	.+24     	; 0x3bd8 <vfprintf+0x96>
    3bc0:	80 33       	cpi	r24, 0x30	; 48
    3bc2:	69 f4       	brne	.+26     	; 0x3bde <vfprintf+0x9c>
    3bc4:	29 2d       	mov	r18, r9
    3bc6:	21 60       	ori	r18, 0x01	; 1
    3bc8:	2d c0       	rjmp	.+90     	; 0x3c24 <vfprintf+0xe2>
    3bca:	39 2d       	mov	r19, r9
    3bcc:	32 60       	ori	r19, 0x02	; 2
    3bce:	93 2e       	mov	r9, r19
    3bd0:	89 2d       	mov	r24, r9
    3bd2:	84 60       	ori	r24, 0x04	; 4
    3bd4:	98 2e       	mov	r9, r24
    3bd6:	2a c0       	rjmp	.+84     	; 0x3c2c <vfprintf+0xea>
    3bd8:	e9 2d       	mov	r30, r9
    3bda:	e8 60       	ori	r30, 0x08	; 8
    3bdc:	15 c0       	rjmp	.+42     	; 0x3c08 <vfprintf+0xc6>
    3bde:	97 fc       	sbrc	r9, 7
    3be0:	2d c0       	rjmp	.+90     	; 0x3c3c <vfprintf+0xfa>
    3be2:	20 ed       	ldi	r18, 0xD0	; 208
    3be4:	28 0f       	add	r18, r24
    3be6:	2a 30       	cpi	r18, 0x0A	; 10
    3be8:	88 f4       	brcc	.+34     	; 0x3c0c <vfprintf+0xca>
    3bea:	96 fe       	sbrs	r9, 6
    3bec:	06 c0       	rjmp	.+12     	; 0x3bfa <vfprintf+0xb8>
    3bee:	3a e0       	ldi	r19, 0x0A	; 10
    3bf0:	13 9f       	mul	r17, r19
    3bf2:	20 0d       	add	r18, r0
    3bf4:	11 24       	eor	r1, r1
    3bf6:	12 2f       	mov	r17, r18
    3bf8:	19 c0       	rjmp	.+50     	; 0x3c2c <vfprintf+0xea>
    3bfa:	8a e0       	ldi	r24, 0x0A	; 10
    3bfc:	58 9e       	mul	r5, r24
    3bfe:	20 0d       	add	r18, r0
    3c00:	11 24       	eor	r1, r1
    3c02:	52 2e       	mov	r5, r18
    3c04:	e9 2d       	mov	r30, r9
    3c06:	e0 62       	ori	r30, 0x20	; 32
    3c08:	9e 2e       	mov	r9, r30
    3c0a:	10 c0       	rjmp	.+32     	; 0x3c2c <vfprintf+0xea>
    3c0c:	8e 32       	cpi	r24, 0x2E	; 46
    3c0e:	31 f4       	brne	.+12     	; 0x3c1c <vfprintf+0xda>
    3c10:	96 fc       	sbrc	r9, 6
    3c12:	cc c2       	rjmp	.+1432   	; 0x41ac <vfprintf+0x66a>
    3c14:	f9 2d       	mov	r31, r9
    3c16:	f0 64       	ori	r31, 0x40	; 64
    3c18:	9f 2e       	mov	r9, r31
    3c1a:	08 c0       	rjmp	.+16     	; 0x3c2c <vfprintf+0xea>
    3c1c:	8c 36       	cpi	r24, 0x6C	; 108
    3c1e:	21 f4       	brne	.+8      	; 0x3c28 <vfprintf+0xe6>
    3c20:	29 2d       	mov	r18, r9
    3c22:	20 68       	ori	r18, 0x80	; 128
    3c24:	92 2e       	mov	r9, r18
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <vfprintf+0xea>
    3c28:	88 36       	cpi	r24, 0x68	; 104
    3c2a:	41 f4       	brne	.+16     	; 0x3c3c <vfprintf+0xfa>
    3c2c:	f1 01       	movw	r30, r2
    3c2e:	93 fd       	sbrc	r25, 3
    3c30:	85 91       	lpm	r24, Z+
    3c32:	93 ff       	sbrs	r25, 3
    3c34:	81 91       	ld	r24, Z+
    3c36:	1f 01       	movw	r2, r30
    3c38:	81 11       	cpse	r24, r1
    3c3a:	b3 cf       	rjmp	.-154    	; 0x3ba2 <vfprintf+0x60>
    3c3c:	9b eb       	ldi	r25, 0xBB	; 187
    3c3e:	98 0f       	add	r25, r24
    3c40:	93 30       	cpi	r25, 0x03	; 3
    3c42:	20 f4       	brcc	.+8      	; 0x3c4c <vfprintf+0x10a>
    3c44:	99 2d       	mov	r25, r9
    3c46:	90 61       	ori	r25, 0x10	; 16
    3c48:	80 5e       	subi	r24, 0xE0	; 224
    3c4a:	07 c0       	rjmp	.+14     	; 0x3c5a <vfprintf+0x118>
    3c4c:	9b e9       	ldi	r25, 0x9B	; 155
    3c4e:	98 0f       	add	r25, r24
    3c50:	93 30       	cpi	r25, 0x03	; 3
    3c52:	08 f0       	brcs	.+2      	; 0x3c56 <vfprintf+0x114>
    3c54:	59 c1       	rjmp	.+690    	; 0x3f08 <vfprintf+0x3c6>
    3c56:	99 2d       	mov	r25, r9
    3c58:	9f 7e       	andi	r25, 0xEF	; 239
    3c5a:	96 ff       	sbrs	r25, 6
    3c5c:	16 e0       	ldi	r17, 0x06	; 6
    3c5e:	9f 73       	andi	r25, 0x3F	; 63
    3c60:	99 2e       	mov	r9, r25
    3c62:	85 36       	cpi	r24, 0x65	; 101
    3c64:	19 f4       	brne	.+6      	; 0x3c6c <vfprintf+0x12a>
    3c66:	90 64       	ori	r25, 0x40	; 64
    3c68:	99 2e       	mov	r9, r25
    3c6a:	08 c0       	rjmp	.+16     	; 0x3c7c <vfprintf+0x13a>
    3c6c:	86 36       	cpi	r24, 0x66	; 102
    3c6e:	21 f4       	brne	.+8      	; 0x3c78 <vfprintf+0x136>
    3c70:	39 2f       	mov	r19, r25
    3c72:	30 68       	ori	r19, 0x80	; 128
    3c74:	93 2e       	mov	r9, r19
    3c76:	02 c0       	rjmp	.+4      	; 0x3c7c <vfprintf+0x13a>
    3c78:	11 11       	cpse	r17, r1
    3c7a:	11 50       	subi	r17, 0x01	; 1
    3c7c:	97 fe       	sbrs	r9, 7
    3c7e:	07 c0       	rjmp	.+14     	; 0x3c8e <vfprintf+0x14c>
    3c80:	1c 33       	cpi	r17, 0x3C	; 60
    3c82:	50 f4       	brcc	.+20     	; 0x3c98 <vfprintf+0x156>
    3c84:	44 24       	eor	r4, r4
    3c86:	43 94       	inc	r4
    3c88:	41 0e       	add	r4, r17
    3c8a:	27 e0       	ldi	r18, 0x07	; 7
    3c8c:	0b c0       	rjmp	.+22     	; 0x3ca4 <vfprintf+0x162>
    3c8e:	18 30       	cpi	r17, 0x08	; 8
    3c90:	38 f0       	brcs	.+14     	; 0x3ca0 <vfprintf+0x15e>
    3c92:	27 e0       	ldi	r18, 0x07	; 7
    3c94:	17 e0       	ldi	r17, 0x07	; 7
    3c96:	05 c0       	rjmp	.+10     	; 0x3ca2 <vfprintf+0x160>
    3c98:	27 e0       	ldi	r18, 0x07	; 7
    3c9a:	9c e3       	ldi	r25, 0x3C	; 60
    3c9c:	49 2e       	mov	r4, r25
    3c9e:	02 c0       	rjmp	.+4      	; 0x3ca4 <vfprintf+0x162>
    3ca0:	21 2f       	mov	r18, r17
    3ca2:	41 2c       	mov	r4, r1
    3ca4:	56 01       	movw	r10, r12
    3ca6:	84 e0       	ldi	r24, 0x04	; 4
    3ca8:	a8 0e       	add	r10, r24
    3caa:	b1 1c       	adc	r11, r1
    3cac:	f6 01       	movw	r30, r12
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	93 81       	ldd	r25, Z+3	; 0x03
    3cb6:	04 2d       	mov	r16, r4
    3cb8:	a3 01       	movw	r20, r6
    3cba:	b6 d6       	rcall	.+3436   	; 0x4a28 <__ftoa_engine>
    3cbc:	6c 01       	movw	r12, r24
    3cbe:	f9 81       	ldd	r31, Y+1	; 0x01
    3cc0:	fc 87       	std	Y+12, r31	; 0x0c
    3cc2:	f0 ff       	sbrs	r31, 0
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <vfprintf+0x188>
    3cc6:	f3 ff       	sbrs	r31, 3
    3cc8:	06 c0       	rjmp	.+12     	; 0x3cd6 <vfprintf+0x194>
    3cca:	91 fc       	sbrc	r9, 1
    3ccc:	06 c0       	rjmp	.+12     	; 0x3cda <vfprintf+0x198>
    3cce:	92 fe       	sbrs	r9, 2
    3cd0:	06 c0       	rjmp	.+12     	; 0x3cde <vfprintf+0x19c>
    3cd2:	00 e2       	ldi	r16, 0x20	; 32
    3cd4:	05 c0       	rjmp	.+10     	; 0x3ce0 <vfprintf+0x19e>
    3cd6:	0d e2       	ldi	r16, 0x2D	; 45
    3cd8:	03 c0       	rjmp	.+6      	; 0x3ce0 <vfprintf+0x19e>
    3cda:	0b e2       	ldi	r16, 0x2B	; 43
    3cdc:	01 c0       	rjmp	.+2      	; 0x3ce0 <vfprintf+0x19e>
    3cde:	00 e0       	ldi	r16, 0x00	; 0
    3ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ce2:	8c 70       	andi	r24, 0x0C	; 12
    3ce4:	19 f0       	breq	.+6      	; 0x3cec <vfprintf+0x1aa>
    3ce6:	01 11       	cpse	r16, r1
    3ce8:	43 c2       	rjmp	.+1158   	; 0x4170 <vfprintf+0x62e>
    3cea:	80 c2       	rjmp	.+1280   	; 0x41ec <vfprintf+0x6aa>
    3cec:	97 fe       	sbrs	r9, 7
    3cee:	10 c0       	rjmp	.+32     	; 0x3d10 <vfprintf+0x1ce>
    3cf0:	4c 0c       	add	r4, r12
    3cf2:	fc 85       	ldd	r31, Y+12	; 0x0c
    3cf4:	f4 ff       	sbrs	r31, 4
    3cf6:	04 c0       	rjmp	.+8      	; 0x3d00 <vfprintf+0x1be>
    3cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfa:	81 33       	cpi	r24, 0x31	; 49
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <vfprintf+0x1be>
    3cfe:	4a 94       	dec	r4
    3d00:	14 14       	cp	r1, r4
    3d02:	74 f5       	brge	.+92     	; 0x3d60 <vfprintf+0x21e>
    3d04:	28 e0       	ldi	r18, 0x08	; 8
    3d06:	24 15       	cp	r18, r4
    3d08:	78 f5       	brcc	.+94     	; 0x3d68 <vfprintf+0x226>
    3d0a:	88 e0       	ldi	r24, 0x08	; 8
    3d0c:	48 2e       	mov	r4, r24
    3d0e:	2c c0       	rjmp	.+88     	; 0x3d68 <vfprintf+0x226>
    3d10:	96 fc       	sbrc	r9, 6
    3d12:	2a c0       	rjmp	.+84     	; 0x3d68 <vfprintf+0x226>
    3d14:	81 2f       	mov	r24, r17
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	8c 15       	cp	r24, r12
    3d1a:	9d 05       	cpc	r25, r13
    3d1c:	9c f0       	brlt	.+38     	; 0x3d44 <vfprintf+0x202>
    3d1e:	3c ef       	ldi	r19, 0xFC	; 252
    3d20:	c3 16       	cp	r12, r19
    3d22:	3f ef       	ldi	r19, 0xFF	; 255
    3d24:	d3 06       	cpc	r13, r19
    3d26:	74 f0       	brlt	.+28     	; 0x3d44 <vfprintf+0x202>
    3d28:	89 2d       	mov	r24, r9
    3d2a:	80 68       	ori	r24, 0x80	; 128
    3d2c:	98 2e       	mov	r9, r24
    3d2e:	0a c0       	rjmp	.+20     	; 0x3d44 <vfprintf+0x202>
    3d30:	e2 e0       	ldi	r30, 0x02	; 2
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	ec 0f       	add	r30, r28
    3d36:	fd 1f       	adc	r31, r29
    3d38:	e1 0f       	add	r30, r17
    3d3a:	f1 1d       	adc	r31, r1
    3d3c:	80 81       	ld	r24, Z
    3d3e:	80 33       	cpi	r24, 0x30	; 48
    3d40:	19 f4       	brne	.+6      	; 0x3d48 <vfprintf+0x206>
    3d42:	11 50       	subi	r17, 0x01	; 1
    3d44:	11 11       	cpse	r17, r1
    3d46:	f4 cf       	rjmp	.-24     	; 0x3d30 <vfprintf+0x1ee>
    3d48:	97 fe       	sbrs	r9, 7
    3d4a:	0e c0       	rjmp	.+28     	; 0x3d68 <vfprintf+0x226>
    3d4c:	44 24       	eor	r4, r4
    3d4e:	43 94       	inc	r4
    3d50:	41 0e       	add	r4, r17
    3d52:	81 2f       	mov	r24, r17
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	c8 16       	cp	r12, r24
    3d58:	d9 06       	cpc	r13, r25
    3d5a:	2c f4       	brge	.+10     	; 0x3d66 <vfprintf+0x224>
    3d5c:	1c 19       	sub	r17, r12
    3d5e:	04 c0       	rjmp	.+8      	; 0x3d68 <vfprintf+0x226>
    3d60:	44 24       	eor	r4, r4
    3d62:	43 94       	inc	r4
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <vfprintf+0x226>
    3d66:	10 e0       	ldi	r17, 0x00	; 0
    3d68:	97 fe       	sbrs	r9, 7
    3d6a:	06 c0       	rjmp	.+12     	; 0x3d78 <vfprintf+0x236>
    3d6c:	1c 14       	cp	r1, r12
    3d6e:	1d 04       	cpc	r1, r13
    3d70:	34 f4       	brge	.+12     	; 0x3d7e <vfprintf+0x23c>
    3d72:	c6 01       	movw	r24, r12
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	05 c0       	rjmp	.+10     	; 0x3d82 <vfprintf+0x240>
    3d78:	85 e0       	ldi	r24, 0x05	; 5
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	02 c0       	rjmp	.+4      	; 0x3d82 <vfprintf+0x240>
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	01 11       	cpse	r16, r1
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	11 23       	and	r17, r17
    3d88:	31 f0       	breq	.+12     	; 0x3d96 <vfprintf+0x254>
    3d8a:	21 2f       	mov	r18, r17
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	2f 5f       	subi	r18, 0xFF	; 255
    3d90:	3f 4f       	sbci	r19, 0xFF	; 255
    3d92:	82 0f       	add	r24, r18
    3d94:	93 1f       	adc	r25, r19
    3d96:	25 2d       	mov	r18, r5
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	82 17       	cp	r24, r18
    3d9c:	93 07       	cpc	r25, r19
    3d9e:	14 f4       	brge	.+4      	; 0x3da4 <vfprintf+0x262>
    3da0:	58 1a       	sub	r5, r24
    3da2:	01 c0       	rjmp	.+2      	; 0x3da6 <vfprintf+0x264>
    3da4:	51 2c       	mov	r5, r1
    3da6:	89 2d       	mov	r24, r9
    3da8:	89 70       	andi	r24, 0x09	; 9
    3daa:	41 f4       	brne	.+16     	; 0x3dbc <vfprintf+0x27a>
    3dac:	55 20       	and	r5, r5
    3dae:	31 f0       	breq	.+12     	; 0x3dbc <vfprintf+0x27a>
    3db0:	b7 01       	movw	r22, r14
    3db2:	80 e2       	ldi	r24, 0x20	; 32
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	8d d7       	rcall	.+3866   	; 0x4cd2 <fputc>
    3db8:	5a 94       	dec	r5
    3dba:	f8 cf       	rjmp	.-16     	; 0x3dac <vfprintf+0x26a>
    3dbc:	00 23       	and	r16, r16
    3dbe:	21 f0       	breq	.+8      	; 0x3dc8 <vfprintf+0x286>
    3dc0:	b7 01       	movw	r22, r14
    3dc2:	80 2f       	mov	r24, r16
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	85 d7       	rcall	.+3850   	; 0x4cd2 <fputc>
    3dc8:	93 fc       	sbrc	r9, 3
    3dca:	08 c0       	rjmp	.+16     	; 0x3ddc <vfprintf+0x29a>
    3dcc:	55 20       	and	r5, r5
    3dce:	31 f0       	breq	.+12     	; 0x3ddc <vfprintf+0x29a>
    3dd0:	b7 01       	movw	r22, r14
    3dd2:	80 e3       	ldi	r24, 0x30	; 48
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	7d d7       	rcall	.+3834   	; 0x4cd2 <fputc>
    3dd8:	5a 94       	dec	r5
    3dda:	f8 cf       	rjmp	.-16     	; 0x3dcc <vfprintf+0x28a>
    3ddc:	97 fe       	sbrs	r9, 7
    3dde:	4a c0       	rjmp	.+148    	; 0x3e74 <vfprintf+0x332>
    3de0:	46 01       	movw	r8, r12
    3de2:	d7 fe       	sbrs	r13, 7
    3de4:	02 c0       	rjmp	.+4      	; 0x3dea <vfprintf+0x2a8>
    3de6:	81 2c       	mov	r8, r1
    3de8:	91 2c       	mov	r9, r1
    3dea:	c6 01       	movw	r24, r12
    3dec:	88 19       	sub	r24, r8
    3dee:	99 09       	sbc	r25, r9
    3df0:	f3 01       	movw	r30, r6
    3df2:	e8 0f       	add	r30, r24
    3df4:	f9 1f       	adc	r31, r25
    3df6:	fe 87       	std	Y+14, r31	; 0x0e
    3df8:	ed 87       	std	Y+13, r30	; 0x0d
    3dfa:	96 01       	movw	r18, r12
    3dfc:	24 19       	sub	r18, r4
    3dfe:	31 09       	sbc	r19, r1
    3e00:	38 8b       	std	Y+16, r19	; 0x10
    3e02:	2f 87       	std	Y+15, r18	; 0x0f
    3e04:	01 2f       	mov	r16, r17
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	11 95       	neg	r17
    3e0a:	01 95       	neg	r16
    3e0c:	11 09       	sbc	r17, r1
    3e0e:	3f ef       	ldi	r19, 0xFF	; 255
    3e10:	83 16       	cp	r8, r19
    3e12:	93 06       	cpc	r9, r19
    3e14:	21 f4       	brne	.+8      	; 0x3e1e <vfprintf+0x2dc>
    3e16:	b7 01       	movw	r22, r14
    3e18:	8e e2       	ldi	r24, 0x2E	; 46
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	5a d7       	rcall	.+3764   	; 0x4cd2 <fputc>
    3e1e:	c8 14       	cp	r12, r8
    3e20:	d9 04       	cpc	r13, r9
    3e22:	4c f0       	brlt	.+18     	; 0x3e36 <vfprintf+0x2f4>
    3e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e26:	98 89       	ldd	r25, Y+16	; 0x10
    3e28:	88 15       	cp	r24, r8
    3e2a:	99 05       	cpc	r25, r9
    3e2c:	24 f4       	brge	.+8      	; 0x3e36 <vfprintf+0x2f4>
    3e2e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3e30:	fe 85       	ldd	r31, Y+14	; 0x0e
    3e32:	81 81       	ldd	r24, Z+1	; 0x01
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <vfprintf+0x2f6>
    3e36:	80 e3       	ldi	r24, 0x30	; 48
    3e38:	f1 e0       	ldi	r31, 0x01	; 1
    3e3a:	8f 1a       	sub	r8, r31
    3e3c:	91 08       	sbc	r9, r1
    3e3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e40:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e42:	2f 5f       	subi	r18, 0xFF	; 255
    3e44:	3f 4f       	sbci	r19, 0xFF	; 255
    3e46:	3e 87       	std	Y+14, r19	; 0x0e
    3e48:	2d 87       	std	Y+13, r18	; 0x0d
    3e4a:	80 16       	cp	r8, r16
    3e4c:	91 06       	cpc	r9, r17
    3e4e:	24 f0       	brlt	.+8      	; 0x3e58 <vfprintf+0x316>
    3e50:	b7 01       	movw	r22, r14
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	3e d7       	rcall	.+3708   	; 0x4cd2 <fputc>
    3e56:	db cf       	rjmp	.-74     	; 0x3e0e <vfprintf+0x2cc>
    3e58:	c8 14       	cp	r12, r8
    3e5a:	d9 04       	cpc	r13, r9
    3e5c:	41 f4       	brne	.+16     	; 0x3e6e <vfprintf+0x32c>
    3e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e60:	96 33       	cpi	r25, 0x36	; 54
    3e62:	20 f4       	brcc	.+8      	; 0x3e6c <vfprintf+0x32a>
    3e64:	95 33       	cpi	r25, 0x35	; 53
    3e66:	19 f4       	brne	.+6      	; 0x3e6e <vfprintf+0x32c>
    3e68:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e6a:	34 ff       	sbrs	r19, 4
    3e6c:	81 e3       	ldi	r24, 0x31	; 49
    3e6e:	b7 01       	movw	r22, r14
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	48 c0       	rjmp	.+144    	; 0x3f04 <vfprintf+0x3c2>
    3e74:	8a 81       	ldd	r24, Y+2	; 0x02
    3e76:	81 33       	cpi	r24, 0x31	; 49
    3e78:	19 f0       	breq	.+6      	; 0x3e80 <vfprintf+0x33e>
    3e7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e7c:	9f 7e       	andi	r25, 0xEF	; 239
    3e7e:	9c 87       	std	Y+12, r25	; 0x0c
    3e80:	b7 01       	movw	r22, r14
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	26 d7       	rcall	.+3660   	; 0x4cd2 <fputc>
    3e86:	11 11       	cpse	r17, r1
    3e88:	05 c0       	rjmp	.+10     	; 0x3e94 <vfprintf+0x352>
    3e8a:	94 fc       	sbrc	r9, 4
    3e8c:	16 c0       	rjmp	.+44     	; 0x3eba <vfprintf+0x378>
    3e8e:	85 e6       	ldi	r24, 0x65	; 101
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	15 c0       	rjmp	.+42     	; 0x3ebe <vfprintf+0x37c>
    3e94:	b7 01       	movw	r22, r14
    3e96:	8e e2       	ldi	r24, 0x2E	; 46
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	1b d7       	rcall	.+3638   	; 0x4cd2 <fputc>
    3e9c:	1e 5f       	subi	r17, 0xFE	; 254
    3e9e:	82 e0       	ldi	r24, 0x02	; 2
    3ea0:	01 e0       	ldi	r16, 0x01	; 1
    3ea2:	08 0f       	add	r16, r24
    3ea4:	f3 01       	movw	r30, r6
    3ea6:	e8 0f       	add	r30, r24
    3ea8:	f1 1d       	adc	r31, r1
    3eaa:	80 81       	ld	r24, Z
    3eac:	b7 01       	movw	r22, r14
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	10 d7       	rcall	.+3616   	; 0x4cd2 <fputc>
    3eb2:	80 2f       	mov	r24, r16
    3eb4:	01 13       	cpse	r16, r17
    3eb6:	f4 cf       	rjmp	.-24     	; 0x3ea0 <vfprintf+0x35e>
    3eb8:	e8 cf       	rjmp	.-48     	; 0x3e8a <vfprintf+0x348>
    3eba:	85 e4       	ldi	r24, 0x45	; 69
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	b7 01       	movw	r22, r14
    3ec0:	08 d7       	rcall	.+3600   	; 0x4cd2 <fputc>
    3ec2:	d7 fc       	sbrc	r13, 7
    3ec4:	06 c0       	rjmp	.+12     	; 0x3ed2 <vfprintf+0x390>
    3ec6:	c1 14       	cp	r12, r1
    3ec8:	d1 04       	cpc	r13, r1
    3eca:	41 f4       	brne	.+16     	; 0x3edc <vfprintf+0x39a>
    3ecc:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ece:	e4 ff       	sbrs	r30, 4
    3ed0:	05 c0       	rjmp	.+10     	; 0x3edc <vfprintf+0x39a>
    3ed2:	d1 94       	neg	r13
    3ed4:	c1 94       	neg	r12
    3ed6:	d1 08       	sbc	r13, r1
    3ed8:	8d e2       	ldi	r24, 0x2D	; 45
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <vfprintf+0x39c>
    3edc:	8b e2       	ldi	r24, 0x2B	; 43
    3ede:	b7 01       	movw	r22, r14
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	f7 d6       	rcall	.+3566   	; 0x4cd2 <fputc>
    3ee4:	80 e3       	ldi	r24, 0x30	; 48
    3ee6:	2a e0       	ldi	r18, 0x0A	; 10
    3ee8:	c2 16       	cp	r12, r18
    3eea:	d1 04       	cpc	r13, r1
    3eec:	2c f0       	brlt	.+10     	; 0x3ef8 <vfprintf+0x3b6>
    3eee:	8f 5f       	subi	r24, 0xFF	; 255
    3ef0:	fa e0       	ldi	r31, 0x0A	; 10
    3ef2:	cf 1a       	sub	r12, r31
    3ef4:	d1 08       	sbc	r13, r1
    3ef6:	f7 cf       	rjmp	.-18     	; 0x3ee6 <vfprintf+0x3a4>
    3ef8:	b7 01       	movw	r22, r14
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	ea d6       	rcall	.+3540   	; 0x4cd2 <fputc>
    3efe:	b7 01       	movw	r22, r14
    3f00:	c6 01       	movw	r24, r12
    3f02:	c0 96       	adiw	r24, 0x30	; 48
    3f04:	e6 d6       	rcall	.+3532   	; 0x4cd2 <fputc>
    3f06:	49 c1       	rjmp	.+658    	; 0x419a <vfprintf+0x658>
    3f08:	83 36       	cpi	r24, 0x63	; 99
    3f0a:	31 f0       	breq	.+12     	; 0x3f18 <vfprintf+0x3d6>
    3f0c:	83 37       	cpi	r24, 0x73	; 115
    3f0e:	79 f0       	breq	.+30     	; 0x3f2e <vfprintf+0x3ec>
    3f10:	83 35       	cpi	r24, 0x53	; 83
    3f12:	09 f0       	breq	.+2      	; 0x3f16 <vfprintf+0x3d4>
    3f14:	52 c0       	rjmp	.+164    	; 0x3fba <vfprintf+0x478>
    3f16:	1f c0       	rjmp	.+62     	; 0x3f56 <vfprintf+0x414>
    3f18:	56 01       	movw	r10, r12
    3f1a:	32 e0       	ldi	r19, 0x02	; 2
    3f1c:	a3 0e       	add	r10, r19
    3f1e:	b1 1c       	adc	r11, r1
    3f20:	f6 01       	movw	r30, r12
    3f22:	80 81       	ld	r24, Z
    3f24:	89 83       	std	Y+1, r24	; 0x01
    3f26:	01 e0       	ldi	r16, 0x01	; 1
    3f28:	10 e0       	ldi	r17, 0x00	; 0
    3f2a:	63 01       	movw	r12, r6
    3f2c:	11 c0       	rjmp	.+34     	; 0x3f50 <vfprintf+0x40e>
    3f2e:	56 01       	movw	r10, r12
    3f30:	f2 e0       	ldi	r31, 0x02	; 2
    3f32:	af 0e       	add	r10, r31
    3f34:	b1 1c       	adc	r11, r1
    3f36:	f6 01       	movw	r30, r12
    3f38:	c0 80       	ld	r12, Z
    3f3a:	d1 80       	ldd	r13, Z+1	; 0x01
    3f3c:	96 fe       	sbrs	r9, 6
    3f3e:	03 c0       	rjmp	.+6      	; 0x3f46 <vfprintf+0x404>
    3f40:	61 2f       	mov	r22, r17
    3f42:	70 e0       	ldi	r23, 0x00	; 0
    3f44:	02 c0       	rjmp	.+4      	; 0x3f4a <vfprintf+0x408>
    3f46:	6f ef       	ldi	r22, 0xFF	; 255
    3f48:	7f ef       	ldi	r23, 0xFF	; 255
    3f4a:	c6 01       	movw	r24, r12
    3f4c:	79 d6       	rcall	.+3314   	; 0x4c40 <strnlen>
    3f4e:	8c 01       	movw	r16, r24
    3f50:	f9 2d       	mov	r31, r9
    3f52:	ff 77       	andi	r31, 0x7F	; 127
    3f54:	13 c0       	rjmp	.+38     	; 0x3f7c <vfprintf+0x43a>
    3f56:	56 01       	movw	r10, r12
    3f58:	22 e0       	ldi	r18, 0x02	; 2
    3f5a:	a2 0e       	add	r10, r18
    3f5c:	b1 1c       	adc	r11, r1
    3f5e:	f6 01       	movw	r30, r12
    3f60:	c0 80       	ld	r12, Z
    3f62:	d1 80       	ldd	r13, Z+1	; 0x01
    3f64:	96 fe       	sbrs	r9, 6
    3f66:	03 c0       	rjmp	.+6      	; 0x3f6e <vfprintf+0x42c>
    3f68:	61 2f       	mov	r22, r17
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	02 c0       	rjmp	.+4      	; 0x3f72 <vfprintf+0x430>
    3f6e:	6f ef       	ldi	r22, 0xFF	; 255
    3f70:	7f ef       	ldi	r23, 0xFF	; 255
    3f72:	c6 01       	movw	r24, r12
    3f74:	4c d6       	rcall	.+3224   	; 0x4c0e <strnlen_P>
    3f76:	8c 01       	movw	r16, r24
    3f78:	f9 2d       	mov	r31, r9
    3f7a:	f0 68       	ori	r31, 0x80	; 128
    3f7c:	9f 2e       	mov	r9, r31
    3f7e:	f3 fd       	sbrc	r31, 3
    3f80:	18 c0       	rjmp	.+48     	; 0x3fb2 <vfprintf+0x470>
    3f82:	85 2d       	mov	r24, r5
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	08 17       	cp	r16, r24
    3f88:	19 07       	cpc	r17, r25
    3f8a:	98 f4       	brcc	.+38     	; 0x3fb2 <vfprintf+0x470>
    3f8c:	b7 01       	movw	r22, r14
    3f8e:	80 e2       	ldi	r24, 0x20	; 32
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	9f d6       	rcall	.+3390   	; 0x4cd2 <fputc>
    3f94:	5a 94       	dec	r5
    3f96:	f5 cf       	rjmp	.-22     	; 0x3f82 <vfprintf+0x440>
    3f98:	f6 01       	movw	r30, r12
    3f9a:	97 fc       	sbrc	r9, 7
    3f9c:	85 91       	lpm	r24, Z+
    3f9e:	97 fe       	sbrs	r9, 7
    3fa0:	81 91       	ld	r24, Z+
    3fa2:	6f 01       	movw	r12, r30
    3fa4:	b7 01       	movw	r22, r14
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	94 d6       	rcall	.+3368   	; 0x4cd2 <fputc>
    3faa:	51 10       	cpse	r5, r1
    3fac:	5a 94       	dec	r5
    3fae:	01 50       	subi	r16, 0x01	; 1
    3fb0:	11 09       	sbc	r17, r1
    3fb2:	01 15       	cp	r16, r1
    3fb4:	11 05       	cpc	r17, r1
    3fb6:	81 f7       	brne	.-32     	; 0x3f98 <vfprintf+0x456>
    3fb8:	f0 c0       	rjmp	.+480    	; 0x419a <vfprintf+0x658>
    3fba:	84 36       	cpi	r24, 0x64	; 100
    3fbc:	11 f0       	breq	.+4      	; 0x3fc2 <vfprintf+0x480>
    3fbe:	89 36       	cpi	r24, 0x69	; 105
    3fc0:	59 f5       	brne	.+86     	; 0x4018 <vfprintf+0x4d6>
    3fc2:	56 01       	movw	r10, r12
    3fc4:	97 fe       	sbrs	r9, 7
    3fc6:	09 c0       	rjmp	.+18     	; 0x3fda <vfprintf+0x498>
    3fc8:	24 e0       	ldi	r18, 0x04	; 4
    3fca:	a2 0e       	add	r10, r18
    3fcc:	b1 1c       	adc	r11, r1
    3fce:	f6 01       	movw	r30, r12
    3fd0:	60 81       	ld	r22, Z
    3fd2:	71 81       	ldd	r23, Z+1	; 0x01
    3fd4:	82 81       	ldd	r24, Z+2	; 0x02
    3fd6:	93 81       	ldd	r25, Z+3	; 0x03
    3fd8:	0a c0       	rjmp	.+20     	; 0x3fee <vfprintf+0x4ac>
    3fda:	f2 e0       	ldi	r31, 0x02	; 2
    3fdc:	af 0e       	add	r10, r31
    3fde:	b1 1c       	adc	r11, r1
    3fe0:	f6 01       	movw	r30, r12
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	07 2e       	mov	r0, r23
    3fe8:	00 0c       	add	r0, r0
    3fea:	88 0b       	sbc	r24, r24
    3fec:	99 0b       	sbc	r25, r25
    3fee:	f9 2d       	mov	r31, r9
    3ff0:	ff 76       	andi	r31, 0x6F	; 111
    3ff2:	9f 2e       	mov	r9, r31
    3ff4:	97 ff       	sbrs	r25, 7
    3ff6:	09 c0       	rjmp	.+18     	; 0x400a <vfprintf+0x4c8>
    3ff8:	90 95       	com	r25
    3ffa:	80 95       	com	r24
    3ffc:	70 95       	com	r23
    3ffe:	61 95       	neg	r22
    4000:	7f 4f       	sbci	r23, 0xFF	; 255
    4002:	8f 4f       	sbci	r24, 0xFF	; 255
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	f0 68       	ori	r31, 0x80	; 128
    4008:	9f 2e       	mov	r9, r31
    400a:	2a e0       	ldi	r18, 0x0A	; 10
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	a3 01       	movw	r20, r6
    4010:	d5 d6       	rcall	.+3498   	; 0x4dbc <__ultoa_invert>
    4012:	c8 2e       	mov	r12, r24
    4014:	c6 18       	sub	r12, r6
    4016:	3e c0       	rjmp	.+124    	; 0x4094 <vfprintf+0x552>
    4018:	09 2d       	mov	r16, r9
    401a:	85 37       	cpi	r24, 0x75	; 117
    401c:	21 f4       	brne	.+8      	; 0x4026 <vfprintf+0x4e4>
    401e:	0f 7e       	andi	r16, 0xEF	; 239
    4020:	2a e0       	ldi	r18, 0x0A	; 10
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	1d c0       	rjmp	.+58     	; 0x4060 <vfprintf+0x51e>
    4026:	09 7f       	andi	r16, 0xF9	; 249
    4028:	8f 36       	cpi	r24, 0x6F	; 111
    402a:	91 f0       	breq	.+36     	; 0x4050 <vfprintf+0x50e>
    402c:	18 f4       	brcc	.+6      	; 0x4034 <vfprintf+0x4f2>
    402e:	88 35       	cpi	r24, 0x58	; 88
    4030:	59 f0       	breq	.+22     	; 0x4048 <vfprintf+0x506>
    4032:	bc c0       	rjmp	.+376    	; 0x41ac <vfprintf+0x66a>
    4034:	80 37       	cpi	r24, 0x70	; 112
    4036:	19 f0       	breq	.+6      	; 0x403e <vfprintf+0x4fc>
    4038:	88 37       	cpi	r24, 0x78	; 120
    403a:	11 f0       	breq	.+4      	; 0x4040 <vfprintf+0x4fe>
    403c:	b7 c0       	rjmp	.+366    	; 0x41ac <vfprintf+0x66a>
    403e:	00 61       	ori	r16, 0x10	; 16
    4040:	04 ff       	sbrs	r16, 4
    4042:	09 c0       	rjmp	.+18     	; 0x4056 <vfprintf+0x514>
    4044:	04 60       	ori	r16, 0x04	; 4
    4046:	07 c0       	rjmp	.+14     	; 0x4056 <vfprintf+0x514>
    4048:	94 fe       	sbrs	r9, 4
    404a:	08 c0       	rjmp	.+16     	; 0x405c <vfprintf+0x51a>
    404c:	06 60       	ori	r16, 0x06	; 6
    404e:	06 c0       	rjmp	.+12     	; 0x405c <vfprintf+0x51a>
    4050:	28 e0       	ldi	r18, 0x08	; 8
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	05 c0       	rjmp	.+10     	; 0x4060 <vfprintf+0x51e>
    4056:	20 e1       	ldi	r18, 0x10	; 16
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	02 c0       	rjmp	.+4      	; 0x4060 <vfprintf+0x51e>
    405c:	20 e1       	ldi	r18, 0x10	; 16
    405e:	32 e0       	ldi	r19, 0x02	; 2
    4060:	56 01       	movw	r10, r12
    4062:	07 ff       	sbrs	r16, 7
    4064:	09 c0       	rjmp	.+18     	; 0x4078 <vfprintf+0x536>
    4066:	84 e0       	ldi	r24, 0x04	; 4
    4068:	a8 0e       	add	r10, r24
    406a:	b1 1c       	adc	r11, r1
    406c:	f6 01       	movw	r30, r12
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	08 c0       	rjmp	.+16     	; 0x4088 <vfprintf+0x546>
    4078:	f2 e0       	ldi	r31, 0x02	; 2
    407a:	af 0e       	add	r10, r31
    407c:	b1 1c       	adc	r11, r1
    407e:	f6 01       	movw	r30, r12
    4080:	60 81       	ld	r22, Z
    4082:	71 81       	ldd	r23, Z+1	; 0x01
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	a3 01       	movw	r20, r6
    408a:	98 d6       	rcall	.+3376   	; 0x4dbc <__ultoa_invert>
    408c:	c8 2e       	mov	r12, r24
    408e:	c6 18       	sub	r12, r6
    4090:	0f 77       	andi	r16, 0x7F	; 127
    4092:	90 2e       	mov	r9, r16
    4094:	96 fe       	sbrs	r9, 6
    4096:	0b c0       	rjmp	.+22     	; 0x40ae <vfprintf+0x56c>
    4098:	09 2d       	mov	r16, r9
    409a:	0e 7f       	andi	r16, 0xFE	; 254
    409c:	c1 16       	cp	r12, r17
    409e:	50 f4       	brcc	.+20     	; 0x40b4 <vfprintf+0x572>
    40a0:	94 fe       	sbrs	r9, 4
    40a2:	0a c0       	rjmp	.+20     	; 0x40b8 <vfprintf+0x576>
    40a4:	92 fc       	sbrc	r9, 2
    40a6:	08 c0       	rjmp	.+16     	; 0x40b8 <vfprintf+0x576>
    40a8:	09 2d       	mov	r16, r9
    40aa:	0e 7e       	andi	r16, 0xEE	; 238
    40ac:	05 c0       	rjmp	.+10     	; 0x40b8 <vfprintf+0x576>
    40ae:	dc 2c       	mov	r13, r12
    40b0:	09 2d       	mov	r16, r9
    40b2:	03 c0       	rjmp	.+6      	; 0x40ba <vfprintf+0x578>
    40b4:	dc 2c       	mov	r13, r12
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <vfprintf+0x578>
    40b8:	d1 2e       	mov	r13, r17
    40ba:	04 ff       	sbrs	r16, 4
    40bc:	0d c0       	rjmp	.+26     	; 0x40d8 <vfprintf+0x596>
    40be:	fe 01       	movw	r30, r28
    40c0:	ec 0d       	add	r30, r12
    40c2:	f1 1d       	adc	r31, r1
    40c4:	80 81       	ld	r24, Z
    40c6:	80 33       	cpi	r24, 0x30	; 48
    40c8:	11 f4       	brne	.+4      	; 0x40ce <vfprintf+0x58c>
    40ca:	09 7e       	andi	r16, 0xE9	; 233
    40cc:	09 c0       	rjmp	.+18     	; 0x40e0 <vfprintf+0x59e>
    40ce:	02 ff       	sbrs	r16, 2
    40d0:	06 c0       	rjmp	.+12     	; 0x40de <vfprintf+0x59c>
    40d2:	d3 94       	inc	r13
    40d4:	d3 94       	inc	r13
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <vfprintf+0x59e>
    40d8:	80 2f       	mov	r24, r16
    40da:	86 78       	andi	r24, 0x86	; 134
    40dc:	09 f0       	breq	.+2      	; 0x40e0 <vfprintf+0x59e>
    40de:	d3 94       	inc	r13
    40e0:	03 fd       	sbrc	r16, 3
    40e2:	10 c0       	rjmp	.+32     	; 0x4104 <vfprintf+0x5c2>
    40e4:	00 ff       	sbrs	r16, 0
    40e6:	06 c0       	rjmp	.+12     	; 0x40f4 <vfprintf+0x5b2>
    40e8:	1c 2d       	mov	r17, r12
    40ea:	d5 14       	cp	r13, r5
    40ec:	78 f4       	brcc	.+30     	; 0x410c <vfprintf+0x5ca>
    40ee:	15 0d       	add	r17, r5
    40f0:	1d 19       	sub	r17, r13
    40f2:	0c c0       	rjmp	.+24     	; 0x410c <vfprintf+0x5ca>
    40f4:	d5 14       	cp	r13, r5
    40f6:	50 f4       	brcc	.+20     	; 0x410c <vfprintf+0x5ca>
    40f8:	b7 01       	movw	r22, r14
    40fa:	80 e2       	ldi	r24, 0x20	; 32
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	e9 d5       	rcall	.+3026   	; 0x4cd2 <fputc>
    4100:	d3 94       	inc	r13
    4102:	f8 cf       	rjmp	.-16     	; 0x40f4 <vfprintf+0x5b2>
    4104:	d5 14       	cp	r13, r5
    4106:	10 f4       	brcc	.+4      	; 0x410c <vfprintf+0x5ca>
    4108:	5d 18       	sub	r5, r13
    410a:	01 c0       	rjmp	.+2      	; 0x410e <vfprintf+0x5cc>
    410c:	51 2c       	mov	r5, r1
    410e:	04 ff       	sbrs	r16, 4
    4110:	0f c0       	rjmp	.+30     	; 0x4130 <vfprintf+0x5ee>
    4112:	b7 01       	movw	r22, r14
    4114:	80 e3       	ldi	r24, 0x30	; 48
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	dc d5       	rcall	.+3000   	; 0x4cd2 <fputc>
    411a:	02 ff       	sbrs	r16, 2
    411c:	16 c0       	rjmp	.+44     	; 0x414a <vfprintf+0x608>
    411e:	01 fd       	sbrc	r16, 1
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <vfprintf+0x5e6>
    4122:	88 e7       	ldi	r24, 0x78	; 120
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	02 c0       	rjmp	.+4      	; 0x412c <vfprintf+0x5ea>
    4128:	88 e5       	ldi	r24, 0x58	; 88
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	b7 01       	movw	r22, r14
    412e:	0c c0       	rjmp	.+24     	; 0x4148 <vfprintf+0x606>
    4130:	80 2f       	mov	r24, r16
    4132:	86 78       	andi	r24, 0x86	; 134
    4134:	51 f0       	breq	.+20     	; 0x414a <vfprintf+0x608>
    4136:	01 ff       	sbrs	r16, 1
    4138:	02 c0       	rjmp	.+4      	; 0x413e <vfprintf+0x5fc>
    413a:	8b e2       	ldi	r24, 0x2B	; 43
    413c:	01 c0       	rjmp	.+2      	; 0x4140 <vfprintf+0x5fe>
    413e:	80 e2       	ldi	r24, 0x20	; 32
    4140:	07 fd       	sbrc	r16, 7
    4142:	8d e2       	ldi	r24, 0x2D	; 45
    4144:	b7 01       	movw	r22, r14
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	c4 d5       	rcall	.+2952   	; 0x4cd2 <fputc>
    414a:	c1 16       	cp	r12, r17
    414c:	30 f4       	brcc	.+12     	; 0x415a <vfprintf+0x618>
    414e:	b7 01       	movw	r22, r14
    4150:	80 e3       	ldi	r24, 0x30	; 48
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	be d5       	rcall	.+2940   	; 0x4cd2 <fputc>
    4156:	11 50       	subi	r17, 0x01	; 1
    4158:	f8 cf       	rjmp	.-16     	; 0x414a <vfprintf+0x608>
    415a:	ca 94       	dec	r12
    415c:	f3 01       	movw	r30, r6
    415e:	ec 0d       	add	r30, r12
    4160:	f1 1d       	adc	r31, r1
    4162:	80 81       	ld	r24, Z
    4164:	b7 01       	movw	r22, r14
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	b4 d5       	rcall	.+2920   	; 0x4cd2 <fputc>
    416a:	c1 10       	cpse	r12, r1
    416c:	f6 cf       	rjmp	.-20     	; 0x415a <vfprintf+0x618>
    416e:	15 c0       	rjmp	.+42     	; 0x419a <vfprintf+0x658>
    4170:	f4 e0       	ldi	r31, 0x04	; 4
    4172:	f5 15       	cp	r31, r5
    4174:	50 f5       	brcc	.+84     	; 0x41ca <vfprintf+0x688>
    4176:	84 e0       	ldi	r24, 0x04	; 4
    4178:	58 1a       	sub	r5, r24
    417a:	93 fe       	sbrs	r9, 3
    417c:	1e c0       	rjmp	.+60     	; 0x41ba <vfprintf+0x678>
    417e:	01 11       	cpse	r16, r1
    4180:	25 c0       	rjmp	.+74     	; 0x41cc <vfprintf+0x68a>
    4182:	2c 85       	ldd	r18, Y+12	; 0x0c
    4184:	23 ff       	sbrs	r18, 3
    4186:	27 c0       	rjmp	.+78     	; 0x41d6 <vfprintf+0x694>
    4188:	06 e0       	ldi	r16, 0x06	; 6
    418a:	11 e0       	ldi	r17, 0x01	; 1
    418c:	39 2d       	mov	r19, r9
    418e:	30 71       	andi	r19, 0x10	; 16
    4190:	93 2e       	mov	r9, r19
    4192:	f8 01       	movw	r30, r16
    4194:	84 91       	lpm	r24, Z
    4196:	81 11       	cpse	r24, r1
    4198:	21 c0       	rjmp	.+66     	; 0x41dc <vfprintf+0x69a>
    419a:	55 20       	and	r5, r5
    419c:	09 f4       	brne	.+2      	; 0x41a0 <vfprintf+0x65e>
    419e:	fc cc       	rjmp	.-1544   	; 0x3b98 <vfprintf+0x56>
    41a0:	b7 01       	movw	r22, r14
    41a2:	80 e2       	ldi	r24, 0x20	; 32
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	95 d5       	rcall	.+2858   	; 0x4cd2 <fputc>
    41a8:	5a 94       	dec	r5
    41aa:	f7 cf       	rjmp	.-18     	; 0x419a <vfprintf+0x658>
    41ac:	f7 01       	movw	r30, r14
    41ae:	86 81       	ldd	r24, Z+6	; 0x06
    41b0:	97 81       	ldd	r25, Z+7	; 0x07
    41b2:	23 c0       	rjmp	.+70     	; 0x41fa <vfprintf+0x6b8>
    41b4:	8f ef       	ldi	r24, 0xFF	; 255
    41b6:	9f ef       	ldi	r25, 0xFF	; 255
    41b8:	20 c0       	rjmp	.+64     	; 0x41fa <vfprintf+0x6b8>
    41ba:	b7 01       	movw	r22, r14
    41bc:	80 e2       	ldi	r24, 0x20	; 32
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	88 d5       	rcall	.+2832   	; 0x4cd2 <fputc>
    41c2:	5a 94       	dec	r5
    41c4:	51 10       	cpse	r5, r1
    41c6:	f9 cf       	rjmp	.-14     	; 0x41ba <vfprintf+0x678>
    41c8:	da cf       	rjmp	.-76     	; 0x417e <vfprintf+0x63c>
    41ca:	51 2c       	mov	r5, r1
    41cc:	b7 01       	movw	r22, r14
    41ce:	80 2f       	mov	r24, r16
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	7f d5       	rcall	.+2814   	; 0x4cd2 <fputc>
    41d4:	d6 cf       	rjmp	.-84     	; 0x4182 <vfprintf+0x640>
    41d6:	0a e0       	ldi	r16, 0x0A	; 10
    41d8:	11 e0       	ldi	r17, 0x01	; 1
    41da:	d8 cf       	rjmp	.-80     	; 0x418c <vfprintf+0x64a>
    41dc:	91 10       	cpse	r9, r1
    41de:	80 52       	subi	r24, 0x20	; 32
    41e0:	b7 01       	movw	r22, r14
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	76 d5       	rcall	.+2796   	; 0x4cd2 <fputc>
    41e6:	0f 5f       	subi	r16, 0xFF	; 255
    41e8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ea:	d3 cf       	rjmp	.-90     	; 0x4192 <vfprintf+0x650>
    41ec:	23 e0       	ldi	r18, 0x03	; 3
    41ee:	25 15       	cp	r18, r5
    41f0:	10 f4       	brcc	.+4      	; 0x41f6 <vfprintf+0x6b4>
    41f2:	83 e0       	ldi	r24, 0x03	; 3
    41f4:	c1 cf       	rjmp	.-126    	; 0x4178 <vfprintf+0x636>
    41f6:	51 2c       	mov	r5, r1
    41f8:	c4 cf       	rjmp	.-120    	; 0x4182 <vfprintf+0x640>
    41fa:	60 96       	adiw	r28, 0x10	; 16
    41fc:	e2 e1       	ldi	r30, 0x12	; 18
    41fe:	f9 c3       	rjmp	.+2034   	; 0x49f2 <__epilogue_restores__>

00004200 <putval>:
    4200:	20 fd       	sbrc	r18, 0
    4202:	09 c0       	rjmp	.+18     	; 0x4216 <putval+0x16>
    4204:	fc 01       	movw	r30, r24
    4206:	23 fd       	sbrc	r18, 3
    4208:	05 c0       	rjmp	.+10     	; 0x4214 <putval+0x14>
    420a:	22 ff       	sbrs	r18, 2
    420c:	02 c0       	rjmp	.+4      	; 0x4212 <putval+0x12>
    420e:	73 83       	std	Z+3, r23	; 0x03
    4210:	62 83       	std	Z+2, r22	; 0x02
    4212:	51 83       	std	Z+1, r21	; 0x01
    4214:	40 83       	st	Z, r20
    4216:	08 95       	ret

00004218 <mulacc>:
    4218:	44 fd       	sbrc	r20, 4
    421a:	17 c0       	rjmp	.+46     	; 0x424a <mulacc+0x32>
    421c:	46 fd       	sbrc	r20, 6
    421e:	17 c0       	rjmp	.+46     	; 0x424e <mulacc+0x36>
    4220:	ab 01       	movw	r20, r22
    4222:	bc 01       	movw	r22, r24
    4224:	da 01       	movw	r26, r20
    4226:	fb 01       	movw	r30, r22
    4228:	aa 0f       	add	r26, r26
    422a:	bb 1f       	adc	r27, r27
    422c:	ee 1f       	adc	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	10 94       	com	r1
    4232:	d1 f7       	brne	.-12     	; 0x4228 <mulacc+0x10>
    4234:	4a 0f       	add	r20, r26
    4236:	5b 1f       	adc	r21, r27
    4238:	6e 1f       	adc	r22, r30
    423a:	7f 1f       	adc	r23, r31
    423c:	cb 01       	movw	r24, r22
    423e:	ba 01       	movw	r22, r20
    4240:	66 0f       	add	r22, r22
    4242:	77 1f       	adc	r23, r23
    4244:	88 1f       	adc	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	09 c0       	rjmp	.+18     	; 0x425c <mulacc+0x44>
    424a:	33 e0       	ldi	r19, 0x03	; 3
    424c:	01 c0       	rjmp	.+2      	; 0x4250 <mulacc+0x38>
    424e:	34 e0       	ldi	r19, 0x04	; 4
    4250:	66 0f       	add	r22, r22
    4252:	77 1f       	adc	r23, r23
    4254:	88 1f       	adc	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	31 50       	subi	r19, 0x01	; 1
    425a:	d1 f7       	brne	.-12     	; 0x4250 <mulacc+0x38>
    425c:	62 0f       	add	r22, r18
    425e:	71 1d       	adc	r23, r1
    4260:	81 1d       	adc	r24, r1
    4262:	91 1d       	adc	r25, r1
    4264:	08 95       	ret

00004266 <skip_spaces>:
    4266:	0f 93       	push	r16
    4268:	1f 93       	push	r17
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	8c 01       	movw	r16, r24
    4270:	c8 01       	movw	r24, r16
    4272:	f1 d4       	rcall	.+2530   	; 0x4c56 <fgetc>
    4274:	ec 01       	movw	r28, r24
    4276:	97 fd       	sbrc	r25, 7
    4278:	06 c0       	rjmp	.+12     	; 0x4286 <skip_spaces+0x20>
    427a:	ae d4       	rcall	.+2396   	; 0x4bd8 <isspace>
    427c:	89 2b       	or	r24, r25
    427e:	c1 f7       	brne	.-16     	; 0x4270 <skip_spaces+0xa>
    4280:	b8 01       	movw	r22, r16
    4282:	ce 01       	movw	r24, r28
    4284:	82 d5       	rcall	.+2820   	; 0x4d8a <ungetc>
    4286:	ce 01       	movw	r24, r28
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	1f 91       	pop	r17
    428e:	0f 91       	pop	r16
    4290:	08 95       	ret

00004292 <conv_int>:
    4292:	a0 e0       	ldi	r26, 0x00	; 0
    4294:	b0 e0       	ldi	r27, 0x00	; 0
    4296:	ee e4       	ldi	r30, 0x4E	; 78
    4298:	f1 e2       	ldi	r31, 0x21	; 33
    429a:	95 c3       	rjmp	.+1834   	; 0x49c6 <__prologue_saves__+0xc>
    429c:	7c 01       	movw	r14, r24
    429e:	8b 01       	movw	r16, r22
    42a0:	6a 01       	movw	r12, r20
    42a2:	d2 2f       	mov	r29, r18
    42a4:	d8 d4       	rcall	.+2480   	; 0x4c56 <fgetc>
    42a6:	9c 01       	movw	r18, r24
    42a8:	33 27       	eor	r19, r19
    42aa:	2b 32       	cpi	r18, 0x2B	; 43
    42ac:	31 05       	cpc	r19, r1
    42ae:	21 f0       	breq	.+8      	; 0x42b8 <conv_int+0x26>
    42b0:	2d 32       	cpi	r18, 0x2D	; 45
    42b2:	31 05       	cpc	r19, r1
    42b4:	51 f4       	brne	.+20     	; 0x42ca <conv_int+0x38>
    42b6:	d0 68       	ori	r29, 0x80	; 128
    42b8:	01 50       	subi	r16, 0x01	; 1
    42ba:	11 09       	sbc	r17, r1
    42bc:	11 f4       	brne	.+4      	; 0x42c2 <conv_int+0x30>
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	64 c0       	rjmp	.+200    	; 0x438a <conv_int+0xf8>
    42c2:	c7 01       	movw	r24, r14
    42c4:	c8 d4       	rcall	.+2448   	; 0x4c56 <fgetc>
    42c6:	97 fd       	sbrc	r25, 7
    42c8:	fa cf       	rjmp	.-12     	; 0x42be <conv_int+0x2c>
    42ca:	cd 2f       	mov	r28, r29
    42cc:	cd 7f       	andi	r28, 0xFD	; 253
    42ce:	2d 2f       	mov	r18, r29
    42d0:	20 73       	andi	r18, 0x30	; 48
    42d2:	09 f5       	brne	.+66     	; 0x4316 <conv_int+0x84>
    42d4:	80 33       	cpi	r24, 0x30	; 48
    42d6:	f9 f4       	brne	.+62     	; 0x4316 <conv_int+0x84>
    42d8:	58 01       	movw	r10, r16
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	a8 1a       	sub	r10, r24
    42de:	b1 08       	sbc	r11, r1
    42e0:	09 f4       	brne	.+2      	; 0x42e4 <conv_int+0x52>
    42e2:	40 c0       	rjmp	.+128    	; 0x4364 <conv_int+0xd2>
    42e4:	c7 01       	movw	r24, r14
    42e6:	b7 d4       	rcall	.+2414   	; 0x4c56 <fgetc>
    42e8:	97 fd       	sbrc	r25, 7
    42ea:	3c c0       	rjmp	.+120    	; 0x4364 <conv_int+0xd2>
    42ec:	9c 01       	movw	r18, r24
    42ee:	2f 7d       	andi	r18, 0xDF	; 223
    42f0:	33 27       	eor	r19, r19
    42f2:	28 35       	cpi	r18, 0x58	; 88
    42f4:	31 05       	cpc	r19, r1
    42f6:	49 f4       	brne	.+18     	; 0x430a <conv_int+0x78>
    42f8:	c2 64       	ori	r28, 0x42	; 66
    42fa:	02 50       	subi	r16, 0x02	; 2
    42fc:	11 09       	sbc	r17, r1
    42fe:	91 f1       	breq	.+100    	; 0x4364 <conv_int+0xd2>
    4300:	c7 01       	movw	r24, r14
    4302:	a9 d4       	rcall	.+2386   	; 0x4c56 <fgetc>
    4304:	97 ff       	sbrs	r25, 7
    4306:	07 c0       	rjmp	.+14     	; 0x4316 <conv_int+0x84>
    4308:	2d c0       	rjmp	.+90     	; 0x4364 <conv_int+0xd2>
    430a:	d6 ff       	sbrs	r29, 6
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <conv_int+0x80>
    430e:	c2 60       	ori	r28, 0x02	; 2
    4310:	01 c0       	rjmp	.+2      	; 0x4314 <conv_int+0x82>
    4312:	c2 61       	ori	r28, 0x12	; 18
    4314:	85 01       	movw	r16, r10
    4316:	81 2c       	mov	r8, r1
    4318:	91 2c       	mov	r9, r1
    431a:	54 01       	movw	r10, r8
    431c:	20 ed       	ldi	r18, 0xD0	; 208
    431e:	28 0f       	add	r18, r24
    4320:	28 30       	cpi	r18, 0x08	; 8
    4322:	78 f0       	brcs	.+30     	; 0x4342 <conv_int+0xb0>
    4324:	c4 ff       	sbrs	r28, 4
    4326:	03 c0       	rjmp	.+6      	; 0x432e <conv_int+0x9c>
    4328:	b7 01       	movw	r22, r14
    432a:	2f d5       	rcall	.+2654   	; 0x4d8a <ungetc>
    432c:	18 c0       	rjmp	.+48     	; 0x435e <conv_int+0xcc>
    432e:	2a 30       	cpi	r18, 0x0A	; 10
    4330:	40 f0       	brcs	.+16     	; 0x4342 <conv_int+0xb0>
    4332:	c6 ff       	sbrs	r28, 6
    4334:	f9 cf       	rjmp	.-14     	; 0x4328 <conv_int+0x96>
    4336:	2f 7d       	andi	r18, 0xDF	; 223
    4338:	3f ee       	ldi	r19, 0xEF	; 239
    433a:	32 0f       	add	r19, r18
    433c:	36 30       	cpi	r19, 0x06	; 6
    433e:	a0 f7       	brcc	.-24     	; 0x4328 <conv_int+0x96>
    4340:	27 50       	subi	r18, 0x07	; 7
    4342:	4c 2f       	mov	r20, r28
    4344:	c5 01       	movw	r24, r10
    4346:	b4 01       	movw	r22, r8
    4348:	67 df       	rcall	.-306    	; 0x4218 <mulacc>
    434a:	4b 01       	movw	r8, r22
    434c:	5c 01       	movw	r10, r24
    434e:	c2 60       	ori	r28, 0x02	; 2
    4350:	01 50       	subi	r16, 0x01	; 1
    4352:	11 09       	sbc	r17, r1
    4354:	51 f0       	breq	.+20     	; 0x436a <conv_int+0xd8>
    4356:	c7 01       	movw	r24, r14
    4358:	7e d4       	rcall	.+2300   	; 0x4c56 <fgetc>
    435a:	97 ff       	sbrs	r25, 7
    435c:	df cf       	rjmp	.-66     	; 0x431c <conv_int+0x8a>
    435e:	c1 fd       	sbrc	r28, 1
    4360:	04 c0       	rjmp	.+8      	; 0x436a <conv_int+0xd8>
    4362:	ad cf       	rjmp	.-166    	; 0x42be <conv_int+0x2c>
    4364:	81 2c       	mov	r8, r1
    4366:	91 2c       	mov	r9, r1
    4368:	54 01       	movw	r10, r8
    436a:	c7 ff       	sbrs	r28, 7
    436c:	08 c0       	rjmp	.+16     	; 0x437e <conv_int+0xec>
    436e:	b0 94       	com	r11
    4370:	a0 94       	com	r10
    4372:	90 94       	com	r9
    4374:	80 94       	com	r8
    4376:	81 1c       	adc	r8, r1
    4378:	91 1c       	adc	r9, r1
    437a:	a1 1c       	adc	r10, r1
    437c:	b1 1c       	adc	r11, r1
    437e:	2c 2f       	mov	r18, r28
    4380:	b5 01       	movw	r22, r10
    4382:	a4 01       	movw	r20, r8
    4384:	c6 01       	movw	r24, r12
    4386:	3c df       	rcall	.-392    	; 0x4200 <putval>
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    438e:	ec e0       	ldi	r30, 0x0C	; 12
    4390:	36 c3       	rjmp	.+1644   	; 0x49fe <__epilogue_restores__+0xc>

00004392 <conv_brk>:
    4392:	a0 e2       	ldi	r26, 0x20	; 32
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	ee ec       	ldi	r30, 0xCE	; 206
    4398:	f1 e2       	ldi	r31, 0x21	; 33
    439a:	11 c3       	rjmp	.+1570   	; 0x49be <__prologue_saves__+0x4>
    439c:	5c 01       	movw	r10, r24
    439e:	4b 01       	movw	r8, r22
    43a0:	7a 01       	movw	r14, r20
    43a2:	8e 01       	movw	r16, r28
    43a4:	0f 5f       	subi	r16, 0xFF	; 255
    43a6:	1f 4f       	sbci	r17, 0xFF	; 255
    43a8:	68 01       	movw	r12, r16
    43aa:	80 e2       	ldi	r24, 0x20	; 32
    43ac:	f8 01       	movw	r30, r16
    43ae:	11 92       	st	Z+, r1
    43b0:	8a 95       	dec	r24
    43b2:	e9 f7       	brne	.-6      	; 0x43ae <conv_brk+0x1c>
    43b4:	f5 01       	movw	r30, r10
    43b6:	53 80       	ldd	r5, Z+3	; 0x03
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	61 2c       	mov	r6, r1
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	71 2c       	mov	r7, r1
    43c2:	a1 e0       	ldi	r26, 0x01	; 1
    43c4:	b0 e0       	ldi	r27, 0x00	; 0
    43c6:	f9 01       	movw	r30, r18
    43c8:	53 fc       	sbrc	r5, 3
    43ca:	85 91       	lpm	r24, Z+
    43cc:	53 fe       	sbrs	r5, 3
    43ce:	81 91       	ld	r24, Z+
    43d0:	8f 01       	movw	r16, r30
    43d2:	48 2e       	mov	r4, r24
    43d4:	9f 01       	movw	r18, r30
    43d6:	81 11       	cpse	r24, r1
    43d8:	03 c0       	rjmp	.+6      	; 0x43e0 <conv_brk+0x4e>
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	94 c0       	rjmp	.+296    	; 0x4508 <conv_brk+0x176>
    43e0:	8e 35       	cpi	r24, 0x5E	; 94
    43e2:	19 f4       	brne	.+6      	; 0x43ea <conv_brk+0x58>
    43e4:	41 15       	cp	r20, r1
    43e6:	51 05       	cpc	r21, r1
    43e8:	51 f1       	breq	.+84     	; 0x443e <conv_brk+0xac>
    43ea:	67 2d       	mov	r22, r7
    43ec:	70 e0       	ldi	r23, 0x00	; 0
    43ee:	64 17       	cp	r22, r20
    43f0:	75 07       	cpc	r23, r21
    43f2:	3c f4       	brge	.+14     	; 0x4402 <conv_brk+0x70>
    43f4:	8d 35       	cpi	r24, 0x5D	; 93
    43f6:	61 f1       	breq	.+88     	; 0x4450 <conv_brk+0xbe>
    43f8:	8d 32       	cpi	r24, 0x2D	; 45
    43fa:	19 f4       	brne	.+6      	; 0x4402 <conv_brk+0x70>
    43fc:	99 23       	and	r25, r25
    43fe:	11 f1       	breq	.+68     	; 0x4444 <conv_brk+0xb2>
    4400:	03 c0       	rjmp	.+6      	; 0x4408 <conv_brk+0x76>
    4402:	99 23       	and	r25, r25
    4404:	09 f4       	brne	.+2      	; 0x4408 <conv_brk+0x76>
    4406:	6b c0       	rjmp	.+214    	; 0x44de <conv_brk+0x14c>
    4408:	84 2d       	mov	r24, r4
    440a:	86 95       	lsr	r24
    440c:	86 95       	lsr	r24
    440e:	86 95       	lsr	r24
    4410:	f6 01       	movw	r30, r12
    4412:	e8 0f       	add	r30, r24
    4414:	f1 1d       	adc	r31, r1
    4416:	84 2d       	mov	r24, r4
    4418:	87 70       	andi	r24, 0x07	; 7
    441a:	8d 01       	movw	r16, r26
    441c:	02 c0       	rjmp	.+4      	; 0x4422 <conv_brk+0x90>
    441e:	00 0f       	add	r16, r16
    4420:	11 1f       	adc	r17, r17
    4422:	8a 95       	dec	r24
    4424:	e2 f7       	brpl	.-8      	; 0x441e <conv_brk+0x8c>
    4426:	c8 01       	movw	r24, r16
    4428:	90 81       	ld	r25, Z
    442a:	89 2b       	or	r24, r25
    442c:	80 83       	st	Z, r24
    442e:	64 14       	cp	r6, r4
    4430:	59 f0       	breq	.+22     	; 0x4448 <conv_brk+0xb6>
    4432:	46 14       	cp	r4, r6
    4434:	10 f4       	brcc	.+4      	; 0x443a <conv_brk+0xa8>
    4436:	43 94       	inc	r4
    4438:	e7 cf       	rjmp	.-50     	; 0x4408 <conv_brk+0x76>
    443a:	4a 94       	dec	r4
    443c:	e5 cf       	rjmp	.-54     	; 0x4408 <conv_brk+0x76>
    443e:	77 24       	eor	r7, r7
    4440:	73 94       	inc	r7
    4442:	03 c0       	rjmp	.+6      	; 0x444a <conv_brk+0xb8>
    4444:	91 e0       	ldi	r25, 0x01	; 1
    4446:	01 c0       	rjmp	.+2      	; 0x444a <conv_brk+0xb8>
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	4f 5f       	subi	r20, 0xFF	; 255
    444c:	5f 4f       	sbci	r21, 0xFF	; 255
    444e:	bb cf       	rjmp	.-138    	; 0x43c6 <conv_brk+0x34>
    4450:	99 23       	and	r25, r25
    4452:	19 f0       	breq	.+6      	; 0x445a <conv_brk+0xc8>
    4454:	8e 81       	ldd	r24, Y+6	; 0x06
    4456:	80 62       	ori	r24, 0x20	; 32
    4458:	8e 83       	std	Y+6, r24	; 0x06
    445a:	71 10       	cpse	r7, r1
    445c:	03 c0       	rjmp	.+6      	; 0x4464 <conv_brk+0xd2>
    445e:	77 24       	eor	r7, r7
    4460:	73 94       	inc	r7
    4462:	19 c0       	rjmp	.+50     	; 0x4496 <conv_brk+0x104>
    4464:	f6 01       	movw	r30, r12
    4466:	9e 01       	movw	r18, r28
    4468:	2f 5d       	subi	r18, 0xDF	; 223
    446a:	3f 4f       	sbci	r19, 0xFF	; 255
    446c:	80 81       	ld	r24, Z
    446e:	80 95       	com	r24
    4470:	81 93       	st	Z+, r24
    4472:	2e 17       	cp	r18, r30
    4474:	3f 07       	cpc	r19, r31
    4476:	d1 f7       	brne	.-12     	; 0x446c <conv_brk+0xda>
    4478:	f2 cf       	rjmp	.-28     	; 0x445e <conv_brk+0xcc>
    447a:	e1 14       	cp	r14, r1
    447c:	f1 04       	cpc	r15, r1
    447e:	31 f0       	breq	.+12     	; 0x448c <conv_brk+0xfa>
    4480:	f7 01       	movw	r30, r14
    4482:	80 83       	st	Z, r24
    4484:	b7 01       	movw	r22, r14
    4486:	6f 5f       	subi	r22, 0xFF	; 255
    4488:	7f 4f       	sbci	r23, 0xFF	; 255
    448a:	7b 01       	movw	r14, r22
    448c:	71 e0       	ldi	r23, 0x01	; 1
    448e:	87 1a       	sub	r8, r23
    4490:	91 08       	sbc	r9, r1
    4492:	71 2c       	mov	r7, r1
    4494:	e9 f0       	breq	.+58     	; 0x44d0 <conv_brk+0x13e>
    4496:	c5 01       	movw	r24, r10
    4498:	de d3       	rcall	.+1980   	; 0x4c56 <fgetc>
    449a:	97 fd       	sbrc	r25, 7
    449c:	17 c0       	rjmp	.+46     	; 0x44cc <conv_brk+0x13a>
    449e:	fc 01       	movw	r30, r24
    44a0:	ff 27       	eor	r31, r31
    44a2:	23 e0       	ldi	r18, 0x03	; 3
    44a4:	f5 95       	asr	r31
    44a6:	e7 95       	ror	r30
    44a8:	2a 95       	dec	r18
    44aa:	e1 f7       	brne	.-8      	; 0x44a4 <conv_brk+0x112>
    44ac:	ec 0d       	add	r30, r12
    44ae:	fd 1d       	adc	r31, r13
    44b0:	20 81       	ld	r18, Z
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	ac 01       	movw	r20, r24
    44b6:	47 70       	andi	r20, 0x07	; 7
    44b8:	55 27       	eor	r21, r21
    44ba:	02 c0       	rjmp	.+4      	; 0x44c0 <conv_brk+0x12e>
    44bc:	35 95       	asr	r19
    44be:	27 95       	ror	r18
    44c0:	4a 95       	dec	r20
    44c2:	e2 f7       	brpl	.-8      	; 0x44bc <conv_brk+0x12a>
    44c4:	20 fd       	sbrc	r18, 0
    44c6:	d9 cf       	rjmp	.-78     	; 0x447a <conv_brk+0xe8>
    44c8:	b5 01       	movw	r22, r10
    44ca:	5f d4       	rcall	.+2238   	; 0x4d8a <ungetc>
    44cc:	71 10       	cpse	r7, r1
    44ce:	85 cf       	rjmp	.-246    	; 0x43da <conv_brk+0x48>
    44d0:	e1 14       	cp	r14, r1
    44d2:	f1 04       	cpc	r15, r1
    44d4:	11 f0       	breq	.+4      	; 0x44da <conv_brk+0x148>
    44d6:	f7 01       	movw	r30, r14
    44d8:	10 82       	st	Z, r1
    44da:	c8 01       	movw	r24, r16
    44dc:	15 c0       	rjmp	.+42     	; 0x4508 <conv_brk+0x176>
    44de:	68 2f       	mov	r22, r24
    44e0:	66 95       	lsr	r22
    44e2:	66 95       	lsr	r22
    44e4:	66 95       	lsr	r22
    44e6:	f6 01       	movw	r30, r12
    44e8:	e6 0f       	add	r30, r22
    44ea:	f1 1d       	adc	r31, r1
    44ec:	68 2f       	mov	r22, r24
    44ee:	67 70       	andi	r22, 0x07	; 7
    44f0:	8d 01       	movw	r16, r26
    44f2:	02 c0       	rjmp	.+4      	; 0x44f8 <conv_brk+0x166>
    44f4:	00 0f       	add	r16, r16
    44f6:	11 1f       	adc	r17, r17
    44f8:	6a 95       	dec	r22
    44fa:	e2 f7       	brpl	.-8      	; 0x44f4 <conv_brk+0x162>
    44fc:	b8 01       	movw	r22, r16
    44fe:	70 81       	ld	r23, Z
    4500:	67 2b       	or	r22, r23
    4502:	60 83       	st	Z, r22
    4504:	68 2e       	mov	r6, r24
    4506:	a1 cf       	rjmp	.-190    	; 0x444a <conv_brk+0xb8>
    4508:	a0 96       	adiw	r28, 0x20	; 32
    450a:	e0 e1       	ldi	r30, 0x10	; 16
    450c:	74 c2       	rjmp	.+1256   	; 0x49f6 <__epilogue_restores__+0x4>

0000450e <conv_flt>:
    450e:	2f 92       	push	r2
    4510:	3f 92       	push	r3
    4512:	4f 92       	push	r4
    4514:	5f 92       	push	r5
    4516:	6f 92       	push	r6
    4518:	7f 92       	push	r7
    451a:	9f 92       	push	r9
    451c:	af 92       	push	r10
    451e:	bf 92       	push	r11
    4520:	cf 92       	push	r12
    4522:	df 92       	push	r13
    4524:	ef 92       	push	r14
    4526:	ff 92       	push	r15
    4528:	0f 93       	push	r16
    452a:	1f 93       	push	r17
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	6c 01       	movw	r12, r24
    4532:	8b 01       	movw	r16, r22
    4534:	1a 01       	movw	r2, r20
    4536:	8f d3       	rcall	.+1822   	; 0x4c56 <fgetc>
    4538:	ec 01       	movw	r28, r24
    453a:	99 27       	eor	r25, r25
    453c:	8b 32       	cpi	r24, 0x2B	; 43
    453e:	91 05       	cpc	r25, r1
    4540:	29 f0       	breq	.+10     	; 0x454c <conv_flt+0x3e>
    4542:	8d 97       	sbiw	r24, 0x2d	; 45
    4544:	79 f4       	brne	.+30     	; 0x4564 <conv_flt+0x56>
    4546:	30 e8       	ldi	r19, 0x80	; 128
    4548:	93 2e       	mov	r9, r19
    454a:	01 c0       	rjmp	.+2      	; 0x454e <conv_flt+0x40>
    454c:	91 2c       	mov	r9, r1
    454e:	01 50       	subi	r16, 0x01	; 1
    4550:	11 09       	sbc	r17, r1
    4552:	11 f4       	brne	.+4      	; 0x4558 <conv_flt+0x4a>
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	fe c0       	rjmp	.+508    	; 0x4754 <conv_flt+0x246>
    4558:	c6 01       	movw	r24, r12
    455a:	7d d3       	rcall	.+1786   	; 0x4c56 <fgetc>
    455c:	ec 01       	movw	r28, r24
    455e:	97 ff       	sbrs	r25, 7
    4560:	02 c0       	rjmp	.+4      	; 0x4566 <conv_flt+0x58>
    4562:	f8 cf       	rjmp	.-16     	; 0x4554 <conv_flt+0x46>
    4564:	91 2c       	mov	r9, r1
    4566:	ce 01       	movw	r24, r28
    4568:	3f d3       	rcall	.+1662   	; 0x4be8 <tolower>
    456a:	89 36       	cpi	r24, 0x69	; 105
    456c:	91 05       	cpc	r25, r1
    456e:	31 f0       	breq	.+12     	; 0x457c <conv_flt+0x6e>
    4570:	8e 36       	cpi	r24, 0x6E	; 110
    4572:	91 05       	cpc	r25, r1
    4574:	81 f5       	brne	.+96     	; 0x45d6 <conv_flt+0xc8>
    4576:	c2 e8       	ldi	r28, 0x82	; 130
    4578:	df e0       	ldi	r29, 0x0F	; 15
    457a:	02 c0       	rjmp	.+4      	; 0x4580 <conv_flt+0x72>
    457c:	c5 e8       	ldi	r28, 0x85	; 133
    457e:	df e0       	ldi	r29, 0x0F	; 15
    4580:	21 96       	adiw	r28, 0x01	; 1
    4582:	fe 01       	movw	r30, r28
    4584:	31 97       	sbiw	r30, 0x01	; 1
    4586:	b4 90       	lpm	r11, Z
    4588:	bb 20       	and	r11, r11
    458a:	b1 f0       	breq	.+44     	; 0x45b8 <conv_flt+0xaa>
    458c:	01 50       	subi	r16, 0x01	; 1
    458e:	11 09       	sbc	r17, r1
    4590:	79 f0       	breq	.+30     	; 0x45b0 <conv_flt+0xa2>
    4592:	c6 01       	movw	r24, r12
    4594:	60 d3       	rcall	.+1728   	; 0x4c56 <fgetc>
    4596:	7c 01       	movw	r14, r24
    4598:	97 fd       	sbrc	r25, 7
    459a:	0a c0       	rjmp	.+20     	; 0x45b0 <conv_flt+0xa2>
    459c:	25 d3       	rcall	.+1610   	; 0x4be8 <tolower>
    459e:	99 27       	eor	r25, r25
    45a0:	eb 2d       	mov	r30, r11
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	8e 17       	cp	r24, r30
    45a6:	9f 07       	cpc	r25, r31
    45a8:	59 f3       	breq	.-42     	; 0x4580 <conv_flt+0x72>
    45aa:	b6 01       	movw	r22, r12
    45ac:	c7 01       	movw	r24, r14
    45ae:	ed d3       	rcall	.+2010   	; 0x4d8a <ungetc>
    45b0:	c8 58       	subi	r28, 0x88	; 136
    45b2:	df 40       	sbci	r29, 0x0F	; 15
    45b4:	79 f6       	brne	.-98     	; 0x4554 <conv_flt+0x46>
    45b6:	03 c0       	rjmp	.+6      	; 0x45be <conv_flt+0xb0>
    45b8:	c5 58       	subi	r28, 0x85	; 133
    45ba:	df 40       	sbci	r29, 0x0F	; 15
    45bc:	29 f0       	breq	.+10     	; 0x45c8 <conv_flt+0xba>
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	a0 e8       	ldi	r26, 0x80	; 128
    45c4:	bf e7       	ldi	r27, 0x7F	; 127
    45c6:	04 c0       	rjmp	.+8      	; 0x45d0 <conv_flt+0xc2>
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	a0 ec       	ldi	r26, 0xC0	; 192
    45ce:	bf e7       	ldi	r27, 0x7F	; 127
    45d0:	bc 01       	movw	r22, r24
    45d2:	cd 01       	movw	r24, r26
    45d4:	af c0       	rjmp	.+350    	; 0x4734 <conv_flt+0x226>
    45d6:	41 2c       	mov	r4, r1
    45d8:	51 2c       	mov	r5, r1
    45da:	32 01       	movw	r6, r4
    45dc:	e1 2c       	mov	r14, r1
    45de:	f1 2c       	mov	r15, r1
    45e0:	2c 2f       	mov	r18, r28
    45e2:	20 53       	subi	r18, 0x30	; 48
    45e4:	2a 30       	cpi	r18, 0x0A	; 10
    45e6:	08 f5       	brcc	.+66     	; 0x462a <conv_flt+0x11c>
    45e8:	e9 2d       	mov	r30, r9
    45ea:	e2 60       	ori	r30, 0x02	; 2
    45ec:	be 2e       	mov	r11, r30
    45ee:	89 2d       	mov	r24, r9
    45f0:	88 70       	andi	r24, 0x08	; 8
    45f2:	92 fe       	sbrs	r9, 2
    45f4:	06 c0       	rjmp	.+12     	; 0x4602 <conv_flt+0xf4>
    45f6:	81 11       	cpse	r24, r1
    45f8:	1f c0       	rjmp	.+62     	; 0x4638 <conv_flt+0x12a>
    45fa:	ff ef       	ldi	r31, 0xFF	; 255
    45fc:	ef 1a       	sub	r14, r31
    45fe:	ff 0a       	sbc	r15, r31
    4600:	1b c0       	rjmp	.+54     	; 0x4638 <conv_flt+0x12a>
    4602:	88 23       	and	r24, r24
    4604:	19 f0       	breq	.+6      	; 0x460c <conv_flt+0xfe>
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	e8 1a       	sub	r14, r24
    460a:	f1 08       	sbc	r15, r1
    460c:	40 e2       	ldi	r20, 0x20	; 32
    460e:	c3 01       	movw	r24, r6
    4610:	b2 01       	movw	r22, r4
    4612:	02 de       	rcall	.-1020   	; 0x4218 <mulacc>
    4614:	2b 01       	movw	r4, r22
    4616:	3c 01       	movw	r6, r24
    4618:	68 39       	cpi	r22, 0x98	; 152
    461a:	79 49       	sbci	r23, 0x99	; 153
    461c:	89 49       	sbci	r24, 0x99	; 153
    461e:	99 41       	sbci	r25, 0x19	; 25
    4620:	58 f0       	brcs	.+22     	; 0x4638 <conv_flt+0x12a>
    4622:	f9 2d       	mov	r31, r9
    4624:	f6 60       	ori	r31, 0x06	; 6
    4626:	bf 2e       	mov	r11, r31
    4628:	07 c0       	rjmp	.+14     	; 0x4638 <conv_flt+0x12a>
    462a:	2e 3f       	cpi	r18, 0xFE	; 254
    462c:	81 f4       	brne	.+32     	; 0x464e <conv_flt+0x140>
    462e:	93 fc       	sbrc	r9, 3
    4630:	0e c0       	rjmp	.+28     	; 0x464e <conv_flt+0x140>
    4632:	29 2d       	mov	r18, r9
    4634:	28 60       	ori	r18, 0x08	; 8
    4636:	b2 2e       	mov	r11, r18
    4638:	01 50       	subi	r16, 0x01	; 1
    463a:	11 09       	sbc	r17, r1
    463c:	39 f0       	breq	.+14     	; 0x464c <conv_flt+0x13e>
    463e:	c6 01       	movw	r24, r12
    4640:	0a d3       	rcall	.+1556   	; 0x4c56 <fgetc>
    4642:	ec 01       	movw	r28, r24
    4644:	9b 2c       	mov	r9, r11
    4646:	97 ff       	sbrs	r25, 7
    4648:	cb cf       	rjmp	.-106    	; 0x45e0 <conv_flt+0xd2>
    464a:	01 c0       	rjmp	.+2      	; 0x464e <conv_flt+0x140>
    464c:	9b 2c       	mov	r9, r11
    464e:	91 fe       	sbrs	r9, 1
    4650:	81 cf       	rjmp	.-254    	; 0x4554 <conv_flt+0x46>
    4652:	ce 01       	movw	r24, r28
    4654:	8f 7d       	andi	r24, 0xDF	; 223
    4656:	99 27       	eor	r25, r25
    4658:	85 34       	cpi	r24, 0x45	; 69
    465a:	91 05       	cpc	r25, r1
    465c:	09 f0       	breq	.+2      	; 0x4660 <conv_flt+0x152>
    465e:	3e c0       	rjmp	.+124    	; 0x46dc <conv_flt+0x1ce>
    4660:	58 01       	movw	r10, r16
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	a8 1a       	sub	r10, r24
    4666:	b1 08       	sbc	r11, r1
    4668:	09 f4       	brne	.+2      	; 0x466c <conv_flt+0x15e>
    466a:	74 cf       	rjmp	.-280    	; 0x4554 <conv_flt+0x46>
    466c:	c6 01       	movw	r24, r12
    466e:	f3 d2       	rcall	.+1510   	; 0x4c56 <fgetc>
    4670:	ec 01       	movw	r28, r24
    4672:	97 fd       	sbrc	r25, 7
    4674:	6f cf       	rjmp	.-290    	; 0x4554 <conv_flt+0x46>
    4676:	99 27       	eor	r25, r25
    4678:	8b 32       	cpi	r24, 0x2B	; 43
    467a:	91 05       	cpc	r25, r1
    467c:	29 f0       	breq	.+10     	; 0x4688 <conv_flt+0x17a>
    467e:	8d 97       	sbiw	r24, 0x2d	; 45
    4680:	61 f4       	brne	.+24     	; 0x469a <conv_flt+0x18c>
    4682:	e9 2d       	mov	r30, r9
    4684:	e0 61       	ori	r30, 0x10	; 16
    4686:	9e 2e       	mov	r9, r30
    4688:	58 01       	movw	r10, r16
    468a:	f2 e0       	ldi	r31, 0x02	; 2
    468c:	af 1a       	sub	r10, r31
    468e:	b1 08       	sbc	r11, r1
    4690:	09 f4       	brne	.+2      	; 0x4694 <conv_flt+0x186>
    4692:	60 cf       	rjmp	.-320    	; 0x4554 <conv_flt+0x46>
    4694:	c6 01       	movw	r24, r12
    4696:	df d2       	rcall	.+1470   	; 0x4c56 <fgetc>
    4698:	ec 01       	movw	r28, r24
    469a:	ce 01       	movw	r24, r28
    469c:	c0 97       	sbiw	r24, 0x30	; 48
    469e:	0a 97       	sbiw	r24, 0x0a	; 10
    46a0:	08 f0       	brcs	.+2      	; 0x46a4 <conv_flt+0x196>
    46a2:	58 cf       	rjmp	.-336    	; 0x4554 <conv_flt+0x46>
    46a4:	85 01       	movw	r16, r10
    46a6:	a1 2c       	mov	r10, r1
    46a8:	b1 2c       	mov	r11, r1
    46aa:	b5 01       	movw	r22, r10
    46ac:	bb 0c       	add	r11, r11
    46ae:	88 0b       	sbc	r24, r24
    46b0:	99 0b       	sbc	r25, r25
    46b2:	2c 2f       	mov	r18, r28
    46b4:	20 53       	subi	r18, 0x30	; 48
    46b6:	40 e2       	ldi	r20, 0x20	; 32
    46b8:	af dd       	rcall	.-1186   	; 0x4218 <mulacc>
    46ba:	5b 01       	movw	r10, r22
    46bc:	01 50       	subi	r16, 0x01	; 1
    46be:	11 09       	sbc	r17, r1
    46c0:	31 f0       	breq	.+12     	; 0x46ce <conv_flt+0x1c0>
    46c2:	c6 01       	movw	r24, r12
    46c4:	c8 d2       	rcall	.+1424   	; 0x4c56 <fgetc>
    46c6:	ec 01       	movw	r28, r24
    46c8:	c0 97       	sbiw	r24, 0x30	; 48
    46ca:	0a 97       	sbiw	r24, 0x0a	; 10
    46cc:	70 f3       	brcs	.-36     	; 0x46aa <conv_flt+0x19c>
    46ce:	94 fe       	sbrs	r9, 4
    46d0:	03 c0       	rjmp	.+6      	; 0x46d8 <conv_flt+0x1ca>
    46d2:	b1 94       	neg	r11
    46d4:	a1 94       	neg	r10
    46d6:	b1 08       	sbc	r11, r1
    46d8:	ea 0c       	add	r14, r10
    46da:	fb 1c       	adc	r15, r11
    46dc:	01 2b       	or	r16, r17
    46de:	29 f0       	breq	.+10     	; 0x46ea <conv_flt+0x1dc>
    46e0:	d7 fd       	sbrc	r29, 7
    46e2:	03 c0       	rjmp	.+6      	; 0x46ea <conv_flt+0x1dc>
    46e4:	b6 01       	movw	r22, r12
    46e6:	ce 01       	movw	r24, r28
    46e8:	50 d3       	rcall	.+1696   	; 0x4d8a <ungetc>
    46ea:	c3 01       	movw	r24, r6
    46ec:	b2 01       	movw	r22, r4
    46ee:	98 d8       	rcall	.-3792   	; 0x3820 <__floatunsisf>
    46f0:	f7 fe       	sbrs	r15, 7
    46f2:	06 c0       	rjmp	.+12     	; 0x4700 <conv_flt+0x1f2>
    46f4:	f1 94       	neg	r15
    46f6:	e1 94       	neg	r14
    46f8:	f1 08       	sbc	r15, r1
    46fa:	c1 ea       	ldi	r28, 0xA1	; 161
    46fc:	df e0       	ldi	r29, 0x0F	; 15
    46fe:	02 c0       	rjmp	.+4      	; 0x4704 <conv_flt+0x1f6>
    4700:	c9 eb       	ldi	r28, 0xB9	; 185
    4702:	df e0       	ldi	r29, 0x0F	; 15
    4704:	6e 01       	movw	r12, r28
    4706:	28 e1       	ldi	r18, 0x18	; 24
    4708:	c2 1a       	sub	r12, r18
    470a:	d1 08       	sbc	r13, r1
    470c:	00 e2       	ldi	r16, 0x20	; 32
    470e:	10 e0       	ldi	r17, 0x00	; 0
    4710:	e0 16       	cp	r14, r16
    4712:	f1 06       	cpc	r15, r17
    4714:	48 f0       	brcs	.+18     	; 0x4728 <conv_flt+0x21a>
    4716:	fe 01       	movw	r30, r28
    4718:	25 91       	lpm	r18, Z+
    471a:	35 91       	lpm	r19, Z+
    471c:	45 91       	lpm	r20, Z+
    471e:	54 91       	lpm	r21, Z
    4720:	7a d9       	rcall	.-3340   	; 0x3a16 <__mulsf3>
    4722:	e0 1a       	sub	r14, r16
    4724:	f1 0a       	sbc	r15, r17
    4726:	f4 cf       	rjmp	.-24     	; 0x4710 <conv_flt+0x202>
    4728:	24 97       	sbiw	r28, 0x04	; 4
    472a:	16 95       	lsr	r17
    472c:	07 95       	ror	r16
    472e:	cc 16       	cp	r12, r28
    4730:	dd 06       	cpc	r13, r29
    4732:	71 f7       	brne	.-36     	; 0x4710 <conv_flt+0x202>
    4734:	97 fe       	sbrs	r9, 7
    4736:	05 c0       	rjmp	.+10     	; 0x4742 <conv_flt+0x234>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	b0 58       	subi	r27, 0x80	; 128
    473e:	bc 01       	movw	r22, r24
    4740:	cd 01       	movw	r24, r26
    4742:	21 14       	cp	r2, r1
    4744:	31 04       	cpc	r3, r1
    4746:	29 f0       	breq	.+10     	; 0x4752 <conv_flt+0x244>
    4748:	f1 01       	movw	r30, r2
    474a:	60 83       	st	Z, r22
    474c:	71 83       	std	Z+1, r23	; 0x01
    474e:	82 83       	std	Z+2, r24	; 0x02
    4750:	93 83       	std	Z+3, r25	; 0x03
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	0f 91       	pop	r16
    475c:	ff 90       	pop	r15
    475e:	ef 90       	pop	r14
    4760:	df 90       	pop	r13
    4762:	cf 90       	pop	r12
    4764:	bf 90       	pop	r11
    4766:	af 90       	pop	r10
    4768:	9f 90       	pop	r9
    476a:	7f 90       	pop	r7
    476c:	6f 90       	pop	r6
    476e:	5f 90       	pop	r5
    4770:	4f 90       	pop	r4
    4772:	3f 90       	pop	r3
    4774:	2f 90       	pop	r2
    4776:	08 95       	ret

00004778 <vfscanf>:
    4778:	a0 e0       	ldi	r26, 0x00	; 0
    477a:	b0 e0       	ldi	r27, 0x00	; 0
    477c:	e1 ec       	ldi	r30, 0xC1	; 193
    477e:	f3 e2       	ldi	r31, 0x23	; 35
    4780:	20 c1       	rjmp	.+576    	; 0x49c2 <__prologue_saves__+0x8>
    4782:	5c 01       	movw	r10, r24
    4784:	eb 01       	movw	r28, r22
    4786:	4a 01       	movw	r8, r20
    4788:	fc 01       	movw	r30, r24
    478a:	17 82       	std	Z+7, r1	; 0x07
    478c:	16 82       	std	Z+6, r1	; 0x06
    478e:	61 2c       	mov	r6, r1
    4790:	f5 01       	movw	r30, r10
    4792:	03 81       	ldd	r16, Z+3	; 0x03
    4794:	fe 01       	movw	r30, r28
    4796:	03 fd       	sbrc	r16, 3
    4798:	85 91       	lpm	r24, Z+
    479a:	03 ff       	sbrs	r16, 3
    479c:	81 91       	ld	r24, Z+
    479e:	18 2f       	mov	r17, r24
    47a0:	ef 01       	movw	r28, r30
    47a2:	88 23       	and	r24, r24
    47a4:	09 f4       	brne	.+2      	; 0x47a8 <vfscanf+0x30>
    47a6:	00 c1       	rjmp	.+512    	; 0x49a8 <vfscanf+0x230>
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	16 d2       	rcall	.+1068   	; 0x4bd8 <isspace>
    47ac:	89 2b       	or	r24, r25
    47ae:	19 f0       	breq	.+6      	; 0x47b6 <vfscanf+0x3e>
    47b0:	c5 01       	movw	r24, r10
    47b2:	59 dd       	rcall	.-1358   	; 0x4266 <skip_spaces>
    47b4:	ed cf       	rjmp	.-38     	; 0x4790 <vfscanf+0x18>
    47b6:	15 32       	cpi	r17, 0x25	; 37
    47b8:	41 f4       	brne	.+16     	; 0x47ca <vfscanf+0x52>
    47ba:	fe 01       	movw	r30, r28
    47bc:	03 fd       	sbrc	r16, 3
    47be:	15 91       	lpm	r17, Z+
    47c0:	03 ff       	sbrs	r16, 3
    47c2:	11 91       	ld	r17, Z+
    47c4:	ef 01       	movw	r28, r30
    47c6:	15 32       	cpi	r17, 0x25	; 37
    47c8:	71 f4       	brne	.+28     	; 0x47e6 <vfscanf+0x6e>
    47ca:	c5 01       	movw	r24, r10
    47cc:	44 d2       	rcall	.+1160   	; 0x4c56 <fgetc>
    47ce:	97 fd       	sbrc	r25, 7
    47d0:	e9 c0       	rjmp	.+466    	; 0x49a4 <vfscanf+0x22c>
    47d2:	41 2f       	mov	r20, r17
    47d4:	50 e0       	ldi	r21, 0x00	; 0
    47d6:	9c 01       	movw	r18, r24
    47d8:	33 27       	eor	r19, r19
    47da:	24 17       	cp	r18, r20
    47dc:	35 07       	cpc	r19, r21
    47de:	c1 f2       	breq	.-80     	; 0x4790 <vfscanf+0x18>
    47e0:	b5 01       	movw	r22, r10
    47e2:	d3 d2       	rcall	.+1446   	; 0x4d8a <ungetc>
    47e4:	e1 c0       	rjmp	.+450    	; 0x49a8 <vfscanf+0x230>
    47e6:	1a 32       	cpi	r17, 0x2A	; 42
    47e8:	41 f4       	brne	.+16     	; 0x47fa <vfscanf+0x82>
    47ea:	03 fd       	sbrc	r16, 3
    47ec:	15 91       	lpm	r17, Z+
    47ee:	03 ff       	sbrs	r16, 3
    47f0:	11 91       	ld	r17, Z+
    47f2:	ef 01       	movw	r28, r30
    47f4:	77 24       	eor	r7, r7
    47f6:	73 94       	inc	r7
    47f8:	01 c0       	rjmp	.+2      	; 0x47fc <vfscanf+0x84>
    47fa:	71 2c       	mov	r7, r1
    47fc:	e1 2c       	mov	r14, r1
    47fe:	f1 2c       	mov	r15, r1
    4800:	20 ed       	ldi	r18, 0xD0	; 208
    4802:	21 0f       	add	r18, r17
    4804:	2a 30       	cpi	r18, 0x0A	; 10
    4806:	80 f4       	brcc	.+32     	; 0x4828 <vfscanf+0xb0>
    4808:	f7 2d       	mov	r31, r7
    480a:	f2 60       	ori	r31, 0x02	; 2
    480c:	7f 2e       	mov	r7, r31
    480e:	b7 01       	movw	r22, r14
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	40 e2       	ldi	r20, 0x20	; 32
    4816:	00 dd       	rcall	.-1536   	; 0x4218 <mulacc>
    4818:	7b 01       	movw	r14, r22
    481a:	fe 01       	movw	r30, r28
    481c:	03 fd       	sbrc	r16, 3
    481e:	15 91       	lpm	r17, Z+
    4820:	03 ff       	sbrs	r16, 3
    4822:	11 91       	ld	r17, Z+
    4824:	ef 01       	movw	r28, r30
    4826:	ec cf       	rjmp	.-40     	; 0x4800 <vfscanf+0x88>
    4828:	71 fe       	sbrs	r7, 1
    482a:	04 c0       	rjmp	.+8      	; 0x4834 <vfscanf+0xbc>
    482c:	e1 14       	cp	r14, r1
    482e:	f1 04       	cpc	r15, r1
    4830:	21 f4       	brne	.+8      	; 0x483a <vfscanf+0xc2>
    4832:	ba c0       	rjmp	.+372    	; 0x49a8 <vfscanf+0x230>
    4834:	ee 24       	eor	r14, r14
    4836:	ea 94       	dec	r14
    4838:	fe 2c       	mov	r15, r14
    483a:	18 36       	cpi	r17, 0x68	; 104
    483c:	19 f0       	breq	.+6      	; 0x4844 <vfscanf+0xcc>
    483e:	1c 36       	cpi	r17, 0x6C	; 108
    4840:	61 f0       	breq	.+24     	; 0x485a <vfscanf+0xe2>
    4842:	14 c0       	rjmp	.+40     	; 0x486c <vfscanf+0xf4>
    4844:	fe 01       	movw	r30, r28
    4846:	03 fd       	sbrc	r16, 3
    4848:	15 91       	lpm	r17, Z+
    484a:	03 ff       	sbrs	r16, 3
    484c:	11 91       	ld	r17, Z+
    484e:	ef 01       	movw	r28, r30
    4850:	18 36       	cpi	r17, 0x68	; 104
    4852:	61 f4       	brne	.+24     	; 0x486c <vfscanf+0xf4>
    4854:	87 2d       	mov	r24, r7
    4856:	88 60       	ori	r24, 0x08	; 8
    4858:	78 2e       	mov	r7, r24
    485a:	97 2d       	mov	r25, r7
    485c:	94 60       	ori	r25, 0x04	; 4
    485e:	79 2e       	mov	r7, r25
    4860:	fe 01       	movw	r30, r28
    4862:	03 fd       	sbrc	r16, 3
    4864:	15 91       	lpm	r17, Z+
    4866:	03 ff       	sbrs	r16, 3
    4868:	11 91       	ld	r17, Z+
    486a:	ef 01       	movw	r28, r30
    486c:	11 23       	and	r17, r17
    486e:	09 f4       	brne	.+2      	; 0x4872 <vfscanf+0xfa>
    4870:	9b c0       	rjmp	.+310    	; 0x49a8 <vfscanf+0x230>
    4872:	61 2f       	mov	r22, r17
    4874:	70 e0       	ldi	r23, 0x00	; 0
    4876:	80 e7       	ldi	r24, 0x70	; 112
    4878:	9f e0       	ldi	r25, 0x0F	; 15
    487a:	be d1       	rcall	.+892    	; 0x4bf8 <strchr_P>
    487c:	89 2b       	or	r24, r25
    487e:	09 f4       	brne	.+2      	; 0x4882 <vfscanf+0x10a>
    4880:	93 c0       	rjmp	.+294    	; 0x49a8 <vfscanf+0x230>
    4882:	70 fc       	sbrc	r7, 0
    4884:	07 c0       	rjmp	.+14     	; 0x4894 <vfscanf+0x11c>
    4886:	f4 01       	movw	r30, r8
    4888:	c0 80       	ld	r12, Z
    488a:	d1 80       	ldd	r13, Z+1	; 0x01
    488c:	c4 01       	movw	r24, r8
    488e:	02 96       	adiw	r24, 0x02	; 2
    4890:	4c 01       	movw	r8, r24
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <vfscanf+0x120>
    4894:	c1 2c       	mov	r12, r1
    4896:	d1 2c       	mov	r13, r1
    4898:	1e 36       	cpi	r17, 0x6E	; 110
    489a:	49 f4       	brne	.+18     	; 0x48ae <vfscanf+0x136>
    489c:	f5 01       	movw	r30, r10
    489e:	46 81       	ldd	r20, Z+6	; 0x06
    48a0:	57 81       	ldd	r21, Z+7	; 0x07
    48a2:	60 e0       	ldi	r22, 0x00	; 0
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	27 2d       	mov	r18, r7
    48a8:	c6 01       	movw	r24, r12
    48aa:	aa dc       	rcall	.-1708   	; 0x4200 <putval>
    48ac:	71 cf       	rjmp	.-286    	; 0x4790 <vfscanf+0x18>
    48ae:	13 36       	cpi	r17, 0x63	; 99
    48b0:	b1 f4       	brne	.+44     	; 0x48de <vfscanf+0x166>
    48b2:	71 fc       	sbrc	r7, 1
    48b4:	03 c0       	rjmp	.+6      	; 0x48bc <vfscanf+0x144>
    48b6:	ee 24       	eor	r14, r14
    48b8:	e3 94       	inc	r14
    48ba:	f1 2c       	mov	r15, r1
    48bc:	c5 01       	movw	r24, r10
    48be:	cb d1       	rcall	.+918    	; 0x4c56 <fgetc>
    48c0:	97 fd       	sbrc	r25, 7
    48c2:	70 c0       	rjmp	.+224    	; 0x49a4 <vfscanf+0x22c>
    48c4:	c1 14       	cp	r12, r1
    48c6:	d1 04       	cpc	r13, r1
    48c8:	29 f0       	breq	.+10     	; 0x48d4 <vfscanf+0x15c>
    48ca:	f6 01       	movw	r30, r12
    48cc:	80 83       	st	Z, r24
    48ce:	c6 01       	movw	r24, r12
    48d0:	01 96       	adiw	r24, 0x01	; 1
    48d2:	6c 01       	movw	r12, r24
    48d4:	91 e0       	ldi	r25, 0x01	; 1
    48d6:	e9 1a       	sub	r14, r25
    48d8:	f1 08       	sbc	r15, r1
    48da:	81 f7       	brne	.-32     	; 0x48bc <vfscanf+0x144>
    48dc:	5f c0       	rjmp	.+190    	; 0x499c <vfscanf+0x224>
    48de:	1b 35       	cpi	r17, 0x5B	; 91
    48e0:	51 f4       	brne	.+20     	; 0x48f6 <vfscanf+0x17e>
    48e2:	9e 01       	movw	r18, r28
    48e4:	a6 01       	movw	r20, r12
    48e6:	b7 01       	movw	r22, r14
    48e8:	c5 01       	movw	r24, r10
    48ea:	53 dd       	rcall	.-1370   	; 0x4392 <conv_brk>
    48ec:	ec 01       	movw	r28, r24
    48ee:	89 2b       	or	r24, r25
    48f0:	09 f0       	breq	.+2      	; 0x48f4 <vfscanf+0x17c>
    48f2:	54 c0       	rjmp	.+168    	; 0x499c <vfscanf+0x224>
    48f4:	4e c0       	rjmp	.+156    	; 0x4992 <vfscanf+0x21a>
    48f6:	c5 01       	movw	r24, r10
    48f8:	b6 dc       	rcall	.-1684   	; 0x4266 <skip_spaces>
    48fa:	97 fd       	sbrc	r25, 7
    48fc:	53 c0       	rjmp	.+166    	; 0x49a4 <vfscanf+0x22c>
    48fe:	1f 36       	cpi	r17, 0x6F	; 111
    4900:	c9 f1       	breq	.+114    	; 0x4974 <vfscanf+0x1fc>
    4902:	40 f4       	brcc	.+16     	; 0x4914 <vfscanf+0x19c>
    4904:	14 36       	cpi	r17, 0x64	; 100
    4906:	91 f1       	breq	.+100    	; 0x496c <vfscanf+0x1f4>
    4908:	19 36       	cpi	r17, 0x69	; 105
    490a:	b9 f1       	breq	.+110    	; 0x497a <vfscanf+0x202>
    490c:	18 35       	cpi	r17, 0x58	; 88
    490e:	09 f0       	breq	.+2      	; 0x4912 <vfscanf+0x19a>
    4910:	3a c0       	rjmp	.+116    	; 0x4986 <vfscanf+0x20e>
    4912:	28 c0       	rjmp	.+80     	; 0x4964 <vfscanf+0x1ec>
    4914:	13 37       	cpi	r17, 0x73	; 115
    4916:	a9 f0       	breq	.+42     	; 0x4942 <vfscanf+0x1ca>
    4918:	18 f4       	brcc	.+6      	; 0x4920 <vfscanf+0x1a8>
    491a:	10 37       	cpi	r17, 0x70	; 112
    491c:	19 f1       	breq	.+70     	; 0x4964 <vfscanf+0x1ec>
    491e:	33 c0       	rjmp	.+102    	; 0x4986 <vfscanf+0x20e>
    4920:	15 37       	cpi	r17, 0x75	; 117
    4922:	21 f1       	breq	.+72     	; 0x496c <vfscanf+0x1f4>
    4924:	18 37       	cpi	r17, 0x78	; 120
    4926:	f1 f0       	breq	.+60     	; 0x4964 <vfscanf+0x1ec>
    4928:	2e c0       	rjmp	.+92     	; 0x4986 <vfscanf+0x20e>
    492a:	c1 14       	cp	r12, r1
    492c:	d1 04       	cpc	r13, r1
    492e:	29 f0       	breq	.+10     	; 0x493a <vfscanf+0x1c2>
    4930:	f6 01       	movw	r30, r12
    4932:	00 83       	st	Z, r16
    4934:	c6 01       	movw	r24, r12
    4936:	01 96       	adiw	r24, 0x01	; 1
    4938:	6c 01       	movw	r12, r24
    493a:	91 e0       	ldi	r25, 0x01	; 1
    493c:	e9 1a       	sub	r14, r25
    493e:	f1 08       	sbc	r15, r1
    4940:	59 f0       	breq	.+22     	; 0x4958 <vfscanf+0x1e0>
    4942:	c5 01       	movw	r24, r10
    4944:	88 d1       	rcall	.+784    	; 0x4c56 <fgetc>
    4946:	8c 01       	movw	r16, r24
    4948:	97 fd       	sbrc	r25, 7
    494a:	06 c0       	rjmp	.+12     	; 0x4958 <vfscanf+0x1e0>
    494c:	45 d1       	rcall	.+650    	; 0x4bd8 <isspace>
    494e:	89 2b       	or	r24, r25
    4950:	61 f3       	breq	.-40     	; 0x492a <vfscanf+0x1b2>
    4952:	b5 01       	movw	r22, r10
    4954:	c8 01       	movw	r24, r16
    4956:	19 d2       	rcall	.+1074   	; 0x4d8a <ungetc>
    4958:	c1 14       	cp	r12, r1
    495a:	d1 04       	cpc	r13, r1
    495c:	f9 f0       	breq	.+62     	; 0x499c <vfscanf+0x224>
    495e:	f6 01       	movw	r30, r12
    4960:	10 82       	st	Z, r1
    4962:	1c c0       	rjmp	.+56     	; 0x499c <vfscanf+0x224>
    4964:	f7 2d       	mov	r31, r7
    4966:	f0 64       	ori	r31, 0x40	; 64
    4968:	7f 2e       	mov	r7, r31
    496a:	07 c0       	rjmp	.+14     	; 0x497a <vfscanf+0x202>
    496c:	87 2d       	mov	r24, r7
    496e:	80 62       	ori	r24, 0x20	; 32
    4970:	78 2e       	mov	r7, r24
    4972:	03 c0       	rjmp	.+6      	; 0x497a <vfscanf+0x202>
    4974:	97 2d       	mov	r25, r7
    4976:	90 61       	ori	r25, 0x10	; 16
    4978:	79 2e       	mov	r7, r25
    497a:	27 2d       	mov	r18, r7
    497c:	a6 01       	movw	r20, r12
    497e:	b7 01       	movw	r22, r14
    4980:	c5 01       	movw	r24, r10
    4982:	87 dc       	rcall	.-1778   	; 0x4292 <conv_int>
    4984:	04 c0       	rjmp	.+8      	; 0x498e <vfscanf+0x216>
    4986:	a6 01       	movw	r20, r12
    4988:	b7 01       	movw	r22, r14
    498a:	c5 01       	movw	r24, r10
    498c:	c0 dd       	rcall	.-1152   	; 0x450e <conv_flt>
    498e:	81 11       	cpse	r24, r1
    4990:	05 c0       	rjmp	.+10     	; 0x499c <vfscanf+0x224>
    4992:	f5 01       	movw	r30, r10
    4994:	83 81       	ldd	r24, Z+3	; 0x03
    4996:	80 73       	andi	r24, 0x30	; 48
    4998:	29 f4       	brne	.+10     	; 0x49a4 <vfscanf+0x22c>
    499a:	06 c0       	rjmp	.+12     	; 0x49a8 <vfscanf+0x230>
    499c:	70 fc       	sbrc	r7, 0
    499e:	f8 ce       	rjmp	.-528    	; 0x4790 <vfscanf+0x18>
    49a0:	63 94       	inc	r6
    49a2:	f6 ce       	rjmp	.-532    	; 0x4790 <vfscanf+0x18>
    49a4:	66 20       	and	r6, r6
    49a6:	19 f0       	breq	.+6      	; 0x49ae <vfscanf+0x236>
    49a8:	86 2d       	mov	r24, r6
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	02 c0       	rjmp	.+4      	; 0x49b2 <vfscanf+0x23a>
    49ae:	8f ef       	ldi	r24, 0xFF	; 255
    49b0:	9f ef       	ldi	r25, 0xFF	; 255
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
    49b6:	ee e0       	ldi	r30, 0x0E	; 14
    49b8:	20 c0       	rjmp	.+64     	; 0x49fa <__epilogue_restores__+0x8>

000049ba <__prologue_saves__>:
    49ba:	2f 92       	push	r2
    49bc:	3f 92       	push	r3
    49be:	4f 92       	push	r4
    49c0:	5f 92       	push	r5
    49c2:	6f 92       	push	r6
    49c4:	7f 92       	push	r7
    49c6:	8f 92       	push	r8
    49c8:	9f 92       	push	r9
    49ca:	af 92       	push	r10
    49cc:	bf 92       	push	r11
    49ce:	cf 92       	push	r12
    49d0:	df 92       	push	r13
    49d2:	ef 92       	push	r14
    49d4:	ff 92       	push	r15
    49d6:	0f 93       	push	r16
    49d8:	1f 93       	push	r17
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
    49e2:	ca 1b       	sub	r28, r26
    49e4:	db 0b       	sbc	r29, r27
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	f8 94       	cli
    49ea:	de bf       	out	0x3e, r29	; 62
    49ec:	0f be       	out	0x3f, r0	; 63
    49ee:	cd bf       	out	0x3d, r28	; 61
    49f0:	09 94       	ijmp

000049f2 <__epilogue_restores__>:
    49f2:	2a 88       	ldd	r2, Y+18	; 0x12
    49f4:	39 88       	ldd	r3, Y+17	; 0x11
    49f6:	48 88       	ldd	r4, Y+16	; 0x10
    49f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    49fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    49fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    49fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a00:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a02:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a04:	b9 84       	ldd	r11, Y+9	; 0x09
    4a06:	c8 84       	ldd	r12, Y+8	; 0x08
    4a08:	df 80       	ldd	r13, Y+7	; 0x07
    4a0a:	ee 80       	ldd	r14, Y+6	; 0x06
    4a0c:	fd 80       	ldd	r15, Y+5	; 0x05
    4a0e:	0c 81       	ldd	r16, Y+4	; 0x04
    4a10:	1b 81       	ldd	r17, Y+3	; 0x03
    4a12:	aa 81       	ldd	r26, Y+2	; 0x02
    4a14:	b9 81       	ldd	r27, Y+1	; 0x01
    4a16:	ce 0f       	add	r28, r30
    4a18:	d1 1d       	adc	r29, r1
    4a1a:	0f b6       	in	r0, 0x3f	; 63
    4a1c:	f8 94       	cli
    4a1e:	de bf       	out	0x3e, r29	; 62
    4a20:	0f be       	out	0x3f, r0	; 63
    4a22:	cd bf       	out	0x3d, r28	; 61
    4a24:	ed 01       	movw	r28, r26
    4a26:	08 95       	ret

00004a28 <__ftoa_engine>:
    4a28:	28 30       	cpi	r18, 0x08	; 8
    4a2a:	08 f0       	brcs	.+2      	; 0x4a2e <__ftoa_engine+0x6>
    4a2c:	27 e0       	ldi	r18, 0x07	; 7
    4a2e:	33 27       	eor	r19, r19
    4a30:	da 01       	movw	r26, r20
    4a32:	99 0f       	add	r25, r25
    4a34:	31 1d       	adc	r19, r1
    4a36:	87 fd       	sbrc	r24, 7
    4a38:	91 60       	ori	r25, 0x01	; 1
    4a3a:	00 96       	adiw	r24, 0x00	; 0
    4a3c:	61 05       	cpc	r22, r1
    4a3e:	71 05       	cpc	r23, r1
    4a40:	39 f4       	brne	.+14     	; 0x4a50 <__ftoa_engine+0x28>
    4a42:	32 60       	ori	r19, 0x02	; 2
    4a44:	2e 5f       	subi	r18, 0xFE	; 254
    4a46:	3d 93       	st	X+, r19
    4a48:	30 e3       	ldi	r19, 0x30	; 48
    4a4a:	2a 95       	dec	r18
    4a4c:	e1 f7       	brne	.-8      	; 0x4a46 <__ftoa_engine+0x1e>
    4a4e:	08 95       	ret
    4a50:	9f 3f       	cpi	r25, 0xFF	; 255
    4a52:	30 f0       	brcs	.+12     	; 0x4a60 <__ftoa_engine+0x38>
    4a54:	80 38       	cpi	r24, 0x80	; 128
    4a56:	71 05       	cpc	r23, r1
    4a58:	61 05       	cpc	r22, r1
    4a5a:	09 f0       	breq	.+2      	; 0x4a5e <__ftoa_engine+0x36>
    4a5c:	3c 5f       	subi	r19, 0xFC	; 252
    4a5e:	3c 5f       	subi	r19, 0xFC	; 252
    4a60:	3d 93       	st	X+, r19
    4a62:	91 30       	cpi	r25, 0x01	; 1
    4a64:	08 f0       	brcs	.+2      	; 0x4a68 <__ftoa_engine+0x40>
    4a66:	80 68       	ori	r24, 0x80	; 128
    4a68:	91 1d       	adc	r25, r1
    4a6a:	df 93       	push	r29
    4a6c:	cf 93       	push	r28
    4a6e:	1f 93       	push	r17
    4a70:	0f 93       	push	r16
    4a72:	ff 92       	push	r15
    4a74:	ef 92       	push	r14
    4a76:	19 2f       	mov	r17, r25
    4a78:	98 7f       	andi	r25, 0xF8	; 248
    4a7a:	96 95       	lsr	r25
    4a7c:	e9 2f       	mov	r30, r25
    4a7e:	96 95       	lsr	r25
    4a80:	96 95       	lsr	r25
    4a82:	e9 0f       	add	r30, r25
    4a84:	ff 27       	eor	r31, r31
    4a86:	e8 59       	subi	r30, 0x98	; 152
    4a88:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8a:	99 27       	eor	r25, r25
    4a8c:	33 27       	eor	r19, r19
    4a8e:	ee 24       	eor	r14, r14
    4a90:	ff 24       	eor	r15, r15
    4a92:	a7 01       	movw	r20, r14
    4a94:	e7 01       	movw	r28, r14
    4a96:	05 90       	lpm	r0, Z+
    4a98:	08 94       	sec
    4a9a:	07 94       	ror	r0
    4a9c:	28 f4       	brcc	.+10     	; 0x4aa8 <__ftoa_engine+0x80>
    4a9e:	36 0f       	add	r19, r22
    4aa0:	e7 1e       	adc	r14, r23
    4aa2:	f8 1e       	adc	r15, r24
    4aa4:	49 1f       	adc	r20, r25
    4aa6:	51 1d       	adc	r21, r1
    4aa8:	66 0f       	add	r22, r22
    4aaa:	77 1f       	adc	r23, r23
    4aac:	88 1f       	adc	r24, r24
    4aae:	99 1f       	adc	r25, r25
    4ab0:	06 94       	lsr	r0
    4ab2:	a1 f7       	brne	.-24     	; 0x4a9c <__ftoa_engine+0x74>
    4ab4:	05 90       	lpm	r0, Z+
    4ab6:	07 94       	ror	r0
    4ab8:	28 f4       	brcc	.+10     	; 0x4ac4 <__ftoa_engine+0x9c>
    4aba:	e7 0e       	add	r14, r23
    4abc:	f8 1e       	adc	r15, r24
    4abe:	49 1f       	adc	r20, r25
    4ac0:	56 1f       	adc	r21, r22
    4ac2:	c1 1d       	adc	r28, r1
    4ac4:	77 0f       	add	r23, r23
    4ac6:	88 1f       	adc	r24, r24
    4ac8:	99 1f       	adc	r25, r25
    4aca:	66 1f       	adc	r22, r22
    4acc:	06 94       	lsr	r0
    4ace:	a1 f7       	brne	.-24     	; 0x4ab8 <__ftoa_engine+0x90>
    4ad0:	05 90       	lpm	r0, Z+
    4ad2:	07 94       	ror	r0
    4ad4:	28 f4       	brcc	.+10     	; 0x4ae0 <__ftoa_engine+0xb8>
    4ad6:	f8 0e       	add	r15, r24
    4ad8:	49 1f       	adc	r20, r25
    4ada:	56 1f       	adc	r21, r22
    4adc:	c7 1f       	adc	r28, r23
    4ade:	d1 1d       	adc	r29, r1
    4ae0:	88 0f       	add	r24, r24
    4ae2:	99 1f       	adc	r25, r25
    4ae4:	66 1f       	adc	r22, r22
    4ae6:	77 1f       	adc	r23, r23
    4ae8:	06 94       	lsr	r0
    4aea:	a1 f7       	brne	.-24     	; 0x4ad4 <__ftoa_engine+0xac>
    4aec:	05 90       	lpm	r0, Z+
    4aee:	07 94       	ror	r0
    4af0:	20 f4       	brcc	.+8      	; 0x4afa <__ftoa_engine+0xd2>
    4af2:	49 0f       	add	r20, r25
    4af4:	56 1f       	adc	r21, r22
    4af6:	c7 1f       	adc	r28, r23
    4af8:	d8 1f       	adc	r29, r24
    4afa:	99 0f       	add	r25, r25
    4afc:	66 1f       	adc	r22, r22
    4afe:	77 1f       	adc	r23, r23
    4b00:	88 1f       	adc	r24, r24
    4b02:	06 94       	lsr	r0
    4b04:	a9 f7       	brne	.-22     	; 0x4af0 <__ftoa_engine+0xc8>
    4b06:	84 91       	lpm	r24, Z
    4b08:	10 95       	com	r17
    4b0a:	17 70       	andi	r17, 0x07	; 7
    4b0c:	41 f0       	breq	.+16     	; 0x4b1e <__ftoa_engine+0xf6>
    4b0e:	d6 95       	lsr	r29
    4b10:	c7 95       	ror	r28
    4b12:	57 95       	ror	r21
    4b14:	47 95       	ror	r20
    4b16:	f7 94       	ror	r15
    4b18:	e7 94       	ror	r14
    4b1a:	1a 95       	dec	r17
    4b1c:	c1 f7       	brne	.-16     	; 0x4b0e <__ftoa_engine+0xe6>
    4b1e:	ee e0       	ldi	r30, 0x0E	; 14
    4b20:	f1 e0       	ldi	r31, 0x01	; 1
    4b22:	68 94       	set
    4b24:	15 90       	lpm	r1, Z+
    4b26:	15 91       	lpm	r17, Z+
    4b28:	35 91       	lpm	r19, Z+
    4b2a:	65 91       	lpm	r22, Z+
    4b2c:	95 91       	lpm	r25, Z+
    4b2e:	05 90       	lpm	r0, Z+
    4b30:	7f e2       	ldi	r23, 0x2F	; 47
    4b32:	73 95       	inc	r23
    4b34:	e1 18       	sub	r14, r1
    4b36:	f1 0a       	sbc	r15, r17
    4b38:	43 0b       	sbc	r20, r19
    4b3a:	56 0b       	sbc	r21, r22
    4b3c:	c9 0b       	sbc	r28, r25
    4b3e:	d0 09       	sbc	r29, r0
    4b40:	c0 f7       	brcc	.-16     	; 0x4b32 <__ftoa_engine+0x10a>
    4b42:	e1 0c       	add	r14, r1
    4b44:	f1 1e       	adc	r15, r17
    4b46:	43 1f       	adc	r20, r19
    4b48:	56 1f       	adc	r21, r22
    4b4a:	c9 1f       	adc	r28, r25
    4b4c:	d0 1d       	adc	r29, r0
    4b4e:	7e f4       	brtc	.+30     	; 0x4b6e <__ftoa_engine+0x146>
    4b50:	70 33       	cpi	r23, 0x30	; 48
    4b52:	11 f4       	brne	.+4      	; 0x4b58 <__ftoa_engine+0x130>
    4b54:	8a 95       	dec	r24
    4b56:	e6 cf       	rjmp	.-52     	; 0x4b24 <__ftoa_engine+0xfc>
    4b58:	e8 94       	clt
    4b5a:	01 50       	subi	r16, 0x01	; 1
    4b5c:	30 f0       	brcs	.+12     	; 0x4b6a <__ftoa_engine+0x142>
    4b5e:	08 0f       	add	r16, r24
    4b60:	0a f4       	brpl	.+2      	; 0x4b64 <__ftoa_engine+0x13c>
    4b62:	00 27       	eor	r16, r16
    4b64:	02 17       	cp	r16, r18
    4b66:	08 f4       	brcc	.+2      	; 0x4b6a <__ftoa_engine+0x142>
    4b68:	20 2f       	mov	r18, r16
    4b6a:	23 95       	inc	r18
    4b6c:	02 2f       	mov	r16, r18
    4b6e:	7a 33       	cpi	r23, 0x3A	; 58
    4b70:	28 f0       	brcs	.+10     	; 0x4b7c <__ftoa_engine+0x154>
    4b72:	79 e3       	ldi	r23, 0x39	; 57
    4b74:	7d 93       	st	X+, r23
    4b76:	2a 95       	dec	r18
    4b78:	e9 f7       	brne	.-6      	; 0x4b74 <__ftoa_engine+0x14c>
    4b7a:	10 c0       	rjmp	.+32     	; 0x4b9c <__ftoa_engine+0x174>
    4b7c:	7d 93       	st	X+, r23
    4b7e:	2a 95       	dec	r18
    4b80:	89 f6       	brne	.-94     	; 0x4b24 <__ftoa_engine+0xfc>
    4b82:	06 94       	lsr	r0
    4b84:	97 95       	ror	r25
    4b86:	67 95       	ror	r22
    4b88:	37 95       	ror	r19
    4b8a:	17 95       	ror	r17
    4b8c:	17 94       	ror	r1
    4b8e:	e1 18       	sub	r14, r1
    4b90:	f1 0a       	sbc	r15, r17
    4b92:	43 0b       	sbc	r20, r19
    4b94:	56 0b       	sbc	r21, r22
    4b96:	c9 0b       	sbc	r28, r25
    4b98:	d0 09       	sbc	r29, r0
    4b9a:	98 f0       	brcs	.+38     	; 0x4bc2 <__ftoa_engine+0x19a>
    4b9c:	23 95       	inc	r18
    4b9e:	7e 91       	ld	r23, -X
    4ba0:	73 95       	inc	r23
    4ba2:	7a 33       	cpi	r23, 0x3A	; 58
    4ba4:	08 f0       	brcs	.+2      	; 0x4ba8 <__ftoa_engine+0x180>
    4ba6:	70 e3       	ldi	r23, 0x30	; 48
    4ba8:	7c 93       	st	X, r23
    4baa:	20 13       	cpse	r18, r16
    4bac:	b8 f7       	brcc	.-18     	; 0x4b9c <__ftoa_engine+0x174>
    4bae:	7e 91       	ld	r23, -X
    4bb0:	70 61       	ori	r23, 0x10	; 16
    4bb2:	7d 93       	st	X+, r23
    4bb4:	30 f0       	brcs	.+12     	; 0x4bc2 <__ftoa_engine+0x19a>
    4bb6:	83 95       	inc	r24
    4bb8:	71 e3       	ldi	r23, 0x31	; 49
    4bba:	7d 93       	st	X+, r23
    4bbc:	70 e3       	ldi	r23, 0x30	; 48
    4bbe:	2a 95       	dec	r18
    4bc0:	e1 f7       	brne	.-8      	; 0x4bba <__ftoa_engine+0x192>
    4bc2:	11 24       	eor	r1, r1
    4bc4:	ef 90       	pop	r14
    4bc6:	ff 90       	pop	r15
    4bc8:	0f 91       	pop	r16
    4bca:	1f 91       	pop	r17
    4bcc:	cf 91       	pop	r28
    4bce:	df 91       	pop	r29
    4bd0:	99 27       	eor	r25, r25
    4bd2:	87 fd       	sbrc	r24, 7
    4bd4:	90 95       	com	r25
    4bd6:	08 95       	ret

00004bd8 <isspace>:
    4bd8:	91 11       	cpse	r25, r1
    4bda:	4e c1       	rjmp	.+668    	; 0x4e78 <__ctype_isfalse>
    4bdc:	80 32       	cpi	r24, 0x20	; 32
    4bde:	19 f0       	breq	.+6      	; 0x4be6 <isspace+0xe>
    4be0:	89 50       	subi	r24, 0x09	; 9
    4be2:	85 50       	subi	r24, 0x05	; 5
    4be4:	d0 f7       	brcc	.-12     	; 0x4bda <isspace+0x2>
    4be6:	08 95       	ret

00004be8 <tolower>:
    4be8:	91 11       	cpse	r25, r1
    4bea:	08 95       	ret
    4bec:	81 54       	subi	r24, 0x41	; 65
    4bee:	8a 51       	subi	r24, 0x1A	; 26
    4bf0:	08 f4       	brcc	.+2      	; 0x4bf4 <tolower+0xc>
    4bf2:	80 5e       	subi	r24, 0xE0	; 224
    4bf4:	85 5a       	subi	r24, 0xA5	; 165
    4bf6:	08 95       	ret

00004bf8 <strchr_P>:
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	05 90       	lpm	r0, Z+
    4bfc:	06 16       	cp	r0, r22
    4bfe:	21 f0       	breq	.+8      	; 0x4c08 <strchr_P+0x10>
    4c00:	00 20       	and	r0, r0
    4c02:	d9 f7       	brne	.-10     	; 0x4bfa <strchr_P+0x2>
    4c04:	c0 01       	movw	r24, r0
    4c06:	08 95       	ret
    4c08:	31 97       	sbiw	r30, 0x01	; 1
    4c0a:	cf 01       	movw	r24, r30
    4c0c:	08 95       	ret

00004c0e <strnlen_P>:
    4c0e:	fc 01       	movw	r30, r24
    4c10:	05 90       	lpm	r0, Z+
    4c12:	61 50       	subi	r22, 0x01	; 1
    4c14:	70 40       	sbci	r23, 0x00	; 0
    4c16:	01 10       	cpse	r0, r1
    4c18:	d8 f7       	brcc	.-10     	; 0x4c10 <strnlen_P+0x2>
    4c1a:	80 95       	com	r24
    4c1c:	90 95       	com	r25
    4c1e:	8e 0f       	add	r24, r30
    4c20:	9f 1f       	adc	r25, r31
    4c22:	08 95       	ret

00004c24 <strncmp>:
    4c24:	fb 01       	movw	r30, r22
    4c26:	dc 01       	movw	r26, r24
    4c28:	41 50       	subi	r20, 0x01	; 1
    4c2a:	50 40       	sbci	r21, 0x00	; 0
    4c2c:	30 f0       	brcs	.+12     	; 0x4c3a <strncmp+0x16>
    4c2e:	8d 91       	ld	r24, X+
    4c30:	01 90       	ld	r0, Z+
    4c32:	80 19       	sub	r24, r0
    4c34:	19 f4       	brne	.+6      	; 0x4c3c <strncmp+0x18>
    4c36:	00 20       	and	r0, r0
    4c38:	b9 f7       	brne	.-18     	; 0x4c28 <strncmp+0x4>
    4c3a:	88 1b       	sub	r24, r24
    4c3c:	99 0b       	sbc	r25, r25
    4c3e:	08 95       	ret

00004c40 <strnlen>:
    4c40:	fc 01       	movw	r30, r24
    4c42:	61 50       	subi	r22, 0x01	; 1
    4c44:	70 40       	sbci	r23, 0x00	; 0
    4c46:	01 90       	ld	r0, Z+
    4c48:	01 10       	cpse	r0, r1
    4c4a:	d8 f7       	brcc	.-10     	; 0x4c42 <strnlen+0x2>
    4c4c:	80 95       	com	r24
    4c4e:	90 95       	com	r25
    4c50:	8e 0f       	add	r24, r30
    4c52:	9f 1f       	adc	r25, r31
    4c54:	08 95       	ret

00004c56 <fgetc>:
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	ec 01       	movw	r28, r24
    4c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    4c5e:	20 ff       	sbrs	r18, 0
    4c60:	33 c0       	rjmp	.+102    	; 0x4cc8 <fgetc+0x72>
    4c62:	26 ff       	sbrs	r18, 6
    4c64:	0a c0       	rjmp	.+20     	; 0x4c7a <fgetc+0x24>
    4c66:	2f 7b       	andi	r18, 0xBF	; 191
    4c68:	2b 83       	std	Y+3, r18	; 0x03
    4c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c6e:	01 96       	adiw	r24, 0x01	; 1
    4c70:	9f 83       	std	Y+7, r25	; 0x07
    4c72:	8e 83       	std	Y+6, r24	; 0x06
    4c74:	8a 81       	ldd	r24, Y+2	; 0x02
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	29 c0       	rjmp	.+82     	; 0x4ccc <fgetc+0x76>
    4c7a:	22 ff       	sbrs	r18, 2
    4c7c:	0f c0       	rjmp	.+30     	; 0x4c9c <fgetc+0x46>
    4c7e:	e8 81       	ld	r30, Y
    4c80:	f9 81       	ldd	r31, Y+1	; 0x01
    4c82:	80 81       	ld	r24, Z
    4c84:	08 2e       	mov	r0, r24
    4c86:	00 0c       	add	r0, r0
    4c88:	99 0b       	sbc	r25, r25
    4c8a:	00 97       	sbiw	r24, 0x00	; 0
    4c8c:	19 f4       	brne	.+6      	; 0x4c94 <fgetc+0x3e>
    4c8e:	20 62       	ori	r18, 0x20	; 32
    4c90:	2b 83       	std	Y+3, r18	; 0x03
    4c92:	1a c0       	rjmp	.+52     	; 0x4cc8 <fgetc+0x72>
    4c94:	31 96       	adiw	r30, 0x01	; 1
    4c96:	f9 83       	std	Y+1, r31	; 0x01
    4c98:	e8 83       	st	Y, r30
    4c9a:	0e c0       	rjmp	.+28     	; 0x4cb8 <fgetc+0x62>
    4c9c:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c9e:	fb 85       	ldd	r31, Y+11	; 0x0b
    4ca0:	09 95       	icall
    4ca2:	97 ff       	sbrs	r25, 7
    4ca4:	09 c0       	rjmp	.+18     	; 0x4cb8 <fgetc+0x62>
    4ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    4ca8:	01 96       	adiw	r24, 0x01	; 1
    4caa:	11 f0       	breq	.+4      	; 0x4cb0 <fgetc+0x5a>
    4cac:	80 e2       	ldi	r24, 0x20	; 32
    4cae:	01 c0       	rjmp	.+2      	; 0x4cb2 <fgetc+0x5c>
    4cb0:	80 e1       	ldi	r24, 0x10	; 16
    4cb2:	82 2b       	or	r24, r18
    4cb4:	8b 83       	std	Y+3, r24	; 0x03
    4cb6:	08 c0       	rjmp	.+16     	; 0x4cc8 <fgetc+0x72>
    4cb8:	2e 81       	ldd	r18, Y+6	; 0x06
    4cba:	3f 81       	ldd	r19, Y+7	; 0x07
    4cbc:	2f 5f       	subi	r18, 0xFF	; 255
    4cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc0:	3f 83       	std	Y+7, r19	; 0x07
    4cc2:	2e 83       	std	Y+6, r18	; 0x06
    4cc4:	99 27       	eor	r25, r25
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <fgetc+0x76>
    4cc8:	8f ef       	ldi	r24, 0xFF	; 255
    4cca:	9f ef       	ldi	r25, 0xFF	; 255
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	08 95       	ret

00004cd2 <fputc>:
    4cd2:	0f 93       	push	r16
    4cd4:	1f 93       	push	r17
    4cd6:	cf 93       	push	r28
    4cd8:	df 93       	push	r29
    4cda:	fb 01       	movw	r30, r22
    4cdc:	23 81       	ldd	r18, Z+3	; 0x03
    4cde:	21 fd       	sbrc	r18, 1
    4ce0:	03 c0       	rjmp	.+6      	; 0x4ce8 <fputc+0x16>
    4ce2:	8f ef       	ldi	r24, 0xFF	; 255
    4ce4:	9f ef       	ldi	r25, 0xFF	; 255
    4ce6:	2c c0       	rjmp	.+88     	; 0x4d40 <fputc+0x6e>
    4ce8:	22 ff       	sbrs	r18, 2
    4cea:	16 c0       	rjmp	.+44     	; 0x4d18 <fputc+0x46>
    4cec:	46 81       	ldd	r20, Z+6	; 0x06
    4cee:	57 81       	ldd	r21, Z+7	; 0x07
    4cf0:	24 81       	ldd	r18, Z+4	; 0x04
    4cf2:	35 81       	ldd	r19, Z+5	; 0x05
    4cf4:	42 17       	cp	r20, r18
    4cf6:	53 07       	cpc	r21, r19
    4cf8:	44 f4       	brge	.+16     	; 0x4d0a <fputc+0x38>
    4cfa:	a0 81       	ld	r26, Z
    4cfc:	b1 81       	ldd	r27, Z+1	; 0x01
    4cfe:	9d 01       	movw	r18, r26
    4d00:	2f 5f       	subi	r18, 0xFF	; 255
    4d02:	3f 4f       	sbci	r19, 0xFF	; 255
    4d04:	31 83       	std	Z+1, r19	; 0x01
    4d06:	20 83       	st	Z, r18
    4d08:	8c 93       	st	X, r24
    4d0a:	26 81       	ldd	r18, Z+6	; 0x06
    4d0c:	37 81       	ldd	r19, Z+7	; 0x07
    4d0e:	2f 5f       	subi	r18, 0xFF	; 255
    4d10:	3f 4f       	sbci	r19, 0xFF	; 255
    4d12:	37 83       	std	Z+7, r19	; 0x07
    4d14:	26 83       	std	Z+6, r18	; 0x06
    4d16:	14 c0       	rjmp	.+40     	; 0x4d40 <fputc+0x6e>
    4d18:	8b 01       	movw	r16, r22
    4d1a:	ec 01       	movw	r28, r24
    4d1c:	fb 01       	movw	r30, r22
    4d1e:	00 84       	ldd	r0, Z+8	; 0x08
    4d20:	f1 85       	ldd	r31, Z+9	; 0x09
    4d22:	e0 2d       	mov	r30, r0
    4d24:	09 95       	icall
    4d26:	89 2b       	or	r24, r25
    4d28:	e1 f6       	brne	.-72     	; 0x4ce2 <fputc+0x10>
    4d2a:	d8 01       	movw	r26, r16
    4d2c:	16 96       	adiw	r26, 0x06	; 6
    4d2e:	8d 91       	ld	r24, X+
    4d30:	9c 91       	ld	r25, X
    4d32:	17 97       	sbiw	r26, 0x07	; 7
    4d34:	01 96       	adiw	r24, 0x01	; 1
    4d36:	17 96       	adiw	r26, 0x07	; 7
    4d38:	9c 93       	st	X, r25
    4d3a:	8e 93       	st	-X, r24
    4d3c:	16 97       	sbiw	r26, 0x06	; 6
    4d3e:	ce 01       	movw	r24, r28
    4d40:	df 91       	pop	r29
    4d42:	cf 91       	pop	r28
    4d44:	1f 91       	pop	r17
    4d46:	0f 91       	pop	r16
    4d48:	08 95       	ret

00004d4a <sprintf>:
    4d4a:	ae e0       	ldi	r26, 0x0E	; 14
    4d4c:	b0 e0       	ldi	r27, 0x00	; 0
    4d4e:	ea ea       	ldi	r30, 0xAA	; 170
    4d50:	f6 e2       	ldi	r31, 0x26	; 38
    4d52:	41 ce       	rjmp	.-894    	; 0x49d6 <__prologue_saves__+0x1c>
    4d54:	0d 89       	ldd	r16, Y+21	; 0x15
    4d56:	1e 89       	ldd	r17, Y+22	; 0x16
    4d58:	86 e0       	ldi	r24, 0x06	; 6
    4d5a:	8c 83       	std	Y+4, r24	; 0x04
    4d5c:	1a 83       	std	Y+2, r17	; 0x02
    4d5e:	09 83       	std	Y+1, r16	; 0x01
    4d60:	8f ef       	ldi	r24, 0xFF	; 255
    4d62:	9f e7       	ldi	r25, 0x7F	; 127
    4d64:	9e 83       	std	Y+6, r25	; 0x06
    4d66:	8d 83       	std	Y+5, r24	; 0x05
    4d68:	ae 01       	movw	r20, r28
    4d6a:	47 5e       	subi	r20, 0xE7	; 231
    4d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d6e:	6f 89       	ldd	r22, Y+23	; 0x17
    4d70:	78 8d       	ldd	r23, Y+24	; 0x18
    4d72:	ce 01       	movw	r24, r28
    4d74:	01 96       	adiw	r24, 0x01	; 1
    4d76:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <vfprintf>
    4d7a:	ef 81       	ldd	r30, Y+7	; 0x07
    4d7c:	f8 85       	ldd	r31, Y+8	; 0x08
    4d7e:	e0 0f       	add	r30, r16
    4d80:	f1 1f       	adc	r31, r17
    4d82:	10 82       	st	Z, r1
    4d84:	2e 96       	adiw	r28, 0x0e	; 14
    4d86:	e4 e0       	ldi	r30, 0x04	; 4
    4d88:	42 ce       	rjmp	.-892    	; 0x4a0e <__epilogue_restores__+0x1c>

00004d8a <ungetc>:
    4d8a:	fb 01       	movw	r30, r22
    4d8c:	23 81       	ldd	r18, Z+3	; 0x03
    4d8e:	20 ff       	sbrs	r18, 0
    4d90:	12 c0       	rjmp	.+36     	; 0x4db6 <ungetc+0x2c>
    4d92:	26 fd       	sbrc	r18, 6
    4d94:	10 c0       	rjmp	.+32     	; 0x4db6 <ungetc+0x2c>
    4d96:	8f 3f       	cpi	r24, 0xFF	; 255
    4d98:	3f ef       	ldi	r19, 0xFF	; 255
    4d9a:	93 07       	cpc	r25, r19
    4d9c:	61 f0       	breq	.+24     	; 0x4db6 <ungetc+0x2c>
    4d9e:	82 83       	std	Z+2, r24	; 0x02
    4da0:	2f 7d       	andi	r18, 0xDF	; 223
    4da2:	20 64       	ori	r18, 0x40	; 64
    4da4:	23 83       	std	Z+3, r18	; 0x03
    4da6:	26 81       	ldd	r18, Z+6	; 0x06
    4da8:	37 81       	ldd	r19, Z+7	; 0x07
    4daa:	21 50       	subi	r18, 0x01	; 1
    4dac:	31 09       	sbc	r19, r1
    4dae:	37 83       	std	Z+7, r19	; 0x07
    4db0:	26 83       	std	Z+6, r18	; 0x06
    4db2:	99 27       	eor	r25, r25
    4db4:	08 95       	ret
    4db6:	8f ef       	ldi	r24, 0xFF	; 255
    4db8:	9f ef       	ldi	r25, 0xFF	; 255
    4dba:	08 95       	ret

00004dbc <__ultoa_invert>:
    4dbc:	fa 01       	movw	r30, r20
    4dbe:	aa 27       	eor	r26, r26
    4dc0:	28 30       	cpi	r18, 0x08	; 8
    4dc2:	51 f1       	breq	.+84     	; 0x4e18 <__ultoa_invert+0x5c>
    4dc4:	20 31       	cpi	r18, 0x10	; 16
    4dc6:	81 f1       	breq	.+96     	; 0x4e28 <__ultoa_invert+0x6c>
    4dc8:	e8 94       	clt
    4dca:	6f 93       	push	r22
    4dcc:	6e 7f       	andi	r22, 0xFE	; 254
    4dce:	6e 5f       	subi	r22, 0xFE	; 254
    4dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    4dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4dd6:	af 4f       	sbci	r26, 0xFF	; 255
    4dd8:	b1 e0       	ldi	r27, 0x01	; 1
    4dda:	3e d0       	rcall	.+124    	; 0x4e58 <__ultoa_invert+0x9c>
    4ddc:	b4 e0       	ldi	r27, 0x04	; 4
    4dde:	3c d0       	rcall	.+120    	; 0x4e58 <__ultoa_invert+0x9c>
    4de0:	67 0f       	add	r22, r23
    4de2:	78 1f       	adc	r23, r24
    4de4:	89 1f       	adc	r24, r25
    4de6:	9a 1f       	adc	r25, r26
    4de8:	a1 1d       	adc	r26, r1
    4dea:	68 0f       	add	r22, r24
    4dec:	79 1f       	adc	r23, r25
    4dee:	8a 1f       	adc	r24, r26
    4df0:	91 1d       	adc	r25, r1
    4df2:	a1 1d       	adc	r26, r1
    4df4:	6a 0f       	add	r22, r26
    4df6:	71 1d       	adc	r23, r1
    4df8:	81 1d       	adc	r24, r1
    4dfa:	91 1d       	adc	r25, r1
    4dfc:	a1 1d       	adc	r26, r1
    4dfe:	20 d0       	rcall	.+64     	; 0x4e40 <__ultoa_invert+0x84>
    4e00:	09 f4       	brne	.+2      	; 0x4e04 <__ultoa_invert+0x48>
    4e02:	68 94       	set
    4e04:	3f 91       	pop	r19
    4e06:	2a e0       	ldi	r18, 0x0A	; 10
    4e08:	26 9f       	mul	r18, r22
    4e0a:	11 24       	eor	r1, r1
    4e0c:	30 19       	sub	r19, r0
    4e0e:	30 5d       	subi	r19, 0xD0	; 208
    4e10:	31 93       	st	Z+, r19
    4e12:	de f6       	brtc	.-74     	; 0x4dca <__ultoa_invert+0xe>
    4e14:	cf 01       	movw	r24, r30
    4e16:	08 95       	ret
    4e18:	46 2f       	mov	r20, r22
    4e1a:	47 70       	andi	r20, 0x07	; 7
    4e1c:	40 5d       	subi	r20, 0xD0	; 208
    4e1e:	41 93       	st	Z+, r20
    4e20:	b3 e0       	ldi	r27, 0x03	; 3
    4e22:	0f d0       	rcall	.+30     	; 0x4e42 <__ultoa_invert+0x86>
    4e24:	c9 f7       	brne	.-14     	; 0x4e18 <__ultoa_invert+0x5c>
    4e26:	f6 cf       	rjmp	.-20     	; 0x4e14 <__ultoa_invert+0x58>
    4e28:	46 2f       	mov	r20, r22
    4e2a:	4f 70       	andi	r20, 0x0F	; 15
    4e2c:	40 5d       	subi	r20, 0xD0	; 208
    4e2e:	4a 33       	cpi	r20, 0x3A	; 58
    4e30:	18 f0       	brcs	.+6      	; 0x4e38 <__ultoa_invert+0x7c>
    4e32:	49 5d       	subi	r20, 0xD9	; 217
    4e34:	31 fd       	sbrc	r19, 1
    4e36:	40 52       	subi	r20, 0x20	; 32
    4e38:	41 93       	st	Z+, r20
    4e3a:	02 d0       	rcall	.+4      	; 0x4e40 <__ultoa_invert+0x84>
    4e3c:	a9 f7       	brne	.-22     	; 0x4e28 <__ultoa_invert+0x6c>
    4e3e:	ea cf       	rjmp	.-44     	; 0x4e14 <__ultoa_invert+0x58>
    4e40:	b4 e0       	ldi	r27, 0x04	; 4
    4e42:	a6 95       	lsr	r26
    4e44:	97 95       	ror	r25
    4e46:	87 95       	ror	r24
    4e48:	77 95       	ror	r23
    4e4a:	67 95       	ror	r22
    4e4c:	ba 95       	dec	r27
    4e4e:	c9 f7       	brne	.-14     	; 0x4e42 <__ultoa_invert+0x86>
    4e50:	00 97       	sbiw	r24, 0x00	; 0
    4e52:	61 05       	cpc	r22, r1
    4e54:	71 05       	cpc	r23, r1
    4e56:	08 95       	ret
    4e58:	9b 01       	movw	r18, r22
    4e5a:	ac 01       	movw	r20, r24
    4e5c:	0a 2e       	mov	r0, r26
    4e5e:	06 94       	lsr	r0
    4e60:	57 95       	ror	r21
    4e62:	47 95       	ror	r20
    4e64:	37 95       	ror	r19
    4e66:	27 95       	ror	r18
    4e68:	ba 95       	dec	r27
    4e6a:	c9 f7       	brne	.-14     	; 0x4e5e <__ultoa_invert+0xa2>
    4e6c:	62 0f       	add	r22, r18
    4e6e:	73 1f       	adc	r23, r19
    4e70:	84 1f       	adc	r24, r20
    4e72:	95 1f       	adc	r25, r21
    4e74:	a0 1d       	adc	r26, r0
    4e76:	08 95       	ret

00004e78 <__ctype_isfalse>:
    4e78:	99 27       	eor	r25, r25
    4e7a:	88 27       	eor	r24, r24

00004e7c <__ctype_istrue>:
    4e7c:	08 95       	ret

00004e7e <_exit>:
    4e7e:	f8 94       	cli

00004e80 <__stop_program>:
    4e80:	ff cf       	rjmp	.-2      	; 0x4e80 <__stop_program>
